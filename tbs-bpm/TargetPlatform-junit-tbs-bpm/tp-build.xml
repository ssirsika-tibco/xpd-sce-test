<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
Builds target platform based on BPM target platform. Please provide 'ru.fragment.file' and 'ru.fragment.tp.desc' parameters. 
'ru.fragment.file' is a fragment containing all extra features that should be installed on top of bpm tp.                                                        
     ====================================================================== -->
<project name="project" default="default">
    
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<macrodef name="checkFileExists">
		<attribute name="file" />
		<attribute name="message" default="File doesn't exist: '@{file}'." />
		<sequential>
			<fail message="@{message}">
				<condition>
					<not>
						<available file="@{file}" type="file" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<!-- Global properties -->
	<property environment="env" />
	<!-- The following properties are expected to be set from jenkins job (used in: 'prepareDownload' and 'setTestTp' targets):
	env.WORKSPACE - job's workspace location.
	env.BUILD_NUMBER - current build number.
	
	example:
	<property name="env.WORKSPACE" location="workspace" />
	<property name="env.BUILD_NUMBER" value="5" />
	
	-->
    
    <!--############################################-->
    <!-- Parameters -->
	<property name="SVN_REPO_TBS_BPM" value="https://emea-swi-svn.emea.tibco.com/svn/technical/xpd/sce/${autobuild.branch}/tbs-bpm"/>
    
	<!-- Specifies whether a local build (as opposed to build on infrastructure) -->
	<property name="use.local.bpm.tp" value="false"/>
    
    <!-- Description of the TP fragment. -->
	<property name="ru.fragment.tp.desc" value="JUnit BPM Features." />
    
    <!-- TP fragment that will be merged to bpm TP file. -->
	<property name="ru.fragment.file" location="requestedReleaseUnits-junit.xml" />
    
    <!--############################################-->
    
    <!-- Transformation file - merges 'ru.bpm.file' and 'ru.fragment.file' into 'ru.template.file'. -->
	<property name="merge.xslt.file" location="mergeRequestedRus.xslt" />
    
    <!-- Target of the xslt transformation. -->
	<property name="ru.file" location="requestedReleaseUnits.xml" />
    
    <!-- BPM target platform spec. file. -->
	<property name="ru.bpm.file" location="requestedReleaseUnits-bpm.xml" />
    
    <!-- Merged Target platform spec. file template. -->
	<property name="ru.template.file" location="${ru.fragment.file}" />
    
    <!-- The url of the bpm target platform definition used for merge. -->
	<property name="bpm.tp.url" value="${SVN_REPO_TBS_BPM}/TargetPlatform-tbs-bpm/requestedReleaseUnits.xml" />

    <!-- Build svn URL can only be accessed from build machines (without username/password credentials - autorized by IP) -->
	<property name="bpm.tp.build.url" value="https://emea-swi-svn.emea.tibco.com/svn-build/technical/xpd/sce/${autobuild.branch}/tbs-bpm/TargetPlatform-tbs-bpm/requestedReleaseUnits.xml" />
    
    <!-- Credential file with username and encoded password to access svn -->
	<property name="credentials.file" location="${user.home}/credentials.properties" />
    
    
	<target name="default" 
		depends="clean, getBpmTp, mergeRequestedRus, runTpBuild" 
		description="Merges dependencies and runs tp build.">
	</target>
    
	<target name="clean" description="Cleans local generated files.">
		<delete file="${ru.file}" quiet="true" />
		<delete file="${ru.bpm.file}" quiet="true" />
	</target>
    
    <target name="getBpmTp" unless="skip.bpm.tp.refresh" description="Gets BPM target platfrom into . folder.">
		<!-- If using local base tbs-bpm target platform then copy from local -->
		<if>
			<equals	arg1="${use.local.bpm.tp}" arg2="true"/>
			<then>
				<copy file="../TargetPlatform-tbs-bpm/requestedReleaseUnits.xml" tofile="${ru.bpm.file}"/>
				<condition property="bpmTpExists" value="true">
					<available file="${ru.bpm.file}" type="file" />
				</condition>
			</then>
			<else>
				<!-- Always try to refresh bpm tp first using build URL. --> 
				<antcall target="-getBpmTpFromBuildSvn"/>
				<condition property="bpmTpExists" value="true">
					<available file="${ru.bpm.file}" type="file" />
				</condition>
				<!-- If not successfull then try fallback get using normal URL and a credential file provided in user.home directory. --> 
				<if>
				 <not><isset property="bpmTpExists" /></not>
				 <then>
					<echo message="Getting bpm tp from buid URL failed so trying to get the file from the normal URL." />
					<antcall target="-getBpmTpFromSvn"/>
				 </then>
				</if>
			</else>
		</if>
	</target>
    <target name="-getBpmTpFromBuildSvn" unless="bpmTpExists">
        <echo>Copying bpm tp from: ${bpm.tp.build.url}.</echo>
        <get src="${bpm.tp.build.url}" 
        		    dest="${ru.bpm.file}" 
        			ignoreerrors="true"/>
	</target>
    <target name="-getBpmTpFromSvn" unless="bpmTpExists" depends="initCredentials">
        <echo>Refreshing '${ru.bpm.file}' from '${ru.bpm.file}'.</echo>
    	<get src="${bpm.tp.url}" 
		    dest="${ru.bpm.file}" 
		    username="${username}"
		    password="${password}"
			usetimestamp="true"/>
	</target>
    
    <target name="mergeRequestedRus" description="Merges tp fragment with bpm tp.">
        <echo>Merging '${ru.template.file}' with '${ru.bpm.file}'.</echo>
		<xslt in="${ru.template.file}" out="${ru.file}"
		      style="${merge.xslt.file}">
		  <param name="requestedRusBpmFile" expression="${ru.bpm.file}"/>
		  <param name="requestedRusFragmentFile" expression="${ru.fragment.file}"/>
		  <param name="fragmentTpDesc" expression="${ru.fragment.tp.desc}"/>
		  <outputproperty name="method" value="xml"/>
		  <outputproperty name="standalone" value="yes"/>
		  <outputproperty name="encoding" value="UTF-8"/>
		  <outputproperty name="indent" value="yes"/>
		  <outputproperty name="{http://xml.apache.org/xslt}indent-amount" value="2"/>
		</xslt>
	</target>
    
    <target name="runTpBuild" description="Runs TP build.">
		<echo>Calling build.xml to create SDA target platform.</echo>
        
		<echo>zipFilePrefix=${zipFilePrefix}</echo>
		<echo>user.home=${user.home}</echo>
		<ant antfile="build.xml">
		    <target name="clean-install" />
		    <property name="zipFilePrefix" value="${zipFilePrefix}" />
		    <property name="user.home" value="${user.home}" />
		</ant>
	</target>
    
    <!--Credentials related targets-->
    <!--###########################-->
    
	<target name="initCredentials" depends="loadCredentials, decryptPassword">
		<if>
			<not><isset property="username"/></not>
			<then>
				<fail message="Credentials are not set!" />
			</then>
		</if>
	</target>

	<target name="loadCredentials" unless="username">
		<!-- Assuming that if username is set then the credentials were provided from cmd line.-->
		<available file="${credentials.file}" type="file" property="credentials.file.exists" value="true">
		</available>
		<if>
			<equals arg1="${credentials.file.exists}" arg2="true" />
			<then>
				<echo message="Loading credentials from: ${credentials.file}" />
				<property file="${credentials.file}" />
			</then>
		</if>
	</target>
	
	<target name="decryptPassword" if="encrypted.password">
		<script language="javascript" classpath="lib/jasypt-1.9.1.jar">
			<![CDATA[
				var version = java.lang.System.getProperty("java.version");
				if (( version.startsWith("1.7")) || (version.startsWith("1.6")) ) {
				}else {
					try {
						load("nashorn:mozilla_compat.js");
					} catch (e) {
					   // ignore the exception - perhaps we are running on Rhino!
					}
				}
				// import statements
	    		importClass(org.jasypt.util.text.BasicTextEncryptor);
	    		importPackage(org.jasypt.util.text);
			
				function main() {
					var password = project.getProperty("password");
					var en = new BasicTextEncryptor();
					en.setPassword("TIBCO");
					project.setProperty("password", en.decrypt(password));
				};
			
				main();
	    	    ]]>
		</script>
	</target>	
	
	<target name="encryptPassword" description="Utility target to encode password. Provide cmd line argument '-Dpassword=mypasdword' to obtain encoded password stirng.">
		<!--<property name="password" value="..." /> -->
		<script language="javascript" classpath="lib/jasypt-1.9.1.jar">
			<![CDATA[
				var version = java.lang.System.getProperty("java.version");
				if (( version.startsWith("1.7")) || (version.startsWith("1.6")) ) {
				}else {
					try {
						load("nashorn:mozilla_compat.js");
					} catch (e) {
					   // ignore the exception - perhaps we are running on Rhino!
					}
				}
				// import statements
	    		importClass(org.jasypt.util.text.BasicTextEncryptor);
	    		importPackage(org.jasypt.util.text);
	
				function main() {
					var password = project.getProperty("password");
					var en = new BasicTextEncryptor();
					en.setPassword("TIBCO");			
					var encText = en.encrypt(password);
					print("Encrypetd password:[" + encText + "] (excludes []).");
				};
			
				main();
			
	    	    ]]>
		</script>
	</target>

</project>
