<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
Builds exec target platform.                                                             
     ====================================================================== -->
<project name="project" default="default">
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<macrodef name="checkFileExists">
		<attribute name="file" />
		<attribute name="message" default="File doesn't exist: '@{file}'." />
		<sequential>
			<fail message="@{message}">
				<condition>
					<not>
						<available file="@{file}" type="file" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<!-- Global properties -->
	<property environment="env" />
	<!-- The following properties are expected to be set from jenkins job (used in: 'prepareDownload' and 'setTestTp' targets):
	env.WORKSPACE - job's workspace location.
	env.BUILD_NUMBER - current build number.
	
	example:
	<property name="env.WORKSPACE" location="workspace" />
	<property name="env.BUILD_NUMBER" value="5" />
	
	Also 'tp.dir' proprerty is pointing to the dir containing target platform definition and should be specified as a param (usually: C:\DevTargetPlatform in our jenkins case).
	-->
	<property name="tp.dir" location="out" />
	
	<property name="reldist.assembly.url" value="http://reldist.na.tibco.com/package/zip_assembly_archive" />
	<property name="zipFilePrefix" value="exec-tp-" />
    <property name="zip.base.filename" value="${zipFilePrefix}${env.BUILD_NUMBER}"/>    		
    <property name="zip.filename" value="${zip.base.filename}.zip"/>    	
	
	<property name="ru.file" location="requestedReleaseUnits.xml" />
	<property name="dependencies.file" location="evaluatedDependencies.xml" />
	<property name="versions.file" location="evaluatedDependencies.properties" />
	<property name="assemblies.file" location="assemblies.txt" />
	<property name="assemblies.download.dir" location="downloads" />
	<property name="assemblies.install.dir" location="exec-tp-install" />
	<property name="baseExecTp.file" location="C:/builder/eclipse/base-exec-tp.zip" /><!-- location of the zip file with a base tp -->
	<property name="execTp.file" location="exec-tp.zip" />
	<property name="credentials.file" location="${user.home}/credentials.properties" />

	<target name="default" 
		depends="initCredentials, clean, getVersions, createAssembliesList, downloadAssemblies, installBaseAssemblies, installAssemblies, zipInstallation, prepareDownload, setTestTp" 
		description="Runs the whole cycle of clean exec platform creation.">
	</target>

	<target name="initCredentials" depends="loadCredentials, decryptPassword">
		<if>
			<not><isset property="username"/></not>
			<then>
				<fail message="Credentials are not set!" />
			</then>
		</if>
	</target>

	<target name="loadCredentials" unless="username">
		<!-- Assuming that if username is set then the credentials were provided from cmd line.-->
		<available file="${credentials.file}" type="file" property="credentials.file.exists" value="true">
		</available>
		<if>
			<equals arg1="${credentials.file.exists}" arg2="true" />
			<then>
				<echo message="Loading credentials from: ${credentials.file}" />
				<property file="${credentials.file}" />
			</then>
		</if>
	</target>
	
	<target name="decryptPassword" if="encrypted.password">
		<script language="javascript" classpath="lib/jasypt-1.9.1.jar">
			<![CDATA[
                //Fix for nashorn (in jre 1.8 +)
                var version = java.lang.System.getProperty("java.version");
                if (( version.startsWith("1.7")) || (version.startsWith("1.6")) ) {
                }else {
                    try {
                        load("nashorn:mozilla_compat.js");
                    } catch (e) {
                       // ignore the exception - perhaps we are running on Rhino!
                    }
                }
                
				// import statements
	    		importClass(org.jasypt.util.text.BasicTextEncryptor);
	    		importPackage(org.jasypt.util.text);
			
				function main() {
					var password = project.getProperty("password");
					var en = new BasicTextEncryptor();
					en.setPassword("TIBCO");
					project.setProperty("password", en.decrypt(password));
				};
			
				main();
	    	    ]]>
		</script>
	</target>

	<target name="clean">
		<delete file="${dependencies.file}" quiet="true" />
		<delete file="${versions.file}" quiet="true" />
		<delete file="${assemblies.file}" quiet="true" />
		<delete file="${execTp.file}" quiet="true" />
		<delete dir="${assemblies.download.dir}" quiet="true" />
		<delete dir="${assemblies.install.dir}" quiet="true" />
	</target>

	<target name="getVersions" description="Gets the latest versions from reldist.">
		<echo>Evaluating dependencies.</echo>
		<ant antfile="build.xml" target="resolve-closure" />
		<echo>Creating: ${versions.file}.</echo>
		<xslt in="${dependencies.file}" out="${versions.file}" style="baseline2properties.xslt">
			<outputproperty name="method" value="text" />
			<outputproperty name="standalone" value="yes" />
			<outputproperty name="indent" value="no" />
			<outputproperty name="encoding" value="ASCII" />
		</xslt>
	</target>

	<target name="downloadAssemblies" description="Downloads list of assemblies specified in the file from reldist.">
		<echo>Downloading assemblies to: ${assemblies.download.dir}</echo>
		<checkFileExists file="${assemblies.file}" />
		<mkdir dir="${assemblies.download.dir}" />
		<loadfile property="assemblies.list" srcFile="${assemblies.file}">
			<filterchain>
				<tokenfilter>
					<ignoreblank />
				</tokenfilter>
				<tokenfilter delimoutput="," />
			</filterchain>
		</loadfile>
		<echo>${assemblies.list}</echo>
		<for list="${assemblies.list}" param="fileName">
			<sequential>
				<echo>Downloading: @{fileName}</echo>
				<!--<echo>From: ${reldist.assembly.url}/@{fileName}</echo>-->
				<get src="${reldist.assembly.url}/@{fileName}" dest="${assemblies.download.dir}/@{fileName}" username="${username}" password="${password}" usetimestamp="true" />
			</sequential>
		</for>
	</target>

	<target name="installAssemblies" description="Install downloaded assemblies.">
		<echo>Install assemblies from: '${assemblies.download.dir}' to: '${assemblies.install.dir}'</echo>
		<mkdir dir="${assemblies.install.dir}" />
		<for param="file">
			<path>
				<fileset dir="${assemblies.download.dir}" includes="*.zip" />
			</path>
			<sequential>
				<echo>Installing: @{file}</echo>
				<unzip src="@{file}" dest="${assemblies.install.dir}">
					<patternset>
						<include name="source/**" />
					</patternset>
					<mapper type="glob" from="source/*" to="*" />
				</unzip>
			</sequential>
		</for>
	</target>

	<target name="installBaseAssemblies" description="Install base assemblies." if="baseExecTp.file">
		<echo>Install base assemblies from: '${baseExecTp.file}' to: '${assemblies.install.dir}'</echo>
		<mkdir dir="${assemblies.install.dir}" />
		<unzip src="${baseExecTp.file}" dest="${assemblies.install.dir}">
		</unzip>
	</target>

	<target name="zipInstallation" description="Install base assemblies.">
		<echo>Zipping: '${assemblies.install.dir}' into: ${execTp.file}</echo>
		<zip destfile="${execTp.file}" basedir="${assemblies.install.dir}">
		</zip>
	</target>

	<target name="createAssembliesList" description="Create list of assemblies to download.">
		<echo>Creating: ${assemblies.file}</echo>
		<checkFileExists file="${ru.file}" />
		<checkFileExists file="${versions.file}" />
		<script language="javascript">
			<![CDATA[
                //Fix for nashorn (in jre 1.8 +)
                var version = java.lang.System.getProperty("java.version");
                if (( version.startsWith("1.7")) || (version.startsWith("1.6")) ) {
                }else {
                    try {
                        load("nashorn:mozilla_compat.js");
                    } catch (e) {
                       // ignore the exception - perhaps we are running on Rhino!
                    }
                }
                
				// import statements
				importPackage(java.io);
				importClass(java.io.File);
				importClass(java.io.FileReader);
				importClass(java.io.BufferedReader);
				importClass(java.lang.StringBuilder);
	    		importClass(java.lang.System);
	    		importClass(java.lang.Integer);
	    		importClass(java.lang.Long);
	    		importClass(java.util.ArrayList);
	    		importClass(java.util.HashSet);
	    		importClass(java.util.HashMap);
	    		importClass(javax.xml.parsers.DocumentBuilderFactory);
	    		importClass(javax.xml.parsers.DocumentBuilder);
	    		importPackage(org.w3c.dom);
		
				function getAssemblyList(file, verProperties) {
					var builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
					var builder = builderFactory.newDocumentBuilder();
					try {
					    var document = builder.parse(
					        	    new File(file));
						var rootElement = document.getDocumentElement();
						var assemblies = new ArrayList(16);
						processElements(rootElement, verProperties, assemblies);
						return assemblies;
					} catch (e) {
					    print("Error: " + e + "\n");
					}
				}
				
				function processElements(element, verProperties, assemblies) {
					var nodes = element.getChildNodes();
					for(var i=0; i < nodes.getLength(); i++){
					  var node = nodes.item(i);
					  if (node.getNodeType() == Node.ELEMENT_NODE) {					
					    if ("import".equals(node.getTagName())) {
							var featureId = node.getAttribute("feature");
				       		var version = verProperties.get(featureId);
							assemblies.add(convertFeatureToAssembly(featureId, version));
				        } else {
							processElements(node, verProperties, assemblies);
						}
					  }
					}
				}
				
				function convertFeatureToAssembly(featureId, version) {
					return "assembly_tibco_" + featureId.replace(".","_") + "_" + version + ".zip";
				}
				
				
				function main() {
					var ruFile = project.getProperty("ru.file");
					var versionFile = project.getProperty("versions.file");
					var assembliesFile = project.getProperty("assemblies.file");
			
					var verProperties = new java.util.Properties(); //key=feature.name, value=feature.version
					verProperties.load(new FileReader(versionFile));
					
					var assemblies = getAssemblyList(ruFile, verProperties);
			
					//save assemblies
					var fw = null;
					try {
						fw = new FileWriter(assembliesFile);
						var assembliesSize = assemblies.size();
						var first = true;
						for (var i = 0; i < assembliesSize; i++) {
							if (first) {
								fw.write(assemblies.get(i));
								first = false;
							} else {
								fw.write("\n" + assemblies.get(i));
							}
						}
						fw.flush();
					} catch (e) {
						print("Error writing '" + assembliesFile + "' file." + e.message + "\n");
					} finally {
					   if(fw) fw.close();
					}
					
				};
			
				main();
			
	    	    ]]>
		</script>
	</target>

    <!-- Prepare download of the TP. -->
    <target name="prepareDownload" if="env.WORKSPACE">    	
		<delete dir="${env.WORKSPACE}" includes="${zipFilePrefix}*.zip"></delete>
    	<!-- copying file instead of moving it so that it can be used by any other job as the last built tp-->
		<echo>Copying file: '${execTp.file}' to: '${env.WORKSPACE}/${zip.filename}'</echo>
    	<copy file="${execTp.file}" tofile="${env.WORKSPACE}/${zip.filename}" verbose="true"/>
    </target>
	
	<target name="setTestTp" if="env.WORKSPACE">    	
		<echo>Installing test TP: '${env.WORKSPACE}/${zip.filename}' to: '${tp.dir}/${zip.base.filename}'</echo>
		<mkdir dir="${tp.dir}" />
		<unzip src="${env.WORKSPACE}/${zip.filename}" dest="${tp.dir}/${zip.base.filename}">
		</unzip>
		<!-- Updating tp definition file.-->
		<copy file="devTargetPlatform.target.template" tofile="devTargetPlatform.target" />
		<replace file="devTargetPlatform.target" token="%%TP_BASE_LOCATION%%" value="${tp.dir}/${zip.base.filename}"/>
		<move file="devTargetPlatform.target" tofile="${tp.dir}/devTargetPlatform.target" />
    </target>
	
	
	<target name="encryptPassword" description="Utility target to encode password. Provide cmd line argument '-Dpassword=mypasdword' to obtain encoded password stirng.">
		<!--<property name="password" value="..." /> -->
		<script language="javascript" classpath="lib/jasypt-1.9.1.jar">
			<![CDATA[
                //Fix for nashorn (in jre 1.8 +)
                var version = java.lang.System.getProperty("java.version");
                if (( version.startsWith("1.7")) || (version.startsWith("1.6")) ) {
                }else {
                    try {
                        load("nashorn:mozilla_compat.js");
                    } catch (e) {
                       // ignore the exception - perhaps we are running on Rhino!
                    }
                }
                
				// import statements
	    		importClass(org.jasypt.util.text.BasicTextEncryptor);
	    		importPackage(org.jasypt.util.text);
	
				function main() {
					var password = project.getProperty("password");
					var en = new BasicTextEncryptor();
					en.setPassword("TIBCO");			
					var encText = en.encrypt(password);
					print("Encrypetd password:[" + encText + "] (excludes [])." + "\n");
				};
			
				main();
			
	    	    ]]>
		</script>
	</target>

</project>
