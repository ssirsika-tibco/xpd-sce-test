<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- edited with XMLSpy v2010 (http://www.altova.com) by Adrian Hussey (Tibco Software Ltd) -->
<xsd:schema xmlns:pm="http://www.tibco.com/bx/2009/management/processManagerType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.tibco.com/bx/2009/management/processManagerType" elementFormDefault="qualified">
	<!-- GENERIC TYPES and ELEMENTS -->
	<xsd:element name="success" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Element (mostly response) for many operations that return a success indication.

This is a work-around so that WSDL 1.1 allows fault message(s) to be declared and thrown.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="NameTypePair">
		<xsd:annotation>
			<xsd:documentation>Type to describe a name/type pair.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the item.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="type" type="xsd:string" nillable="true">
				<xsd:annotation>
					<xsd:documentation>Data type of the item.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="NameValuePair">
		<xsd:annotation>
			<xsd:documentation>Type to describe a name/value pair.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the attribute.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="value" type="xsd:string" nillable="true">
				<xsd:annotation>
					<xsd:documentation>Value of the attribute.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- BASIC PROCESS-RELATED TYPES and ELEMENTS -->    <xsd:complexType name="QualifiedProcessName">
		<xsd:annotation>
			<xsd:documentation>Type to describe the fully qualified name of a process template.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="moduleName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the module to which the process template belongs.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="processName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="version" type="xsd:string" nillable="true">
				<xsd:annotation>
					<xsd:documentation>OSGi-style version number of the process template. 

(This version number is the same as that of the module.)</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="operationInfo" type="pm:OperationInfo">
		<xsd:annotation>
			<xsd:documentation>Response element for getStarterOperationInfo operation.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="OperationInfo">
		<xsd:annotation>
			<xsd:documentation>Type to describe a starter operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="operationName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the starter operation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="parameters" type="pm:TemplateAttributes" nillable="true">
				<xsd:annotation>
					<xsd:documentation>List of parameters for this starter operation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>	<xsd:element name="qualifiedProcessName" type="pm:QualifiedProcessName">
		<xsd:annotation>
			<xsd:documentation>Element (mostly request) for many operations that require the fully qualified name of a process template.

Wildcard characters can be used when specifying moduleName, processName and version, as follows:

- An asterisk '*' can be used to match zero or more characters. 
- A question mark '?' can be used to match any single character.

- A preceding backslash can be used to escape a wild-card character (i.e. to match a '*' or '?' character).
- Using double backslash escapes the escape character (i.e. to match the backslash character).

version must either specify an exact version, or can be left blank to return information about all versions.

The response message will then include data for all process templates whose fully qualified names match the defined input criteria.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="processID" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Unique ID assigned to a process instance.

This element is the request or response element for many operations.

</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="starterOperation" type="pm:StarterOperation">
		<xsd:annotation>
			<xsd:documentation>Request element for any operation, such as getStarterOperationInfo, that needs starter operation information</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="StarterOperation">
		<xsd:annotation>
			<xsd:documentation>Type to describe a starter operation. 

A starter operation is a way for an external (to Process Manager) application to create a process instance from a process template that has one and only one starter event, which must be a none starter event. </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="processQName" type="pm:QualifiedProcessName">
				<xsd:annotation>
					<xsd:documentation>Fully qualified name of the process template from which the process instance is to be created.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="operation" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the starter operation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="starterOperations">
		<xsd:annotation>
			<xsd:documentation>Response element for listStarterOperations operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="starterOperation" type="pm:StarterOperation" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>Details of all defined starter operations.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="TemplateAttribute">
		<xsd:annotation>
			<xsd:documentation>Type to describe a process template attribute.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="pm:NameTypePair"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="TemplateAttributes">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of template attributes.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="templateAttribute" type="pm:TemplateAttribute" minOccurs="0" maxOccurs="unbounded" nillable="true">
				<xsd:annotation>
					<xsd:documentation>Details of template attributes.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ELEMENTS SPECIFIC TO INDIVIDUAL OPERATIONS -->
	<xsd:element name="createProcessInstanceInput">
		<xsd:annotation>
			<xsd:documentation>Request element for createProcessInstance operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processQName" type="pm:QualifiedProcessName">
					<xsd:annotation>
						<xsd:documentation>Qualified name of the process template from which a process instance is to be created.

A starter operation is derived from a process template's none starter event. This element names the module to which the process template belongs.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="operationName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Name of the starter operation used to create the process instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="parameterMap">
					<xsd:annotation>
						<xsd:documentation>Details of the parameters associated with this starter operation.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="parameter" type="pm:NameValuePair" minOccurs="0" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation>Details of parameters (as name/value pairs).</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!--FAULT ELEMENTS and TYPES -->
	<xsd:complexType name="BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Type for all fault elements.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="reason" type="xsd:string" nillable="true">
				<xsd:annotation>
					<xsd:documentation>Reason for the exception.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="illegalArgumentFault" type="pm:BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Fault element for illegal or missing input argument(s) exception.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="operationFailedFault" type="pm:BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Fault element for various exceptions.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
</xsd:schema>
