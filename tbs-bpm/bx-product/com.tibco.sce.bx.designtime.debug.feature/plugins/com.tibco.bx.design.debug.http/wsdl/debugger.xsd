<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:tns="http://www.tibco.com/bx/2010/debugging/debuggerType"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.tibco.com/bx/2010/debugging/debuggerType"
	elementFormDefault="qualified">
	<xsd:simpleType name="BreakWhen">
		<xsd:annotation>
			<xsd:documentation>Enumeration values to tag when break at the entrance and/or exit of an activity.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ENTRY" />
			<xsd:enumeration value="RETURN" />
			<xsd:enumeration value="BOTH" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="ConditionLanguage">
		<xsd:annotation>
			<xsd:documentation>Enumeration values to tag condition language of a conditional breakpoint.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="JSCRIPT" />
			<xsd:enumeration value="XPATH" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="emptyInput">
		<xsd:complexType />
	</xsd:element>
	<xsd:element name="success" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Element (mostly response) for many operations that return a success indication</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="instanceId" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Request or response element to many operations. instanceId is a unique ID assigned to a process instance or an activity instance id.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="modelType" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Request element to initialize operation. modelType is the model type that engine supports such as bpm,bpel,pf,bw.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="sessionId" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Response element to initialize operation. sessionId  is used to uniquely identify the client connects to the engine. "0" means connection failed because engine does not support input model type</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="isSuccess" type="xsd:boolean">
		<xsd:annotation>
			<xsd:documentation>Element (mostly response) for many operations that return a boolean</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="setVariableInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="instanceId" type="xsd:string" />
				<xsd:element name="variableName" type="xsd:string" />
				<xsd:element name="variableValue" type="xsd:string" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="addBreakpointInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
				<xsd:element name="when" type="tns:BreakWhen" />
				<xsd:element name="condExpression" type="xsd:string"
					nillable="true" />
				<xsd:element name="language" type="tns:ConditionLanguage"
					nillable="true" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="removeBreakpointInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
				<xsd:element name="when" type="tns:BreakWhen" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="addAssertionInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
				<xsd:element name="value" type="xsd:boolean" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="removeAssertionInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="removeTestpointInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="runToActivityInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="instanceId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
				<xsd:element name="when" type="tns:BreakWhen" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="setBreakpointEnableInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
				<xsd:element name="when" type="tns:BreakWhen" />
				<xsd:element name="isEnable" type="xsd:boolean" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="addTestpointInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="location" type="xsd:string" />
				<xsd:element name="expression" type="xsd:string" />
				<xsd:element name="language" type="tns:ConditionLanguage" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="Activity">
		<xsd:sequence>
			<xsd:element name="activityId" type="xsd:string" />
			<xsd:element name="activityName" type="xsd:string" />
			<xsd:element name="instanceId" type="xsd:string" />
			<xsd:element name="parentInstanceId" type="xsd:string" />
			<xsd:element name="state" type="xsd:string" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="Activities">
		<xsd:sequence>
			<xsd:element name="activity" type="tns:Activity" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="getActivitiesOutput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="activities" type="tns:Activities" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="ProcessTemplate">
		<xsd:sequence>
			<xsd:element name="moduleName" type="xsd:string" />
			<xsd:element name="moduleVersion" type="xsd:string" />
			<xsd:element name="processId" type="xsd:string" />
			<xsd:element name="processName" type="xsd:string" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ProcessTemplates">
		<xsd:sequence>
			<xsd:element name="processTemplate" type="tns:ProcessTemplate"	minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="getProcessTemplatesOutput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processTemplates" type="tns:ProcessTemplates" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="Variable">
		<xsd:sequence>
			<xsd:element name="namespace" type="xsd:string" />
			<xsd:element name="type" type="xsd:string" />
			<xsd:element name="value" type="xsd:string" />
			<xsd:element name="variableId" type="xsd:string" />
			<xsd:element name="variableName" type="xsd:string" />
			<xsd:element name="parentInstanceId" type="xsd:string" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="Variables">
		<xsd:sequence>
			<xsd:element name="variable" type="tns:Variable" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="getVariablesOutput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="variables" type="tns:Variables" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="NodeDefinition">
		<xsd:sequence>
			<xsd:element name="activityId" type="xsd:string" />
			<xsd:element name="activityName" type="xsd:string" />
			<xsd:element name="activityType" type="xsd:string" />
			<xsd:element name="parentActivityId" type="xsd:string" />
			<xsd:element name="canStepInto" type="xsd:boolean" />
			<xsd:element name="canStepOut" type="xsd:boolean" />
			<xsd:element name="sourceIds" type="xsd:string" />
			<xsd:element name="targetIds" type="xsd:string" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="NodeDefinitions">
		<xsd:sequence>
			<xsd:element name="nodeDefinition" type="tns:NodeDefinition" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="setNodeDefinitionsInput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processId" type="xsd:string" />
				<xsd:element name="nodeDefinitions" type="tns:NodeDefinitions" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="NameValuePair">
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string" />
			<xsd:element name="value" type="xsd:string" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="Notification">
		<xsd:sequence>
			<xsd:element name="data">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="eventAttribute"
							type="tns:NameValuePair" minOccurs="0" maxOccurs="unbounded" />
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="message" type="xsd:string" />
			<xsd:element name="objectName" type="xsd:string" />
			<xsd:element name="seqNumber" type="xsd:long" />
			<xsd:element name="timeStamp" type="xsd:long" />
			<xsd:element name="type" type="xsd:string" />
			<xsd:element name="variables" type="tns:Variables">
				<xsd:annotation>
					<xsd:documentation>Only for process start notification, for other type notifications, the value should be null</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="Notifications">
		<xsd:sequence>
			<xsd:element name="notification" type="tns:Notification" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="getNotificationsOutput">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="notifications" type="tns:Notifications" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- FAULT ELEMENTS and TYPES -->
	<xsd:complexType name="BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Type for all fault elements</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="reason" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Reason for the exception</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="operationFailedFault" type="tns:BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Fault element for various exceptions</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
</xsd:schema>