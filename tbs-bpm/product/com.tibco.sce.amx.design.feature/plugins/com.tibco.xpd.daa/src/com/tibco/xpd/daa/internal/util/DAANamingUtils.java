/*
 * Copyright (c) TIBCO Software Inc 2004, 2008. All rights reserved.
 */
package com.tibco.xpd.daa.internal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.QualifiedName;

/**
 * Utility class to help naming and versioning the different features
 * 
 * @author mtorres
 * 
 */
public final class DAANamingUtils {

    public static final String DAA_FILE_EXTENSION = "daa"; //$NON-NLS-1$

    private static final String simpleDateFormat = "yyyyMMddHHmmssSSS"; //$NON-NLS-1$ 

    private static final SimpleDateFormat format = new SimpleDateFormat(
            simpleDateFormat);

    public static String getAutogeneratedQualifier() {
        String formattedDate = format.format(new Date());
        return formattedDate;
    }

    public static boolean isAutogeneratedQualifier(String formattedDate) {
        try {
            format.parse(formattedDate);
            return true;
        } catch (ParseException pe) {
            return false;
        }
    }

    private static final String DAA_NS_URI = "http://www.tibco.com/daa";

    private static final String TIME_STAMP = "TIME_STAMP";

    public static void setTimeStampOnProject(IProject project, String timeStamp) {
        try {
            project.setPersistentProperty(new QualifiedName(DAA_NS_URI,
                    TIME_STAMP), timeStamp);
        } catch (CoreException coreExcption) {
            coreExcption.printStackTrace();
        }
    }

    public static String getTimeStampOnProject(IProject project) {
        try {
            String persistentProperty =
                    project.getPersistentProperty(new QualifiedName(DAA_NS_URI,
                            TIME_STAMP));
            return persistentProperty;
        } catch (CoreException coreExcption) {
            coreExcption.printStackTrace();
        }
        return null;
    }

    public static IMarker[] getAllDaaErrorMarkers(IResource resource,
            int depth, String problemMarkerType) throws CoreException {
        if (resource != null) {
            try {
                return resource.findMarkers(problemMarkerType, true, depth);
            } catch (CoreException e) {
                e.printStackTrace();
                throw e;
            }
        }
        return new IMarker[0];
    }

    public static IProject getProjectWithName(String projectName) {
        return PluginManifestHelper.getProjectWithName(projectName);
    }

    public static String getGeneratedEMFPlugProjectName(String plugId) {
        return PluginManifestHelper.getPluginProjectName(plugId);
    }

}