«EXTENSION com::tibco::bds::designtime::generator::oaw::helper»
«EXTENSION com::tibco::bds::designtime::generator::oaw::vars»
«EXTENSION com::tibco::bds::designtime::generator::oaw::BOMGlobalDataUtils»
«EXTENSION com::tibco::bds::designtime::generator::si::oaw::helper»

«DEFINE Root FOR uml::Model»
  «IF this.isGlobalDataBOM()»
  	«EXPAND PackageArtifacts»
    «EXPAND Activator»
  	«EXPAND PackageArtifacts FOREACH nestedPackage»
  «ENDIF»
«ENDDEFINE»

«DEFINE PackageArtifacts FOR uml::Package»
  «EXPAND GORefInterface FOREACH ownedElement.typeSelect(uml::Class).select(c | c.isCaseClass())»
  «EXPAND GORefImpl FOREACH ownedElement.typeSelect(uml::Class).select(c | c.isCaseClass())»
  «EXPAND CACInterface FOREACH ownedElement.typeSelect(uml::Class).select(c | c.isCaseClass())»
  «EXPAND CACImpl FOREACH ownedElement.typeSelect(uml::Class).select(c | c.isCaseClass())»
  «EXPAND PackageArtifacts FOREACH nestedPackage»
«ENDDEFINE»

«DEFINE ArgumentListFormat FOR uml::Property»
  Object «name»
«ENDDEFINE»

«REM» ******************************* Generic Definitions *********************************** «ENDREM»
«DEFINE GenericHeader FOR uml::NamedElement»
  //
  // AUTO-GENERATED BY BDS GENERATOR. DO NO EDIT THIS FILE, AS CHANGES WILL BE OVERWRITTEN.
  // Derived from BOM (model name '«getModel().getQualifiedName()»').
  //     

«ENDDEFINE»

«REM» ******************************* Utility Class Definitions *********************************** «ENDREM»
«DEFINE Activator FOR uml::Model»
    «FILE getBaseSrcPath() + "/si/Activator.java"»
package «getPackageName()».si;

import java.util.Dictionary;

import org.osgi.framework.Bundle;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;

public class Activator implements BundleActivator {

	private static BundleContext context;
	private static String bundleVersion;

	static BundleContext getContext() {
		return context;
	}

	public void start(BundleContext bundleContext) throws Exception {
		Activator.context = bundleContext;
	}

	public void stop(BundleContext bundleContext) throws Exception {
		Activator.context = null;
	}

	public static String getBundleVersion() {
		if (getContext() != null) {
			if (bundleVersion == null) {
				Bundle bundle = getContext().getBundle();
				Dictionary<?, ?> headers = bundle.getHeaders();
				Object bvValue = headers.get(Constants.BUNDLE_VERSION);
				if (bvValue != null) {
					bundleVersion = (String) bvValue;
				}
			}
		} else {
			bundleVersion = null;
		}
		return bundleVersion;
	}
}
	«ENDFILE»
«ENDDEFINE»

«REM» ******************************* CAC INTERFACE Definitions *********************************** «ENDREM»
«DEFINE CACInterface FOR uml::Class»
  «FILE getBaseSrcPath() + "/si/cac/" + name + "CAC.java"»«EXPAND GenericHeader»
      
      // This file is the «name» Case Access Class (CAC)
      package «getPackageName()».si.cac;
      
	  import java.net.MalformedURLException;
	  import java.util.List;
	  import com.tibco.bds.services.CaseDataAccessFault;
	  import com.tibco.bds.services.CaseDataChangedFault;
	  import com.tibco.bds.services.CaseModelReferenceFault;
	  import com.tibco.bds.services.CaseReferenceFault;
	  import com.tibco.bds.services.InternalServiceFault;
	  import com.tibco.bds.services.SecurityFault;
	  import com.tibco.bds.common.exception.BDSSIException;
	  import com.tibco.bds.common.si.CAC;
	  import com.tibco.bds.common.si.PaginatedList;
	  import com.tibco.bds.common.si.exception.ApplicationError;
	  import com.tibco.bds.api.dto.CaseCriteriaDTO;
      
      public interface «name»CAC extends CAC {
        «IF !isBaseClass()»
          «EXPAND CasterMethod»
        «ENDIF»
        «EXPAND CreateMethod»
        «EXPAND ReadListMethod»
        «EXPAND UpdateListMethod»
        «EXPAND DeleteRefsMethod»
        «EXPAND FindByIdMethod(this) FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|!p.isCompositeCID())»
        «EXPAND FindMethod»
        «EXPAND FindAllMethod»
        «EXPAND FindByCriteriaMethod»
        «EXPAND DeleteByIdMethod FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|!p.isCompositeCID())»
        «IF hasCompositeCIDs()»
          «EXPAND FindByCompositeIdMethod-»;
          «EXPAND DeleteByCompositeIdMethod-»;
        «ENDIF»
      }
  «ENDFILE»
«ENDDEFINE»

«DEFINE CreateMethod FOR uml::Class»
  public Object create(Object obj) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE CasterMethod FOR uml::Class»
  public «getPackageName()».si.goref.«name»Ref «name.toFirstLower()»Ref(«getRefInterfaceOldestAncestor()» obj);
«ENDDEFINE»

«DEFINE ReadListMethod FOR uml::Class»
  public List<«getPackageName()».«name»> read(List<«getPackageName()».si.goref.«name»Ref> refs) throws CaseDataAccessFault, CaseModelReferenceFault, CaseReferenceFault, InternalServiceFault, SecurityFault, IllegalArgumentException, MalformedURLException, BDSSIException;
«ENDDEFINE»

«DEFINE UpdateListMethod FOR uml::Class»
  public List<«getPackageName()».si.goref.«name»Ref> update(List<«getPackageName()».si.goref.«name»Ref> refs, List<«getPackageName()».«name»> objs) throws CaseDataAccessFault, CaseDataChangedFault, CaseModelReferenceFault, CaseReferenceFault, InternalServiceFault, SecurityFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE DeleteRefsMethod FOR uml::Class»
  public void deleteRefs(List<«getPackageName()».si.goref.«name»Ref> refs) throws CaseDataAccessFault, CaseDataChangedFault, CaseModelReferenceFault, CaseReferenceFault, InternalServiceFault, SecurityFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE FindByIdMethod(uml::Class thisClass) FOR uml::Property»
  public «thisClass.getPackageName()».si.goref.«thisClass.name»Ref findBy«name.toFirstUpper()»(Object id) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException;
«ENDDEFINE»

«DEFINE FindMethod FOR uml::Class»
  public List<«getPackageName()».si.goref.«name»Ref> find(«getPackageName()».«name» obj) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException;
  
  public PaginatedList<«getPackageName()».si.goref.«name»Ref> find(«getPackageName()».«name» obj, Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException;
«ENDDEFINE»

«DEFINE FindAllMethod FOR uml::Class»
  public List<«getPackageName()».si.goref.«name»Ref> findAll() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException;
  
  public PaginatedList<«getPackageName()».si.goref.«name»Ref> findAll(Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException;
«ENDDEFINE»

«DEFINE FindByCriteriaMethod FOR uml::Class»
  public List<«getPackageName()».si.goref.«name»Ref> findByCriteria(Object criteriaOrQueryString) throws CaseDataAccessFault,CaseModelReferenceFault, InternalServiceFault, SecurityFault,BDSSIException, ApplicationError;
  
  public PaginatedList<«getPackageName()».si.goref.«name»Ref> findByCriteria(String query, Object startIndex, Object pageSize) throws CaseDataAccessFault,CaseModelReferenceFault, InternalServiceFault, SecurityFault,BDSSIException;
«ENDDEFINE»


«DEFINE DeleteByIdMethod FOR uml::Property»
  public void deleteBy«name.toFirstUpper()»(Object id) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, CaseDataChangedFault, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE FindByCompositeIdMethod FOR uml::Class»
  public «getPackageName()».si.goref.«name»Ref 
    findByCompositeIdentifier(«EXPAND ArgumentListFormat FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|p.isCompositeCID()) SEPARATOR ','-»
    	) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException
«ENDDEFINE»

«DEFINE DeleteByCompositeIdMethod FOR uml::Class»
  public void
    deleteByCompositeIdentifier(«EXPAND ArgumentListFormat FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|p.isCompositeCID()) SEPARATOR ','-»
    	) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, CaseDataChangedFault, BDSSIException, ApplicationError
«ENDDEFINE»

«REM» ******************************* CAC IMPLEMENTATION Definitions *********************************** «ENDREM»
«DEFINE CACImpl FOR uml::Class»
  «FILE getBaseSrcPath() + "/si/cac/impl/" + name + "CACImpl.java"»«EXPAND GenericHeader»
      
      // This file is the «name» Case Access Class(CAC) Implementation Class
      package «getPackageName()».si.cac.impl;
      
	  import java.net.MalformedURLException;
	  import java.util.ArrayList;
	  import java.util.List;
	  
	  import com.tibco.bds.api.dto.CaseCriteriaDTO;  
	  import com.tibco.bds.api.dto.util.BDSTypeConversions;
	  import com.tibco.bds.services.CaseDataAccessFault;
	  import com.tibco.bds.services.CaseDataChangedFault;	  
	  import com.tibco.bds.services.CaseModelReferenceFault;
	  import com.tibco.bds.services.CaseReferenceFault;
	  import com.tibco.bds.services.InternalServiceFault;
	  import com.tibco.bds.services.SecurityFault;
	  import com.tibco.bds.common.exception.BDSSIException;
	  import com.tibco.bds.common.si.PaginatedList;
	  import com.tibco.bds.common.si.impl.CACImpl;
	  import com.tibco.bds.common.si.exception.ApplicationError;

	  
	  import org.eclipse.emf.ecore.EObject;	
	  
      public class «name»CACImpl extends CACImpl implements «getPackageName()».si.cac.«name»CAC  {
        «EXPAND CACConstructor»
		«IF !isBaseClass()»
	        «EXPAND CasterMethodImpl»
	    «ENDIF»
        «EXPAND CreateMethodImpl»
        «EXPAND ReadListMethodImpl»
        «EXPAND UpdateListMethodImpl»        
        «EXPAND DeleteRefsMethodImpl»        
        «EXPAND FindByIdMethodImpl(this) FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|!p.isCompositeCID())»
        «EXPAND FindMethodImpl»
        «EXPAND FindAllMethodImpl»
        «EXPAND FindByCriteriaMethodImpl»
        «EXPAND DeleteByIdMethodImpl(this) FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|!p.isCompositeCID())»
		«IF hasCompositeCIDs()»
	        «EXPAND FindByCompositeIdMethodImpl-»
	        «EXPAND DeleteByCompositeIdMethodImpl-»
	    «ENDIF»
      }
  «ENDFILE»
«ENDDEFINE»

«DEFINE CACConstructor FOR uml::Class»
	public «name»CACImpl() {
		super(«getModelPackageName()».si.Activator.getBundleVersion(), "«getPackageName()».«name»");
	}
«ENDDEFINE»

«DEFINE CasterMethodImpl FOR uml::Class»
	@Override
	public «getPackageName()».si.goref.«name»Ref «name.toFirstLower()»Ref(«getRefInterfaceOldestAncestor()» obj) {
		if (!(obj instanceof «getPackageName()».si.goref.«name»Ref)) {
			throw new IllegalArgumentException("«name.toFirstLower()»Ref(): Expecting «getPackageName()».si.goref.«name»Ref, but got " +
				obj.getClass().getName());
		}
        return («getPackageName()».si.goref.«name»Ref)obj;
	}
«ENDDEFINE»

«DEFINE CreateMethodImpl FOR uml::Class»
	@Override
	public Object create(Object obj) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError {
		return siService.createCaseObject(obj);
	}
«ENDDEFINE»

«DEFINE UpdateListMethodImpl FOR uml::Class»
	@SuppressWarnings("unchecked")
	public List<«getPackageName()».si.goref.«name»Ref> update(List<«getPackageName()».si.goref.«name»Ref> refs, List<«getPackageName()».«name»> objs) throws CaseDataAccessFault, CaseDataChangedFault, CaseModelReferenceFault, CaseReferenceFault, InternalServiceFault, SecurityFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError
	{
		return (List<«getPackageName()».si.goref.«name»Ref>)siService.updateCaseObject(refs, objs);
	}
«ENDDEFINE»

«DEFINE ReadListMethodImpl FOR uml::Class»
	@SuppressWarnings("unchecked")
    public List<«getPackageName()».«name»> read(List<«getPackageName()».si.goref.«name»Ref> refs) throws CaseDataAccessFault, CaseModelReferenceFault, CaseReferenceFault, InternalServiceFault, SecurityFault, IllegalArgumentException, MalformedURLException, BDSSIException
    {
    	return siService.readCase(refs);
    }
«ENDDEFINE»

«DEFINE DeleteRefsMethodImpl FOR uml::Class»
    public void deleteRefs(List<«getPackageName()».si.goref.«name»Ref> refs) throws CaseDataAccessFault, CaseDataChangedFault, CaseModelReferenceFault, CaseReferenceFault, InternalServiceFault, SecurityFault,  IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError
    {
    	siService.deleteCaseByRefObject(refs);
    }
«ENDDEFINE»

«DEFINE FindByIdMethodImpl(uml::Class thisClass) FOR uml::Property»
	@Override
	public «thisClass.getPackageName()».si.goref.«thisClass.name»Ref findBy«name.toFirstUpper()»(Object id) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException {
		«thisClass.getPackageName()».«thisClass.name» obj = «thisClass.getPackageName()».«thisClass.getEFactoryName()».eINSTANCE.create«thisClass.name»();
		obj.set«name.toFirstUpper()»(BDSTypeConversions.convertTo«getPropertyTypeJavaClassSimpleName()»(id));
		return («thisClass.getPackageName()».si.goref.«thisClass.name»Ref)siService.findCaseByCID(obj);
	}
«ENDDEFINE»

«DEFINE FindMethodImpl FOR uml::Class»
	@Override
	@SuppressWarnings("unchecked")
	public List<«getPackageName()».si.goref.«name»Ref> find(«getPackageName()».«name» obj) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException {
		return siService.findCaseByExample(obj);
	}

	@Override
	@SuppressWarnings("unchecked")
	public PaginatedList<«getPackageName()».si.goref.«name»Ref> find(«getPackageName()».«name» obj, Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException {
		return siService.findCaseByExample(obj, startIndex, pageSize);
	}
«ENDDEFINE»

«DEFINE FindAllMethodImpl FOR uml::Class»
	@Override
	@SuppressWarnings("unchecked")
	public List<«getPackageName()».si.goref.«name»Ref> findAll() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException {
		return siService.findAllCases();
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public PaginatedList<«getPackageName()».si.goref.«name»Ref> findAll(Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException {
		return siService.findAllCases(startIndex, pageSize);
	}
«ENDDEFINE»

«DEFINE FindByCriteriaMethodImpl FOR uml::Class»
	@Override
	@SuppressWarnings("unchecked")
	public List<«getPackageName()».si.goref.«name»Ref> findByCriteria(Object criteriaOrQueryString) throws CaseDataAccessFault,CaseModelReferenceFault, InternalServiceFault, SecurityFault, BDSSIException, ApplicationError {
		return siService.findCaseByCriteriaObject(criteriaOrQueryString);
	}

	@Override
	@SuppressWarnings("unchecked")
	public PaginatedList<«getPackageName()».si.goref.«name»Ref> findByCriteria(String query, Object startIndex, Object pageSize) throws CaseDataAccessFault,CaseModelReferenceFault, InternalServiceFault, SecurityFault,BDSSIException {
		return siService.findCaseByCriteria(query, startIndex, pageSize);
	}
«ENDDEFINE»


«DEFINE DeleteByIdMethodImpl(uml::Class thisClass) FOR uml::Property»
	@Override
	public void deleteBy«name.toFirstUpper()»(Object id) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, CaseDataChangedFault, BDSSIException, ApplicationError {
		if (id instanceof List) {
			@SuppressWarnings("unchecked")
			List<Object> objectList = (List<Object>)id;
			List<EObject> objs = new ArrayList<EObject>();
	  		for (Object idObj : objectList) 
	  		{
		  		«thisClass.getPackageName()».«thisClass.name» obj = «thisClass.getPackageName()».«thisClass.getEFactoryName()».eINSTANCE.create«thisClass.name»();
				obj.set«name.toFirstUpper()»(BDSTypeConversions.convertTo«getPropertyTypeJavaClassSimpleName()»(idObj));
				objs.add(obj);
	  		}
			siService.deleteCasesByCID(objs);
		} else {
	  		«thisClass.getPackageName()».«thisClass.name» obj = «thisClass.getPackageName()».«thisClass.getEFactoryName()».eINSTANCE.create«thisClass.name»();
			obj.set«name.toFirstUpper()»(BDSTypeConversions.convertTo«getPropertyTypeJavaClassSimpleName()»(id));
			siService.deleteCaseByCID(obj);
		}
	}
«ENDDEFINE»

«DEFINE FindByCompositeIdMethodImpl FOR uml::Class»
	@Override
	«EXPAND FindByCompositeIdMethod-» {
		«getPackageName()».«name» obj = «getPackageName()».«getEFactoryName()».eINSTANCE.create«name»();
		«FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|p.isCompositeCID()) AS a-»
		  obj.set«a.name.toFirstUpper()»(BDSTypeConversions.convertTo«a.getPropertyTypeJavaClassSimpleName()»(«a.name»));
		«ENDFOREACH-»
		return («getPackageName()».si.goref.«name»Ref)siService.findCaseByCID(obj);
	}
«ENDDEFINE»

«DEFINE DeleteByCompositeIdMethodImpl FOR uml::Class»
	@Override
	«EXPAND DeleteByCompositeIdMethod-» {
  		«getPackageName()».«name» obj = «getPackageName()».«getEFactoryName()».eINSTANCE.create«name»();
		«FOREACH allFeatures().typeSelect(uml::Property).select(p|p.isCID()).select(p|p.isCompositeCID()) AS a-»
		  obj.set«a.name.toFirstUpper()»(BDSTypeConversions.convertTo«a.getPropertyTypeJavaClassSimpleName()»(«a.name»));
		«ENDFOREACH-»
		siService.deleteCaseByCID(obj); 
	}
«ENDDEFINE»

«REM» ******************************* REF INTERFACE Definitions *********************************** «ENDREM»
«DEFINE GORefInterface FOR uml::Class»
  «FILE getBaseSrcPath() + "/si/goref/" + name + "Ref.java"»«EXPAND GenericHeader»
      // This file is a case/global class ref interface.
      package «getPackageName()».si.goref;
      
	  import java.net.MalformedURLException;
	  import java.util.List;
	  import com.tibco.bds.services.CaseDataAccessFault;
	  import com.tibco.bds.services.CaseDataChangedFault;	  
	  import com.tibco.bds.services.CaseModelReferenceFault;
	  import com.tibco.bds.services.CaseReferenceFault;
	  import com.tibco.bds.services.InternalServiceFault;
	  import com.tibco.bds.services.SecurityFault;
	  import com.tibco.bds.common.exception.BDSSIException;
	  import com.tibco.bds.common.si.PaginatedList;
	  import com.tibco.bds.common.si.exception.ApplicationError;
	  import com.tibco.bds.api.dto.CaseCriteriaDTO; 
      
      public interface «name»Ref extends «getRefInterfaceBase()» {
      
        «EXPAND ReadMethod»
        «EXPAND UpdateMethod»
        «EXPAND DeleteMethod»
        «EXPAND LinkMethod FOREACH ownedAttribute.select(a | a.association != null && !(a.isComposite))»
        «EXPAND UnlinkMethod FOREACH ownedAttribute.select(a | a.association != null && !(a.isComposite))»
        «EXPAND GetRefMethod FOREACH ownedAttribute.select(a | a.upperBound() == 1 && a.association != null && !(a.isComposite))»
        «EXPAND GetRefsMethod FOREACH ownedAttribute.select(a | a.upperBound() != 1 && a.association != null && !(a.isComposite))»
        «EXPAND NavigateByCriteriaToRefMethod FOREACH ownedAttribute.select(a | a.upperBound() == 1 && a.association != null && !(a.isComposite))»
        «EXPAND NavigateByCriteriaToRefsMethod FOREACH ownedAttribute.select(a | a.upperBound() != 1 && a.association != null && !(a.isComposite))»
      }
  «ENDFILE»
«ENDDEFINE»

«DEFINE ReadMethod FOR uml::Class»
  public «getPackageName()».«name» read«name»() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, BDSSIException;
«ENDDEFINE»

«DEFINE UpdateMethod FOR uml::Class»
  public «getPackageName()».si.goref.«name»Ref update«name»(«getPackageName()».«name» obj) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, CaseDataChangedFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE DeleteMethod FOR uml::Class»
  public void delete«name»() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, CaseDataChangedFault, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE LinkMethod FOR uml::Property»
  public void link«name.toFirstUpper()»(Object refOrRefs) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE UnlinkMethod FOR uml::Property»
  public void unlink«name.toFirstUpper()»(Object refOrRefs) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE GetRefMethod FOR uml::Property»
  public «getPackageName(type)».si.goref.«type.name»Ref get«name.toFirstUpper()»Ref() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException;
«ENDDEFINE»

«DEFINE GetRefsMethod FOR uml::Property»
  public java.util.List<«getPackageName(type)».si.goref.«type.name»Ref> get«name.toFirstUpper()»Refs() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException;
  
  public PaginatedList<«getPackageName(type)».si.goref.«type.name»Ref> get«name.toFirstUpper()»Refs(Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException;
«ENDDEFINE»

«DEFINE NavigateByCriteriaToRefMethod FOR uml::Property»
  public «getPackageName(type)».si.goref.«type.name»Ref navigateByCriteriaTo«name.toFirstUpper()»Ref(Object criteriaOrQueryString) throws CaseDataAccessFault, CaseReferenceFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError;
«ENDDEFINE»

«DEFINE NavigateByCriteriaToRefsMethod FOR uml::Property»
  public List<«getPackageName(type)».si.goref.«type.name»Ref> navigateByCriteriaTo«name.toFirstUpper()»Refs(Object criteriaOrQueryString) throws CaseDataAccessFault, CaseReferenceFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError;
  
  public PaginatedList<«getPackageName(type)».si.goref.«type.name»Ref> navigateByCriteriaTo«name.toFirstUpper()»Refs(String query, Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseReferenceFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError;
«ENDDEFINE»

«REM» ******************************* REF IMPLEMENTATION Definitions *********************************** «ENDREM» 
«DEFINE GORefImpl FOR uml::Class»
  «FILE getBaseSrcPath() + "/si/goref/impl/" + name + "RefImpl.java"»«EXPAND GenericHeader»
    // This file is a case/global class ref implementation
    package «getPackageName()».si.goref.impl;
    
    import java.net.MalformedURLException;
    import java.util.List;
	import com.tibco.bds.api.dto.CaseCriteriaDTO; 
    import com.tibco.bds.api.goref.GORef;
	import com.tibco.bds.services.InternalServiceFault;
	import com.tibco.bds.services.SecurityFault;
	import com.tibco.bds.services.CaseDataAccessFault;
	import com.tibco.bds.services.CaseDataChangedFault;	
	import com.tibco.bds.services.CaseModelReferenceFault;
	import com.tibco.bds.services.CaseReferenceFault;
	import com.tibco.bds.common.exception.BDSSIException;
	import com.tibco.bds.common.si.PaginatedList;
	import com.tibco.bds.common.si.exception.ApplicationError;
	

    public class «name»RefImpl extends «getRefImplBase()» implements «getPackageName()».si.goref.«name»Ref {
    
		private static final long serialVersionUID = 1L;
    
        «EXPAND ConstructorImpl»
        «EXPAND ReadMethodImpl»
        «EXPAND UpdateMethodImpl»
        «EXPAND DeleteMethodImpl»
        «EXPAND LinkMethodImpl FOREACH ownedAttribute.select(a | a.association != null && !(a.isComposite))»
        «EXPAND UnlinkMethodImpl FOREACH ownedAttribute.select(a | a.association != null && !(a.isComposite))»
        «EXPAND GetRefMethodImpl FOREACH ownedAttribute.select(a | a.upperBound() == 1 && a.association != null && !(a.isComposite))»
        «EXPAND GetRefsMethodImpl FOREACH ownedAttribute.select(a | a.upperBound() != 1 && a.association != null && !(a.isComposite))»
        «EXPAND NavigateByCriteriaToRefMethodImpl FOREACH ownedAttribute.select(a | a.upperBound() == 1 && a.association != null && !(a.isComposite))»
        «EXPAND NavigateByCriteriaToRefsMethodImpl FOREACH ownedAttribute.select(a | a.upperBound() != 1 && a.association != null && !(a.isComposite))»        
    }
  «ENDFILE»
«ENDDEFINE»

«DEFINE ConstructorImpl FOR uml::Class»
	public «name»RefImpl(String url) throws IllegalArgumentException, MalformedURLException {
		«IF isBaseClass()»
			super(url, «getModelPackageName()».si.Activator.getBundleVersion());	
		«ELSE»
			super(url);
		«ENDIF»
	}
	
	public «name»RefImpl(GORef goref) throws MalformedURLException {
		«IF isBaseClass()»
			super(goref, «getModelPackageName()».si.Activator.getBundleVersion());
		«ELSE»
			super(goref);
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE ReadMethodImpl FOR uml::Class»
	@Override
	public «getPackageName()».«name» read«name»() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, BDSSIException {
		return («getPackageName()».«name») siService.readSingleCase(this);
	}
«ENDDEFINE»

«DEFINE UpdateMethodImpl FOR uml::Class»
	@Override
	public «getPackageName()».si.goref.«name»Ref update«name»(«getPackageName()».«name» obj) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, CaseDataChangedFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError {
		return («getPackageName()».si.goref.«name»Ref) siService.updateCaseObject(this, obj);
	}
«ENDDEFINE»

«DEFINE DeleteMethodImpl FOR uml::Class»
	@Override
	public void delete«name»() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, CaseDataChangedFault, BDSSIException, ApplicationError {
		siService.deleteCaseByRefObject(this);
	}
«ENDDEFINE»

«DEFINE LinkMethodImpl FOR uml::Property»
	@Override
	public void link«name.toFirstUpper()»(Object goRefOrRefs) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, BDSSIException, ApplicationError {
  		siService.linkCaseObject(this, goRefOrRefs, "«name»", «getPackageName(type)».si.goref.«type.name»Ref.class);
	}
«ENDDEFINE»

«DEFINE UnlinkMethodImpl FOR uml::Property»
	@Override
	public void unlink«name.toFirstUpper()»(Object goRefOrRefs) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, BDSSIException, ApplicationError {
  		siService.unlinkCaseObject(this, goRefOrRefs, "«name»", «getPackageName(type)».si.goref.«type.name»Ref.class);
	}
«ENDDEFINE»

«DEFINE GetRefMethodImpl FOR uml::Property»
	@Override
	public «getPackageName(type)».si.goref.«type.name»Ref get«name.toFirstUpper()»Ref() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException {
		return («getPackageName(type)».si.goref.«type.name»Ref)siService.navigateCaseUnary(this, "«name»");
	}
«ENDDEFINE»

«DEFINE GetRefsMethodImpl FOR uml::Property»
	@Override
	@SuppressWarnings("unchecked")
	public List<«getPackageName(type)».si.goref.«type.name»Ref> get«name.toFirstUpper()»Refs() throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException {
		return siService.navigateCaseMulti(this, "«name»");
	}

	@Override
	@SuppressWarnings("unchecked")
	public PaginatedList<«getPackageName(type)».si.goref.«type.name»Ref> get«name.toFirstUpper()»Refs(Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException {
		return siService.navigateCaseMulti(this, "«name»", startIndex, pageSize);
	}
«ENDDEFINE»

«DEFINE NavigateByCriteriaToRefMethodImpl FOR uml::Property»
	@Override
	public «getPackageName(type)».si.goref.«type.name»Ref navigateByCriteriaTo«name.toFirstUpper()»Ref(Object criteriaOrQueryString) throws CaseDataAccessFault, CaseReferenceFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError{
		return («getPackageName(type)».si.goref.«type.name»Ref) siService.navigateCaseByCriteriaToOneObject(criteriaOrQueryString, this.toString(), "«name»");
	}
«ENDDEFINE»

«DEFINE NavigateByCriteriaToRefsMethodImpl FOR uml::Property»
	@Override
	@SuppressWarnings("unchecked")
	public List<«getPackageName(type)».si.goref.«type.name»Ref> navigateByCriteriaTo«name.toFirstUpper()»Refs(Object criteriaOrQueryString) throws CaseDataAccessFault, CaseReferenceFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException, ApplicationError{
		return siService.navigateCaseByCriteriaObject(criteriaOrQueryString, this.toString(), "«name»");
	}

	@Override
	@SuppressWarnings("unchecked")
	public PaginatedList<«getPackageName(type)».si.goref.«type.name»Ref> navigateByCriteriaTo«name.toFirstUpper()»Refs(String query, Object startIndex, Object pageSize) throws CaseDataAccessFault, CaseReferenceFault, CaseModelReferenceFault, InternalServiceFault, SecurityFault, CaseReferenceFault, IllegalArgumentException, MalformedURLException, BDSSIException{
		return siService.navigateCaseByCriteria(query, startIndex, pageSize, this.toString(), "«name»");
	}
«ENDDEFINE»
