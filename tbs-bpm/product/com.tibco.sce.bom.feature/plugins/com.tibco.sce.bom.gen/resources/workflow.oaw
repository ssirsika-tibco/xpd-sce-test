<?xml version="1.0" encoding="UTF-8"?>
<workflow>

<!--
	JA: Setup is not needed as workflow is invoked from plug-in and EMF package 
	registry and factories are already set up via extensions.
	  
	<bean class="org.openarchitectureware.uml2.Setup"
		standardUML2Setup="true" />
-->		

	<!-- File with configuration parameters switching the enabled features-->
	<!-- 
		:JA the component is invoked (and sets global features configuration) from the code.
	<component
		class="org.openarchitectureware.util.featureconfig.text.TextConfigurationReader">
		<configFile value="hibernateConfig.txt" />
	</component>
	 -->
	
	<!-- Reading the model. -->
	<component class="org.openarchitectureware.emf.XmiReader">
		<modelFile value="${model.file}"/>
		<outputSlot value="model"/>
	</component>

	<!--  Default hibernate properties. This properties might be overwritten by properties passed during workflow invocation. -->
	<property
		file="hibernateCartridgeDefaults.properties" />

	<bean class="com.tibco.bs.bos.generator.BOMTypesSetup"
		standardUML2Setup="true" />
	
	<!-- Metamodel of persistatnce profile. -->	
	<bean id="mm_hibernate_profile"
		class="org.openarchitectureware.uml2.profile.ProfileMetaModel">
		<profile value="${profile.persistence.file}" />
		<errorIfStereotypeMissing
			value="${hibernate.cartridge.errorIfStereotypeMissing}" />
	</bean>

	<!-- BOM flavoured UML metamodel. -->
	<bean id="mm_uml2"
		class="com.tibco.bs.bos.generator.BOMMetaModel" />


	<feature isSelected="preProcessing">
		<component
			class="org.openarchitectureware.xtend.XtendComponent">
			<metaModel idRef="mm_uml2" />
			<metaModel idRef="mm_hibernate_profile" />
			<globalVarDef name="persistenceProfile"
				value="'${profile.persistence.file}'" />
			<invoke
				value="org::fornax::cartridges::uml2::hibernate::extensions::PreProcessing::modify(${hibernate.modelslot})" />
			<outputSlot value="${hibernate.modelslot}" />
		</component>
	</feature>
	
	<!-- Pre processing for BOM -->
	<feature isSelected="bomPreProcessing">
		<component id="bom_preprocessing"
			class="org.openarchitectureware.xtend.XtendComponent">
			<metaModel idRef="mm_uml2" />
			<metaModel idRef="mm_hibernate_profile" />
			<globalVarDef name="persistenceProfile"
				value="'${profile.persistence.file}'" />
			<invoke
				value="com::tibco::xpd::bos::gen::extensions::BOMPreProcessing::modify(${hibernate.modelslot})" />
			<outputSlot value="${hibernate.modelslot}" />
		</component>
	</feature>

	<!--Invokes the model modification. This transformations are used
	to enrich the model wih default values.
		The extension called is ModelTransformation::createDefaultValues
		The output slot is an empty slot (cause the existing model is modified and no
    <component adviceTarget="hibernateCartridge_transformations" class="oaw.xtend.XtendAdvice">
		<extensionAdvice value="com::tibco::xpd::bos::gen::extensions::ConfigurationAdvices"/>
	</component>  
     -->
	<component id="hibernateCartridge_transformations"
		class="org.openarchitectureware.xtend.XtendComponent">
		<metaModel idRef="mm_uml2" />
		<metaModel idRef="mm_hibernate_profile" />
		<invoke
			value="org::fornax::cartridges::uml2::hibernate::extensions::ModelTransformation::createDefaultValues(${hibernate.modelslot})" />
		<outputSlot value="empty" />
	</component>

	<feature isSelected="dumpTransformedModel">
		<component class="oaw.emf.XmiWriter">
			<modelFile value="${outlet.src.dir}/bomPreprocessedModel.xmi" />
			<inputSlot value="${hibernate.modelslot}"/>
		</component>
	</feature>	
	
	<!--The Check component. The checks provided by the Hibernate cartridge where invoced here-->	
	<component class="org.openarchitectureware.check.CheckComponent">
		<metaModel idRef="mm_uml2" />
		<metaModel idRef="mm_hibernate_profile" />
		<checkFile
			value="org::fornax::cartridges::uml2::hibernate::checks::Constraints" />
		<checkFile
			value="org::fornax::cartridges::uml2::hibernate::checks::AssociationChecks" />
		<emfAllChildrenSlot value="${hibernate.modelslot}" />
	</component>
	 
	<!--The Generator component.-->
	<feature isSelected="mappings">
		<component id="hibernateCartridge_mapping_generator"
			class="org.openarchitectureware.xpand2.Generator">
			<metaModel idRef="mm_uml2" />
			<metaModel idRef="mm_hibernate_profile" />
			<fileEncoding value="${file.encoding}" />
			
			<globalVarDef name="fileHeaderDoc" value="${fileHeaderDoc}" />
			<globalVarDef name="connectiondriver_class"
				value="${hibernate.connection.driver_class}" />
			<globalVarDef name="dialect" value="${hibernate.dialect}" />
			<globalVarDef name="connection_url"
				value="${hibernate.connection.url}" />
			<globalVarDef name="connection_user"
				value="${hibernate.connection.user}" />
			<globalVarDef name="connection_password"
				value="${hibernate.connection.password}" />
			<globalVarDef name="connectionPool_size"
				value="${hibernate.connection.poolSize}" />
			<globalVarDef name="current_session_context_class"
				value="${hibernate.currentSessionContextClass}" />
			<globalVarDef name="cacheProvider_class"
				value="${hibernate.cacheProviderClass}" />
			<globalVarDef name="show_sql" value="${hibernate.showSql}" />
			<globalVarDef name="hbm2ddlAuto"
				value="${hibernate.hbm2ddlAuto}" />
			<globalVarDef name="generatorClass"
				value="${hibernate.generatorClass}" />
			<globalVarDef name="hibernateAccess"
				value="${hibernate.access}" />
			<globalVarDef name="hibernateAutoImport"
				value="${hibernate.auto-import}" />
			<globalVarDef name="hibernate_properties_file"
				value="${hibernate.properties.file}"/>

			<expand value="${expand.hibernate.mapping.start.expression}" />

			<outlet path="${outlet.res.dir}">
				<postprocessor
					class="org.openarchitectureware.xpand2.output.XmlBeautifier" />
			</outlet>

			<prSrcPaths value="${outlet.res.dir}" />
			<prDefaultExcludes value="true" />
		</component>
	</feature>

		<!--The Generator component.-->
	<feature isSelected="pojo">
		<component id="hibernateCartridge_pojo_generator"
			class="org.openarchitectureware.xpand2.Generator">
			<metaModel idRef="mm_uml2" />
			<metaModel idRef="mm_hibernate_profile" />
			<fileEncoding value="${file.encoding}" />
			<advices
				value="org::fornax::cartridges::uml2::hibernate::templates::HibernateAOPExtensions" />

			<globalVarDef name="fileHeaderDoc" value="${fileHeaderDoc}" />
			<!-- JavaBasic variables -->
			<globalVarDef
				name="interface_operation_implementation_strategy"
				value="${interface.operation.implementation.strategy}" />
			<globalVarDef name="type_header_text"
				value="${type.header.text}" />
			<globalVarDef name="type_footer_text"
				value="${type.footer.text}" />
			<globalVarDef name="use_overridden_equals_hashcode_toString"
				value="${use.overridden.equals.hashcode.toString}" />
			<globalVarDef name="annotation_source_key"
				value="${annotation.source.key}" />
			<globalVarDef name="list_set_property"
				value="${list.set.property}" />
			<globalVarDef name="java_version" value="${java.version}" />
			<globalVarDef
				name="classes_operation_implementation_strategy"
				value="${classes.operation.implementation.strategy}" />

			<expand value="${expand.hibernate.pojo.start.expression}" />

			<outlet path="${outlet.src.dir}">
				<postprocessor class="oaw.xpand2.output.JavaBeautifier" />
			</outlet>

			<outlet name="outletSrcOnceDir"
				path="${outlet.src.once.dir}">
				<postprocessor class="oaw.xpand2.output.JavaBeautifier" />
			</outlet>

			<prSrcPaths value="${outlet.src.dir}" />
			<prDefaultExcludes value="true" />
		</component>
	</feature>

	<!--The SchemaExprot component. the schema export is invoced here-->
	<feature isSelected="schemaExport">
		<component id="SchemaExport"
			class="org.fornax.cartridges.uml2.hibernate.SchemaExporter">
			<modelSlot value="${hibernate.modelslot}" />
			<srcRes value="${outlet.res.dir}" />
			<propertiesFile
				value="${outlet.res.dir}/hibernate.properties" />
		</component>
	</feature>
</workflow>
