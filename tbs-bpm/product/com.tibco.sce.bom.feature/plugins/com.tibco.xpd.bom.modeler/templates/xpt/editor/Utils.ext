/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/gmf/2008/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/emf/2002/GenModel";

boolean isStandaloneDomainModel(gmfgen::GenDiagram diagram) :
	!diagram.editorGen.sameFileForDiagramAndModel && null != diagram.domainDiagramElement
;

boolean hasNavigator(gmfgen::GenEditorView editorView) :
	null != editorView.editorGen.navigator
;

private List[String] addGotoMarker(gmfgen::GenEditorView editorView, List[String] implementsList) :
	isIDEMode(editorView) ?
		implementsList.add("org.eclipse.ui.ide.IGotoMarker") :
		implementsList		
;

boolean isIDEMode(gmfgen::GenEditorView editorView) :
	null == editorView.editorGen.application
;

private List[String] addReadOnlyPropSheet(gmfgen::GenEditorView editorView, List[String] implementsList) :
	hasPropertySheet(editorView) && editorView.editorGen.propertySheet.readOnly ? 
		implementsList.add("org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor") : 
		implementsList
;

boolean hasPropertySheet(gmfgen::GenEditorView editorView) :
	null != editorView.editorGen.propertySheet
;

cached List[String] getEditorImplementsList(gmfgen::GenEditorView editorView) :
	addGotoMarker(editorView, addReadOnlyPropSheet(editorView, {}))
;

cached List[gmfgen::GenNode] getContainedSemanticNodes(gmfgen::GenContainerBase container) :
	container.containedNodes.select(node | null != node.modelFacet)
;

Collection[gmfgen::GenCommonBase] getEssentialVisualChildren(gmfgen::GenCommonBase visualParent) :
	{}
;

Collection[gmfgen::GenCommonBase] getEssentialVisualChildren(gmfgen::GenLink visualParent) :
	visualParent.labels
;

Collection[gmfgen::GenCommonBase] getEssentialVisualChildren(gmfgen::GenContainerBase visualParent) :
	visualParent.containedNodes
;

Collection[gmfgen::GenCommonBase] getEssentialVisualChildren(gmfgen::GenNode visualParent) :
	{}.addAll(visualParent.labels).addAll(visualParent.compartments).addAll(visualParent.containedNodes)
;

boolean hasDiagramElementRule(gmfgen::GenAuditRoot audits) :
	audits.rules.target.typeSelect(gmfgen::GenDiagramElementTarget).size() > 0 ||
	audits.rules.target.typeSelect(gmfgen::GenNotationElementTarget).size() > 0
;

String defaultShortcutCreationWizardClassName(gmfgen::GenDiagram diagram) :
"ShortcutCreationWizard"
;

String defaultModelElementSelectionPageClassName(gmfgen::GenDiagram diagram) :
"ModelElementSelectionPage"
;

String defaultValidateActionClassName(gmfgen::GenDiagram diagram) :
"ValidateAction"
;

private String i18nKeyForDocumentProvider(gmfgen::GenDiagram diagram) :
	// XXX might not be the best idea - as long as doc provider is single, no reason
	// to have property names based on its name (stale properties in messages.properties once 
	// the class gets renamed
	diagram.documentProviderClassName
;

String i18nKeyForDocumentProviderIsModifiable(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+"_isModifiable"
;

String i18nKeyForDocumentProviderHandleElementContentChanged(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+"_handleElementContentChanged"
;

String i18nKeyForDocumentProviderIncorrectInputError(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+".IncorrectInputError"
;

String i18nKeyForDocumentProviderNoDiagramInResourceError(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+".NoDiagramInResourceError"
;

String i18nKeyForDocumentProviderDiagramLoadingError(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+".DiagramLoadingError"
;

String i18nKeyForDocumentUnsynchronizedFileSaveError(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+".UnsynchronizedFileSaveError"
;

String i18nKeyForDocumentSaveDiagramTask(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+".SaveDiagramTask"
;

String i18nKeyForDocumentSaveNextResourceTask(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+".SaveNextResourceTask"
;

String i18nKeyForDocumentSaveAs(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForDocumentProvider()+".SaveAsOperation"
;

private String i18nKeyForDiagramEditorUtil(gmfgen::GenDiagram diagram) :
	diagram.diagramEditorUtilClassName
;

String i18nKeyForOpenModelResourceErrorDialog(gmfgen::GenDiagram diagram) :
    diagram.i18nKeyForDiagramEditorUtil()+".OpenModelResourceErrorDialog"
;

String i18nKeyForCreateDiagramProgressTask(gmfgen::GenDiagram diagram) :
    diagram.i18nKeyForDiagramEditorUtil()+".CreateDiagramProgressTask"
;


String i18nKeyForCreateDiagramDefaultFileNameLabel(gmfgen::GenDiagram diagram) :
    diagram.i18nKeyForDiagramEditorUtil()+".CreateDiagramDefaultFileNameLabel"
;


String i18nKeyForCreateDiagramCommandLabel(gmfgen::GenDiagram diagram) :
    diagram.i18nKeyForDiagramEditorUtil()+".CreateDiagramCommandLabel"
;

private String i18nKeyForInitDiagramFileAction(gmfgen::GenDiagram diagram) :
	diagram.initDiagramFileActionClassName
;

String i18nKeyForInitDiagramFileResourceErrorDialog(gmfgen::GenDiagram diagram) :
    diagram.i18nKeyForInitDiagramFileAction()+".InitDiagramFileResourceErrorDialog"
;

String i18nKeyForInitDiagramFileWizardTitle(gmfgen::GenDiagram diagram) :
    diagram.i18nKeyForInitDiagramFileAction()+".InitDiagramFileWizardTitle"
;

String i18nKeyForInitDiagramOpenFileDialogTitle(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForInitDiagramFileAction()+".OpenModelFileDialogTitle"
;

private String i18nKeyForNewDiagramFileWizard(gmfgen::GenDiagram diagram) :
	diagram.newDiagramFileWizardClassName
;

String i18nKeyForNewDiagramFileWizardCreationPage(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForNewDiagramFileWizard()+".CreationPage"
;

String i18nKeyForNewDiagramFileWizardRootSelectionPage(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForNewDiagramFileWizard()+".RootSelectionPage"
;

String i18nKeyForNewDiagramFileWizardRootSelectionPageSelectionTitle(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForNewDiagramFileWizardRootSelectionPage()+"SelectionTitle"
;

String i18nKeyForNewDiagramFileWizardRootSelectionPageNoSelectionMessage(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForNewDiagramFileWizardRootSelectionPage()+"NoSelectionMessage"
;

String i18nKeyForNewDiagramFileWizardRootSelectionPageInvalidSelectionMessage(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForNewDiagramFileWizardRootSelectionPage()+"InvalidSelectionMessage"
;

String i18nKeyForNewDiagramFileWizardInitDiagramCommand(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForNewDiagramFileWizard()+".InitDiagramCommand"
;

String i18nKeyForNewDiagramFileWizardIncorrectRootError(gmfgen::GenDiagram diagram) :
	diagram.i18nKeyForNewDiagramFileWizard()+".IncorrectRootError"
;

String i18nKeyForSavingDeletedFile(gmfgen::GenEditorView editor) :
	i18nKeyForEditor(editor) + ".SavingDeletedFile"
;

String i18nKeyForSaveAsProblems(gmfgen::GenEditorView editor) :
	i18nKeyForEditor(editor) + ".SaveAsError"
;

String i18nKeyForSaveProblems(gmfgen::GenEditorView editor) :
	i18nKeyForEditor(editor) + ".SaveError"
;

String i18nKeyForDeletedFile(gmfgen::GenEditorView editor) :
	i18nKeyForEditor(editor) + ".deletedFile"
;

String i18nKeyForProblemLoadingFile(gmfgen::GenEditorView editor) :
	i18nKeyForEditor(editor) + ".problemLoadingFile"
;

private String i18nKeyForEditor(gmfgen::GenEditorView editor) :
	editor.className
;

String i18nKeyForSelectModelElement(gmfgen::GenDiagram diagram) :
	i18nKeyForElementChooser(diagram) + ".SelectModelElement"
;

private String i18nKeyForElementChooser(gmfgen::GenDiagram diagram) :
	diagram.elementChooserClassName
;

String i18nKeyForOpenModel(gmfgen::GenDiagram diagram) :
	i18nKeyForCreateShortcutAction(diagram) + ".OpenModel"
;

String i18nKeyForCreateShortcus(gmfgen::GenDiagram diagram) :
	i18nKeyForCreateShortcutAction(diagram) + ".CreateShortcut"
;

private String i18nKeyForCreateShortcutAction(gmfgen::GenDiagram diagram) :
	diagram.createShortcutActionClassName
;

String i18nKeyForShortcutWizardReferencedElementPage(gmfgen::GenDiagram diagram) :
	diagram.defaultShortcutCreationWizardClassName()+".ReferencedElementSelectionPage"
;

String i18nKeyForModelElementSelectionPage(gmfgen::GenDiagram diagram) :
	diagram.defaultModelElementSelectionPageClassName()
;

String i18nKeyForValidateAction(gmfgen::GenDiagram diagram) :
	diagram.defaultValidateActionClassName()
;

String i18nKeyForShortcutWizardReferencedElementPageEmptyError(gmfgen::GenDiagram diagram) :
diagram.i18nKeyForShortcutWizardReferencedElementPage()+"EmptyError"
;

String i18nKeyForShortcutWizardReferencedElementPageInvalidError(gmfgen::GenDiagram diagram) :
diagram.i18nKeyForShortcutWizardReferencedElementPage()+"InvalidError"
;

String i18nKeyForCreationWizard(gmfgen::GenDiagram diagram) :
diagram.creationWizardClassName
;

String i18nKeyForCreationWizardDiagramPage(gmfgen::GenDiagram diagram) :
diagram.creationWizardClassName+".DiagramModelFilePage"
;

String i18nKeyForCreationWizardDomainPage(gmfgen::GenDiagram diagram) :
diagram.creationWizardClassName+".DomainModelFilePage"
;

String i18nKeyForCreationWizardOpenEditorError(gmfgen::GenDiagram diagram) :
diagram.creationWizardClassName+"OpenEditorError"
;

String i18nKeyForCreationWizardCreationError(gmfgen::GenDiagram diagram) :
diagram.creationWizardClassName+"CreationError"
;

String i18nKeyForCreationWizardPageNotSpecialFolderWarning(gmfgen::GenDiagram diagram) :
diagram.creationWizardPageClassName+".NotSpecialFolder"
;

String titleKey(String dialogKey) :
    dialogKey+"Title"
;

String messageKey(String dialogKey) :
    dialogKey+"Message"
;

String nameKey(String dialogKey) :
    dialogKey+"Name"
;

String descriptionKey(String dialogKey) :
    dialogKey+"Description"
;
