/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.iprocess.amxbpm.converter.external;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Collection;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.MultiStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import com.tibco.xpd.analyst.resources.xpdl2.Xpdl2ResourcesConsts;
import com.tibco.xpd.daa.internal.util.DAANamingUtils;
import com.tibco.xpd.iprocess.amxbpm.converter.IProcessAMXBPMConverterPlugin;
import com.tibco.xpd.iprocess.amxbpm.converter.internal.Messages;
import com.tibco.xpd.xpdl2.DocumentRoot;
import com.tibco.xpd.xpdl2.Package;
import com.tibco.xpd.xpdl2.Xpdl2Factory;

/**
 * This Debug manager class handles the debug files output to their designated
 * location. The Debug manager provides methods to write debug files at various
 * levels of Debug Mode. If not already created , it also automatically creates
 * the designated debug Folders for specific debug level. Debug Folder structure
 * used/created - Root Debug Folder -
 * <Project>/iProcessConversionDebug/timestampOfImport
 * <ul>
 * <li>BASIC MODE
 * <ol>
 * <li>After the conversion from iProcess Modeler XPDL to Studio for iProcess
 * XPDL and migration to current Studio format…
 * 1_BS_iProcess_XPDL/<originalName>.xml</li>
 * 
 * <li>After the generic conversions and optional move of processes to separate
 * process packages… o 2_BS_AMX_BPM_XPDL/<processName>.xml</li>
 * 
 * <li>After the execution of customer conversion-extensions….
 * 3_BS_CUST_EXT_XPDL/<processName>.xml</li>
 * </ol>
 * </li
 * <li>ENHANCED MODE
 * <ol>
 * <li>If debug is configured as Enhanced then there will be a set of additional
 * sub-folders containing copies of the XPDL file(s) after each executed
 * conversion-extension… o
 * 3_BS_CUST_EXT_XPDL/1<conversionExtensionId>/<ProcessName>.xml</li>
 * </ol>
 * </li>
 * </ul>
 * 
 * @author aprasad
 * @since 10-Apr-2014
 */
public class DebugResourcesManager {

    /**
     * Debug mode as set in the preference.
     */
    private DEBUG_MODE mode;

    // We do not externalize the resources names

    public static final String ROOT_DEBUG_FOLDER = "iProcessConversionDebug"; //$NON-NLS-1$

    /**
     * Debug folder name , for content converted to Studio IProcess.
     */
    public static final String STUDIO_IPROCESS_DEBUG_FOLDER =
            "1_BS_iProcess_XPDL"; //$NON-NLS-1$

    /**
     * Debug folder name , for content post all generic conversion and
     * separation of processes into respective packages.
     */
    public static final String SEPARATE_PROCESSES_DEBUG_FOLDER =
            "2_BS_AMX_BPM_XPDL"; //$NON-NLS-1$

    /**
     * Debug folder name , for content after all custom conversions
     */

    public static final String CUSTOM_CONVERSION_DEBUG_FOLDER =
            "3_BS_CUST_EXT_XPDL"; //$NON-NLS-1$

    public static final String DEBUG_FILE_EXTENSION = "xml"; //$NON-NLS-1$

    /**
     * Target Folder's container project.
     */
    private IProject project;

    /**
     * Debug Folder, the timestamp folder under the root Debug Folder
     */
    private IFolder debugTimeStampRootFolder;

    /**
     * @param debugPreference
     * 
     */
    public DebugResourcesManager(IProject project, DEBUG_MODE debugPreference) {

        if (debugPreference == null) {
            debugPreference = DEBUG_MODE.NONE;
        }
        mode = debugPreference;

        this.project = project;

        // create root Debug Folder
        IPath rootDebugFolderPath = new Path(ROOT_DEBUG_FOLDER);
        // XPD-6166: create a timestamp folder for the current Import Debug
        // session.
        String timestamp = DAANamingUtils.getAutogeneratedQualifier();
        rootDebugFolderPath = rootDebugFolderPath.append(timestamp);

        try {

            debugTimeStampRootFolder = getOrCreateFolder(rootDebugFolderPath);

        } catch (CoreException e) {
            IProcessAMXBPMConverterPlugin.getDefault().getLogger()
                    .log(e.getStatus());
        }
    }

    /**
     * Writes the debug file fir the given xpdlFile to the target debug folder.
     * 
     * @param xpdlFile
     *            file for which debug resource will be written.
     * @param targetFolder
     *            debug folder under which the debug file is written.
     * 
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    private IStatus writeDebugFile(IFile xpdlFile, IFolder targetFolder) {

        FileInputStream inputStream = null;
        ByteArrayOutputStream outputStream = null;
        ByteArrayInputStream byteInputStream = null;

        final IFile outputFile =
                targetFolder.getFile(new Path(getDebugFileName(xpdlFile)));

        try {
            // prepare input stream
            File iFile = new File(xpdlFile.getLocationURI());
            inputStream = new FileInputStream(iFile);

            // prepare output stream
            outputStream = new ByteArrayOutputStream();
            ByteArrayInputStream resultInStream = null;

            // read bytes from input stream
            int byteLength = inputStream.available();
            byte[] b = new byte[byteLength];
            inputStream.read(b);

            // result stream to be written to the output stream
            resultInStream = new ByteArrayInputStream(b);

            // write/create output stream.
            if (!outputFile.exists()) {
                outputFile.create(resultInStream,
                        IResource.FORCE,
                        new NullProgressMonitor());
            } else {
                outputFile.setContents(resultInStream,
                        IResource.FORCE,
                        new NullProgressMonitor());
            }

            /*
             * Sid : Streams are already closed below so don't close them twice
             * :o) (finally clause will be exec'd even if do return from
             * exception also)
             */

        } catch (FileNotFoundException e) {
            String msg =
                    String.format(Messages.DebugResourcesManager_ErrorCreatingDebugFile,
                            outputFile.getLocation().toOSString());
            return new Status(IStatus.ERROR,
                    IProcessAMXBPMConverterPlugin.PLUGIN_ID, msg, e);

        } catch (IOException e) {
            String msg =
                    String.format(Messages.DebugResourcesManager_ErrorCreatingDebugFile,
                            outputFile.getLocation().toOSString());
            return new Status(IStatus.ERROR,
                    IProcessAMXBPMConverterPlugin.PLUGIN_ID, msg, e);

        } catch (CoreException e) {
            String msg =
                    String.format(Messages.DebugResourcesManager_ErrorCreatingDebugFile,
                            outputFile.getLocation().toOSString());
            return new Status(IStatus.ERROR,
                    IProcessAMXBPMConverterPlugin.PLUGIN_ID, msg, e);

        } finally {
            // Close all streams
            try {
                if (inputStream != null) {
                    inputStream.close();
                }

                if (outputStream != null) {
                    outputStream.close();
                }

                if (byteInputStream != null) {
                    byteInputStream.close();
                }
            } catch (IOException ioe) {
                ; // Do nothing as closing streams
            }

        }

        return Status.OK_STATUS;
    }

    /**
     * Returns the Debug filename for the given xpdlFile, which is
     * 'xpdlFilename.xml'.
     * 
     * @param xpdlFile
     * @return debug file name for the given xpdlFile as xpdlFilename.xml.
     */
    private String getDebugFileName(IFile xpdlFile) {
        String inputFileName = xpdlFile.getName();
        int ext =
                inputFileName
                        .lastIndexOf(Xpdl2ResourcesConsts.DEFAULT_PACKAGE_FILENAME_EXT) + 1;

        StringBuffer outputFileName =
                new StringBuffer(inputFileName.substring(0, ext));

        outputFileName.append(DEBUG_FILE_EXTENSION);

        return outputFileName.toString();
    }

    /**
     * Saves the XPDL {@link Package}s to their respective debug files under the
     * given Debug Folder.This method creates the debug folder if it does not
     * already exists.
     * 
     * @param xpdlPackages
     *            process packages or which debug files should be written.
     * @param debugFolder
     *            target debug folder to which the debug resources/files should
     *            be written.
     * 
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    private IStatus writeDebugFilesForPackages(
            Collection<Package> xpdlPackages, IFolder debugFolder) {

        MultiStatus status =
                new MultiStatus(IProcessAMXBPMConverterPlugin.PLUGIN_ID, 0,
                        "", null); //$NON-NLS-1$

        for (Package xpdlPack : xpdlPackages) {
            status.add(writeDebugFileForPackage(xpdlPack, debugFolder));

        }

        return status;
    }

    /**
     * Saves the XPDL {@link Package} to its respective debug file under the
     * given Debug Folder.This method creates the debug folder if it does not
     * already exists.
     * 
     * @param xpdlPackage
     *            process package or which debug file should be written.
     * @param debugFolder
     *            target debug folder to which the debug resources/files should
     *            be written.
     * 
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    private IStatus writeDebugFileForPackage(Package xpdlPackage,
            IFolder debugFolder) {

        // prepare Debug file name
        String debugFileName =
                xpdlPackage.getName() + '.' + DEBUG_FILE_EXTENSION;

        // temp IFile resource to prepare xpdlPackage for save.
        // Note: As this xpdlpackage is not attached to any resource and the
        // final debug file is .xml file, need to prepare it as .xpdl resource ,
        // so that it is initialised with correct XML attributes required for an
        // XDPL resource, example Default Save Options etc.The it will be copied
        // to the final debug xml stream.
        // if not done so, the Resource below is created as XMIResourceImpl
        // instead of XPDLResourceImpl , which does not save the debug resource
        // properly.

        IFile tempXPDLRes =
                debugFolder.getFile(xpdlPackage.getName() + '.'
                        + Xpdl2ResourcesConsts.DEFAULT_PACKAGE_FILENAME_EXT);

        // final debug file to be written
        IFile debugFile = debugFolder.getFile(debugFileName);

        ByteArrayOutputStream bOS = null;
        ByteArrayInputStream bInpStream = null;

        try {
            // prepare the package as input to be written to the debug file
            URI uri = URI.createURI(tempXPDLRes.getFullPath().toOSString());

            ResourceSet rset = new ResourceSetImpl();

            Resource resource = rset.createResource(uri);

            DocumentRoot docRoot = Xpdl2Factory.eINSTANCE.createDocumentRoot();

            docRoot.setPackage(xpdlPackage);

            resource.getContents().add(docRoot);
            // prepare output stream
            bOS = new ByteArrayOutputStream();
            // save input data to output stream
            resource.save(bOS, null);
            bInpStream = new ByteArrayInputStream(bOS.toByteArray());

            // write/create debug resource
            if (!debugFile.exists()) {
                debugFile.create(bInpStream,
                        IResource.FORCE,
                        new NullProgressMonitor());
            } else {
                debugFile.setContents(new ByteArrayInputStream(bOS
                        .toByteArray()),
                        IResource.FORCE,
                        new NullProgressMonitor());
            }

        } catch (IOException e) {

            String msg =
                    String.format(Messages.DebugResourcesManager_ErrorCreatingDebugFile,
                            debugFile.getLocation().toOSString());
            return new Status(IStatus.ERROR,
                    IProcessAMXBPMConverterPlugin.PLUGIN_ID, msg, e);

        } catch (CoreException e) {

            String msg =
                    String.format(Messages.DebugResourcesManager_ErrorCreatingDebugFile,
                            debugFile.getLocation().toOSString());
            return new Status(IStatus.ERROR,
                    IProcessAMXBPMConverterPlugin.PLUGIN_ID, msg, e);

        } finally {
            try {

                if (bOS != null) {
                    bOS.close();
                }

                if (bInpStream != null) {
                    bInpStream.close();
                }

            } catch (IOException e) {
                // Don't do anything
            }
        }

        return Status.OK_STATUS;
    }

    /**
     * Method to be used to write Debug files post All Custom Conversions and
     * separation of packages.
     * 
     * @param processPackages
     *            process packages for which debug files should be written.
     * 
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    public IStatus writeDebugFilesForAllCustomConversions(
            Collection<Package> processPackages) {

        // Let the Manager check if the Debug file is required to be written
        if (DEBUG_MODE.BASIC == mode || DEBUG_MODE.ENHANCED == mode) {

            if (processPackages != null && !processPackages.isEmpty()) {

                // create debug sub folder path
                // XPD-6166: Use timestamp folder for debug resources
                IPath path;
                if (debugTimeStampRootFolder != null) {

                    path = debugTimeStampRootFolder.getProjectRelativePath();
                } else {

                    path = new Path(ROOT_DEBUG_FOLDER);
                }
                path = path.append(CUSTOM_CONVERSION_DEBUG_FOLDER);

                // write debug files
                return writePackageToDebugLocation(processPackages, path);
            }
        }

        return Status.OK_STATUS;
    }

    /**
     * Method to be used to write Debug files for given custom conversion.Saves
     * debug file under the debug folder specific to the custom conversion,
     * named after the custom conversion id.
     * 
     * @param processPackages
     *            , process packages for which debug files should be written.
     * @param customConversionID
     *            , custom conversion for which the debug files are written,
     *            customConversionId is used as the debug folder name.
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    public IStatus writeDebugFilesForSpecificCustomConversion(
            Collection<Package> processPackages, String customConversionID) {

        // Let the Manager check if the Debug file is required to be written
        if (DEBUG_MODE.ENHANCED == mode) {

            if (processPackages != null && !processPackages.isEmpty()) {

                // create debug sub folder path
                // XPD-6166: Use timestamp folder for debug resources
                IPath path;
                if (debugTimeStampRootFolder != null) {

                    path = debugTimeStampRootFolder.getProjectRelativePath();
                } else {

                    path = new Path(ROOT_DEBUG_FOLDER);
                }
                path = path.append(CUSTOM_CONVERSION_DEBUG_FOLDER);
                path = path.append(customConversionID);
                // write custom conversion specific debug files
                return writePackageToDebugLocation(processPackages, path);

            }
        }

        return Status.OK_STATUS;
    }

    /**
     * Method to be used to write debug files for IPM xpdls converted to IPS
     * xpdls.
     * 
     * @param xpdlFiles
     *            converted IPS xpdl files.
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    public IStatus writeDebugFileforIPMToIPSConversion(
            Collection<IFile> xpdlFiles) {

        // Let the Manager check if the Debug file is required to be written
        if (DEBUG_MODE.BASIC == mode || DEBUG_MODE.ENHANCED == mode) {

            if (xpdlFiles != null && !xpdlFiles.isEmpty()) {

                // create the subFolder STUDIO_IPROCESS_DEBUG_FOLDER under
                // target folder if not already exists,

                // create debug sub folder path
                // XPD-6166: Use timestamp folder for debug resources
                IPath path;
                if (debugTimeStampRootFolder != null) {

                    path = debugTimeStampRootFolder.getProjectRelativePath();

                } else {

                    path = new Path(ROOT_DEBUG_FOLDER);
                }
                path = path.append(STUDIO_IPROCESS_DEBUG_FOLDER);

                IFolder debugFolder = null;
                // get or create the debug sub folder
                try {

                    debugFolder = getOrCreateFolder(path);

                } catch (CoreException e) {
                    String msg =
                            String.format(Messages.DebugResourcesManager_ErrorCreatingDebugFolderMsg,
                                    path.toOSString());

                    return new Status(IStatus.ERROR,
                            IProcessAMXBPMConverterPlugin.PLUGIN_ID, msg, e);
                }

                if (debugFolder != null && debugFolder.exists()) {
                    MultiStatus status =
                            new MultiStatus(
                                    IProcessAMXBPMConverterPlugin.PLUGIN_ID, 0,
                                    "", null); //$NON-NLS-1$

                    for (IFile iFile : xpdlFiles) {
                        status.add(writeDebugFile(iFile, debugFolder));
                    }

                    return status;
                }

            }
        }

        return Status.OK_STATUS;

    }

    /**
     * Method to be used to write Debug files for post separation of process
     * packages.
     * 
     * @param processPackages
     *            , process packages to be written to the debug files.
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    public IStatus writeDebugFilesForSeparatedProcesses(
            Collection<Package> processPackages) {

        // Let the Manager check if the Debug file is required to be written
        if (DEBUG_MODE.BASIC == mode || DEBUG_MODE.ENHANCED == mode) {

            if (processPackages != null && !processPackages.isEmpty()) {

                // create the subFolder STUDIO_IPROCESS_DEBUG_FOLDER under
                // target folder if not already exists,

                // create debug sub folder path
                // XPD-6166: Use timestamp folder for debug resources
                IPath path;
                if (debugTimeStampRootFolder != null) {

                    path = debugTimeStampRootFolder.getProjectRelativePath();
                } else {
                    path = new Path(ROOT_DEBUG_FOLDER);
                }
                path = path.append(SEPARATE_PROCESSES_DEBUG_FOLDER);

                return writePackageToDebugLocation(processPackages, path);

            }
        }

        return Status.OK_STATUS;
    }

    /**
     * Creates the debug folder if does not already exist and saves the process
     * packages debug files under the debug folder.
     * 
     * @param processPackages
     *            process packages to be written to the debug files.
     * @param debugFolderPath
     *            debug folder path, folder will be created if does not already
     *            exist.
     * 
     * @return {@link IStatus} representing any Exceptions encountered while
     *         writing debug resource.
     */
    private IStatus writePackageToDebugLocation(
            Collection<Package> processPackages, IPath debugFolderPath) {
        IFolder debugFolder = null;
        // get or create the debug sub folder
        try {

            debugFolder = getOrCreateFolder(debugFolderPath);

        } catch (CoreException e) {

            String msg =
                    String.format(Messages.DebugResourcesManager_ErrorCreatingDebugFolderMsg,
                            debugFolderPath.toOSString());
            return new Status(IStatus.ERROR,
                    IProcessAMXBPMConverterPlugin.PLUGIN_ID, msg, e);
        }

        if (debugFolder != null && debugFolder.exists()) {
            return writeDebugFilesForPackages(processPackages, debugFolder);
        }

        return Status.OK_STATUS;
    }

    /**
     * Returns the {@link IFolder} at the given path ,creates the folder at the
     * given path if it does not already exist.
     * 
     * @param path
     *            , path of folder to be created/searched.
     * @return folder at the given path, creates one if does not already exist.
     * @throws CoreException
     */
    IFolder getOrCreateFolder(IPath path) throws CoreException {

        IFolder folder = project.getFolder(path);
        // Don't create folder for NONE Debug mode
        if (mode != DEBUG_MODE.NONE) {

            if (folder != null && !folder.exists()) {

                if (!folder.getParent().exists()) {

                    getOrCreateFolder(folder.getParent()
                            .getProjectRelativePath());
                }
                folder.create(false, true, null);
            }

        }
        return folder;
    }

    /**
     * Debug Mode Enumeration , represents various debug levels.This enum should
     * be used to Read and Wirte the Debug preference.
     * 
     * @author aprasad
     * @since 22-Apr-2014
     */
    public enum DEBUG_MODE {
        NONE, BASIC, ENHANCED
    }

}
