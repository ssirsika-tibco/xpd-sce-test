/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.iprocess.amxbpm.converter.contributions;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

import com.tibco.xpd.customer.api.iprocess.amxbpm.conversion.AbstractIProcessToBPMContribution;
import com.tibco.xpd.xpdExtension.ProcessInterface;
import com.tibco.xpd.xpdl2.DataField;
import com.tibco.xpd.xpdl2.FormalParameter;
import com.tibco.xpd.xpdl2.Process;
import com.tibco.xpd.xpdl2.ProcessRelevantData;

/**
 * SW_ fields fall into categories:
 * <p>
 * • Read only system values
 * <p>
 * • System standard
 * <p>
 * Writeable process-instance fields (sometimes declared explicitly in process
 * sometimes implicitly available). The current iProcess to Studio iProcess
 * conversion generates data fields to represent each of these system fields so
 * that they can be used in scripting. The iProcess to AMX BPM migration
 * conversion will remove (or not create in the first place) these SW_ fields as
 * it will be better that the user knows when unavailable system values are
 * being used in the process.
 * <p>
 * This is also true of the IDX_ARRAY array field implicit element index system
 * fields. Where there is a directly equivalent value / script method available
 * in AMX BPM, this value will be used during iProcess to JavaScript conversion.
 * Therefore any use of iProcess system values without direct AMX BPM
 * equivalents will be highlighted via problem markers and will require human
 * intervention.
 * <p>
 * During iProcess to AMX BPM conversion:
 * <p>
 * • SW_ and IDX_ system fields will be removed (from Studio iProcess XPDL
 * generated by initial import).
 * 
 * 
 * @author sajain
 * @since Jun 12, 2014
 */
public class SW_AndIDX_ProcessDataContribution extends
        AbstractIProcessToBPMContribution {

    /**
     * SW_ field text.
     */
    private final String SW_ = "SW_"; //$NON-NLS-1$

    /**
     * IDX_ field text.
     */
    private static final String IDX_ = "IDX_"; //$NON-NLS-1$

    /**
     * @see com.tibco.xpd.customer.api.iprocess.amxbpm.conversion.AbstractIProcessToBPMContribution#convert(java.util.List,
     *      java.util.List, org.eclipse.core.runtime.IProgressMonitor)
     * 
     * @param processes
     * @param processInterfaces
     * @param monitor
     * @return
     */
    @Override
    public IStatus convert(List<Process> processes,
            List<ProcessInterface> processInterfaces, IProgressMonitor monitor) {

        try {
            monitor.beginTask("", processes.size()); //$NON-NLS-1$

            for (Process eachProcess : processes) {

                /*
                 * Remove SW_ and IDX_ fields which we don't support in AMX BPM.
                 */
                removeUnsupportedSWAndIDXData(eachProcess);

                monitor.worked(1);
            }

            return Status.OK_STATUS;

        } finally {
            monitor.done();
        }
    }

    /**
     * Remove SW_ and IDX_ fields/parameters which we don't support in AMX BPM.
     * 
     * @param eachProcess
     *            Current process.
     */
    private void removeUnsupportedSWAndIDXData(Process eachProcess) {

        /*
         * Get all process relevant data from the process currently being
         * processed.
         */
        List<ProcessRelevantData> allProcessRelData =
                new ArrayList<ProcessRelevantData>();

        /*
         * Add all data fields.
         */
        allProcessRelData.addAll(eachProcess.getDataFields());

        /*
         * Add all formal parameters.
         */
        allProcessRelData.addAll(eachProcess.getFormalParameters());

        /*
         * Look through all process relevant data.
         */
        for (ProcessRelevantData eachProcessRelData : allProcessRelData) {

            /*
             * Remove the field/parameter if it is either SW data OR and IDX
             * data.
             */
            if (isSWDataField(eachProcessRelData)) {

                /*
                 * It is SW data, so remove it.
                 */
                removeProcessRelevantData(eachProcessRelData, eachProcess);

            } else if (isIDXDataField(eachProcessRelData, allProcessRelData)) {

                /*
                 * It is IDX data, so remove it.
                 */
                removeProcessRelevantData(eachProcessRelData, eachProcess);

            }
        }
    }

    /**
     * Remove the specified process relevant data from its containing process.
     * 
     * @param procRelData
     *            Process relevant data to be deleted.
     * @param proc
     *            Containing process.
     */
    private void removeProcessRelevantData(ProcessRelevantData procRelData,
            Process proc) {
        if (procRelData instanceof DataField) {
            proc.getDataFields().remove(procRelData);
        } else if (procRelData instanceof FormalParameter) {
            proc.getFormalParameters().remove(procRelData);
        }
    }

    /**
     * Return <code>true</code> if the name of the specified field/parameter
     * starts with "SW_", <code>false</code> otherwise.
     * 
     * @param eachProcessRelData
     *            Field/parameter currently being processed.
     * 
     * @return <code>true</code> if the name of the specified field/parameter
     *         starts with "SW_", <code>false</code> otherwise.
     */
    private boolean isSWDataField(ProcessRelevantData eachProcessRelData) {

        if (null != eachProcessRelData.getName()) {

            return eachProcessRelData.getName().startsWith(SW_);
        }

        return false;
    }

    /**
     * Return <code>true</code> if the name of the specified field/parameter
     * starts with "IDX_", <code>false</code>> otherwise.
     * 
     * @param eachProcessRelData
     *            Field/parameter currently being processed
     * 
     * @return <code>true</code> if the name of the specified field/parameter
     *         starts with "IDX_", <code>false</code> otherwise.
     */
    private boolean isIDXDataField(ProcessRelevantData eachProcessRelData,
            List<ProcessRelevantData> allProcessRelData) {

        String dataName = eachProcessRelData.getName();

        if (null != dataName) {

            /*
             * Check if the field/parameter name starts with "IDX_".
             */
            if (dataName.startsWith(IDX_)) {

                /*
                 * If it does, then check if it ends with an 'array'
                 * field/parameter name.
                 */
                return dataNameEndsWithArrayFieldName(dataName,
                        allProcessRelData);

            }
        }

        return false;
    }

    /**
     * Return <code>true</code> if the specified field/parameter name ends with
     * an array field/parameter name, returns <code>false</code> otherwise.
     * 
     * @param dataName
     *            Name of the field/parameter currently being processed.
     * @param allProcessRelData
     *            List of all the process relevant data.
     * 
     * @return <code>true</code> if the specified field/parameter name ends with
     *         an array field/parameter name, returns <code>false</code>
     *         otherwise.
     */
    private boolean dataNameEndsWithArrayFieldName(String dataName,
            List<ProcessRelevantData> allProcessRelData) {

        /*
         * Go through all the data fields.
         */
        for (ProcessRelevantData eachProcessRelData : allProcessRelData) {

            /*
             * Check if this field is an array.
             */
            if (eachProcessRelData.isIsArray()) {

                /*
                 * If it is an array, then check if the name of the field
                 * currently being processed ends with that array field name.
                 */
                if (dataName.endsWith(eachProcessRelData.getName())) {

                    /*
                     * Return 'true' if it does.
                     */
                    return true;
                }
            }
        }

        /*
         * The field name doesn't end with any array field name, so return
         * 'false'.
         */
        return false;
    }
}
