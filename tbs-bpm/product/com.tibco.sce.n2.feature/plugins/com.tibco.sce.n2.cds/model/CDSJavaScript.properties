#List class
_label_CDSJavaScript__List =JavaScript List Object\n\nList Object:\n\nAn ordered collection (also known as a sequence).\n\nSyntax:\n\nvar aList = new List();
_label_CDSJavaScript__List__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method appends the specified element\n to the end of this list.\n\nSyntax:\n\aList.add(E element)\n@return boolean - True if this collection changed as a result of the call\n@param element: Required. Element to be appended to\n this list\n\nSyntax:\n\aList.add(index, element)\n@return void\n@param index: Optional. Index at which the specified element is to be inserted.\n@param element: Required. Element to be appended to\n this list
_label_CDSJavaScript__List__addAll =JavaScript addAll() Method\n\nDefinition and Usage:\n\nThe addAll() method appends all of the elements\n in the specified collection to the end of this\n list, in the order that they are returned by the specified\n collection's iterator (optional operation).\n\nSyntax:\n\aList.addAll(aList)\n@return Boolean\n@param aList: Required. List whose elements are\n to be added to this list
_label_CDSJavaScript__List__clear =JavaScript clear() Method\n\nDefinition and Usage:\n\nThe clear() method removes all of the elements\n from this list.\n\nSyntax:\n\aList.clear()
_label_CDSJavaScript__List__contains =JavaScript contains() Method\n\nDefinition and Usage:\n\nThe contains() method returns true if this list\n contains the specified element.\n\nSyntax:\n\aList.contains(Object o)\n@return Boolean\n@param o: Required. Element whose presence\n in this list is to be tested
_label_CDSJavaScript__List__get =JavaScript get() Method\n\nDefinition and Usage:\n\nThe get() method returns the element at\n the specified position in this list.\n\nSyntax:\n\aList.get(int index)\n@return E\n@param index: Required. Index of element to return
_label_CDSJavaScript__List__isEmpty =JavaScript isEmpty() Method\n\nDefinition and Usage:\n\nThe isEmpty() method returns true if this list\n contains no elements.\n\nSyntax:\n\aList.isEmpty()\n@return Boolean
_label_CDSJavaScript__List__listIterator =JavaScript listIterator() Method\n\nDefinition and Usage:\n\nThe listIterator() method returns a list iterator\n of the elements in this list (in proper sequence).\n\nSyntax:\n\aList.listIterator()\n@return ListIterator<E>
_label_CDSJavaScript__List__set =JavaScript set() Method\n\nDefinition and Usage:\n\nThe set() method replaces the element at\n the specified position in this list\n with the specified element.\n\nSyntax:\n\aList.set(int index, E element)\n@return E\n@param index: Required. Index of element to replace.\n@param element: Required. Element to be stored\n at the specified position
_label_CDSJavaScript__List__remove__E__Integer =JavaScript remove() Method\n\nDefinition and Usage:\n\nThe remove(index) method removes the element at the specified\nposition in this list.\n\nSyntax:\n\aList.remove(int index)\n@return E\n@param index: Required. Index of element to remove.
_label_CDSJavaScript__List__remove__Boolean__E =JavaScript remove() Method\n\nDefinition and Usage:\n\nThe remove(element) method removes the first occurrence in this list\n of the specified element.\n\nSyntax:\n\aList.remove(Object element)\n@return boolean\n@param object: Required. The element to remove.
_label_CDSJavaScript__List__set =JavaScript set() Method\n\nDefinition and Usage:\n\nThe set() method replaces the element at\n the specified position in this list\n with the specified element.\n\nSyntax:\n\aList.set(int index, E element)\n@return E\n@param index: Required. Index of element to replace.\n@param element: Required. Element to be stored\n at the specified position
_label_CDSJavaScript__List__size =JavaScript size() Method\n\nDefinition and Usage:\n\nThe size() method returns the number of elements\n in this list.\n\nSyntax:\n\aList.size()\n@return Integer
_label_CDSJavaScript__List__subList =JavaScript subList() Method\n\nDefinition and Usage:\n\nThe subList() method returns a view of the\n portion of this list between the specified\n fromIndex, inclusive, and toIndex, exclusive.\n\nSyntax:\n\aList.subList(int fromIndex, int toIndex) \n@return List\n@param fromIndex: Required. Low endpoint\n (inclusive) of the subList\n@param toIndex: Required. High endpoint\n (exclusive) of the subList

#ListIterator class
_label_CDSJavaScript__ListIterator =JavaScript ListIterator Object\n\nListIterator Object:\n\nAn iterator for lists that allows\n to traverse the list in either direction,\n modify the list during iteration,\n and obtain the iterator's current position\n in the list.
_label_CDSJavaScript__ListIterator__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method inserts the specified element\n into the list.\n\nSyntax:\n\aListIterator.add(E element)\n@param element: Required. Element to insert
_label_CDSJavaScript__ListIterator__hasNext =JavaScript hasNext() Method\n\nDefinition and Usage:\n\nThe hasNext() method returns true if this\n list iterator has more elements when traversing\n the list in the forward direction.\n\nSyntax:\n\aListIterator.hasNext()\n@return Boolean
_label_CDSJavaScript__ListIterator__hasPrevious =JavaScript hasPrevious() Method\n\nDefinition and Usage:\n\nThe hasPrevious() method returns true if this\n list iterator has more elements when traversing\n the list in the reverse direction.\n\nSyntax:\n\aListIterator.hasPrevious()\n@return Boolean
_label_CDSJavaScript__ListIterator__next =JavaScript next() Method\n\nDefinition and Usage:\n\nThe next() method returns the next element\n in the list.\n\nSyntax:\n\aListIterator.next()\n@return E
_label_CDSJavaScript__ListIterator__nextIndex =JavaScript nextIndex() Method\n\nDefinition and Usage:\n\nThe nextIndex() method returns the index of the\n element that would be returned by a subsequent\n call to next.\n\nSyntax:\n\aListIterator.nextIndex()\n@return Integer
_label_CDSJavaScript__ListIterator__previous =JavaScript previous() Method\n\nDefinition and Usage:\n\nThe previous() method returns the previous element\n in the list.\n\nSyntax:\n\aListIterator.previous()\n@return E
_label_CDSJavaScript__ListIterator__previousIndex =JavaScript previousIndex() Method\n\nDefinition and Usage:\n\nThe previousIndex() method returns the index of the\n element that would be returned by a subsequent\n call to previous.\n\nSyntax:\n\aListIterator.previousIndex()\n@return Integer
_label_CDSJavaScript__ListIterator__remove =JavaScript remove() Method\n\nDefinition and Usage:\n\nThe remove() method removes from the list\n the last element that was returned by\n next or previous.\n\nSyntax:\n\aListIterator.remove()
_label_CDSJavaScript__ListIterator__set =JavaScript set() Method\n\nDefinition and Usage:\n\nThe set() method replaces the last element\n returned by next or previous with\n the specified element.\n\nSyntax:\n\aListIterator.set(E element)\n@param element: Required. The element with which\n to replace the last element returned\n by next or previous.

#XMLGregorianCalendar class
_label_CDSJavaScript__XMLGregorianCalendar =JavaScript XMLGregorianCalendar Object\n\nXMLGregorianCalendar Object:\n\nA Representation for W3C XML Schema 1.0\n date/time datatypes.
_label_CDSJavaScript__XMLGregorianCalendar__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method adds duration to this instance.\n\nSyntax:\n\calendar.add(Duration duration)\n@param duration: Required. Duration to add\n to this XMLGregorianCalendar
_label_CDSJavaScript__XMLGregorianCalendar__clear =JavaScript clear() Method\n\nDefinition and Usage:\n\nThe clear() method unsets all fields to undefined.\n\nSyntax:\n\calendar.clear()
_label_CDSJavaScript__XMLGregorianCalendar__compare =JavaScript compare() Method\n\nDefinition and Usage:\n\nThe compare() method compares two\n instances of XMLGregorianCalendar.\n\nSyntax:\n\calendar.compare(xmlGregorianCalendar)\n@return Integer\n@param xmlGregorianCalendar: Required. Instance\n of XMLGregorianCalendar to compare
_label_CDSJavaScript__XMLGregorianCalendar__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method indicates whether\n parameter obj is "equal to" this one.\n\nSyntax:\n\calendar.equals(Object obj)\n@return Boolean\n@param obj: Required. obj to compare
_label_CDSJavaScript__XMLGregorianCalendar__getDay =JavaScript getDay() Method\n\nDefinition and Usage:\n\nThe getDay() method returns day in month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getDay()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__getFractionalSecond =JavaScript getFractionalSecond() Method\n\nDefinition and Usage:\n\nThe getFractionalSecond() method returns fractional seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getFractionalSecond()\n@return BigDecimal
_label_CDSJavaScript__XMLGregorianCalendar__getHour =JavaScript getHour() Method\n\nDefinition and Usage:\n\nThe getHour() method returns hours or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getHour()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__getMillisecond =JavaScript getMillisecond() Method\n\nDefinition and Usage:\n\nThe getMillisecond() method returns milliseconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getMillisecond()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__getMinute =JavaScript getMinute() Method\n\nDefinition and Usage:\n\nThe getMinute() method returns minutes or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getMinute()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__getMonth =JavaScript getMonth() Method\n\nDefinition and Usage:\n\nThe getMonth() method returns number of month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getMonth()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__getSecond =JavaScript getSecond() Method\n\nDefinition and Usage:\n\nThe getSecond() method returns seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getSecond()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__getTimezone =JavaScript getTimezone() Method\n\nDefinition and Usage:\n\nThe getTimezone() method returns timezone offset in minutes or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\calendar.getTimezone()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__getYear =JavaScript getYear() Method\n\nDefinition and Usage:\n\nThe getYear() method returns low order\n component for XML Schema 1.0 dateTime\n datatype field for year.\n\nSyntax:\n\calendar.getYear()\n@return Integer
_label_CDSJavaScript__XMLGregorianCalendar__setDay =JavaScript setDay() Method\n\nDefinition and Usage:\n\nThe setDay() method set days in month.\n\nSyntax:\n\calendar.setDay(int day)\n@param day: Required. int day to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setFractionalSecond =JavaScript setFractionalSecond() Method\n\nDefinition and Usage:\n\nThe setFractionalSecond() method set fractional seconds.\n\nSyntax:\n\calendar.setFractionalSecond(BigDecimal fractional)\n@param fractional: Required. value.
_label_CDSJavaScript__XMLGregorianCalendar__setHour =JavaScript setHour() Method\n\nDefinition and Usage:\n\nThe setHour() method set hours.\n\nSyntax:\n\calendar.setHour(int hour)\n@param hour: Required. int hour to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setMillisecond =JavaScript setMillisecond() Method\n\nDefinition and Usage:\n\nThe setMillisecond() method set milliseconds.\n\nSyntax:\n\calendar.setMillisecond(int millisecond)\n@param millisecond: Required. int millisecond to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setMinute =JavaScript setMinute() Method\n\nDefinition and Usage:\n\nThe setMinute() method set minute.\n\nSyntax:\n\calendar.setMinute(int minute)\n@param minute: Required. int minute to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setMonth =JavaScript setMonth() Method\n\nDefinition and Usage:\n\nThe setMonth() method set minute.\n\nSyntax:\n\calendar.setMonth(int month)\n@param month: Required. int month to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setSecond =JavaScript setSecond() Method\n\nDefinition and Usage:\n\nThe setSecond() method set second.\n\nSyntax:\n\calendar.setSecond(int second)\n@param second: Required. int second to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setTime =JavaScript setTime() Method\n\nDefinition and Usage:\n\nThe setTime() method set time.\n\nSyntax:\n\calendar.setTime(int hour, int minute, int second, int millisecond/fractional)\n@param hour: Required. Hour to be set.\n@param minute: Required. Minute to be set.\n@param second: Required. Second to be set.\n@param millisecond/fractional: Optional.\n Millisecond/ Fractional to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setTimezone =JavaScript setTimezone() Method\n\nDefinition and Usage:\n\nThe setTimezone() method set timezone.\n\nSyntax:\n\calendar.setTimezone(int offset)\n@param offset: Required. Offset to be set.
_label_CDSJavaScript__XMLGregorianCalendar__setYear =JavaScript setYear() Method\n\nDefinition and Usage:\n\nThe setYear() method set year.\n\nSyntax:\n\calendar.setYear(BigInteger year)\n@param year: Required. Year to be set.
_label_CDSJavaScript__XMLGregorianCalendar__toXMLFormat =JavaScript toXMLFormat() Method\n\nDefinition and Usage:\n\nThe toXMLFormat() method returns the lexical\n representation of this instance.\n\nSyntax:\n\calendar.toXMLFormat()\n@return String


#Duration class
_label_CDSJavaScript__Duration =JavaScript Duration Object\n\nDuration Object:\n\nA Duration object represents a period of\n Gregorian time, which consists of six fields\n (years, months, days, hours, minutes, and seconds)\n plus a sign (+/-) field.\n\nSyntax:\n\nvar aDuration = new Duration();
_label_CDSJavaScript__Duration__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method computes a new duration whose\n value is this+rhs.\n\nSyntax:\n\duration.add(Duration rhs)\n@return Duration\n@param rhs: Required. Duration to add\n to this Duration
_label_CDSJavaScript__Duration__compare =JavaScript compare() Method\n\nDefinition and Usage:\n\nThe compare() method returns the partial order relation comparison with this Duration instance.\n\nSyntax:\n\duration.compare(Duration duration)\n@return Integer\n@param duration: Required. Instance\n of Duration to compare
_label_CDSJavaScript__Duration__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method checks if this duration\n object has the same duration as another\n Duration object.\n\nSyntax:\n\duration.equals(Object duration)\n@return Boolean\n@param duration: Required. duration to compare
_label_CDSJavaScript__Duration__getDays =JavaScript getDays() Method\n\nDefinition and Usage:\n\nThe getDays() method obtains the value\n of the DAYS field as an integer\n value, or 0 if not present.\n\nSyntax:\n\duration.getDays()\n@return Integer
_label_CDSJavaScript__Duration__getHours =JavaScript getHours() Method\n\nDefinition and Usage:\n\nThe getHours() method obtains the value\n of the HOURS field as an integer\n value, or 0 if not present.\n\nSyntax:\n\duration.getHours()\n@return Integer
_label_CDSJavaScript__Duration__getMinutes =JavaScript getMinutes() Method\n\nDefinition and Usage:\n\nThe getMinutes() method obtains the value\n of the MINUTES field as an integer\n value, or 0 if not present.\n\nSyntax:\n\duration.getMinutes()\n@return Integer
_label_CDSJavaScript__Duration__getMonths =JavaScript getMonths() Method\n\nDefinition and Usage:\n\nThe getMonths() method obtains the value\n of the MONTHS field as an integer\n value, or 0 if not present.\n\nSyntax:\n\duration.getMonths()\n@return Integer
_label_CDSJavaScript__Duration__getSeconds =JavaScript getSeconds() Method\n\nDefinition and Usage:\n\nThe getSeconds() method obtains the value\n of the SECONDS field as an integer\n value, or 0 if not present.\n\nSyntax:\n\duration.getSeconds()\n@return Integer
_label_CDSJavaScript__Duration__getYears =JavaScript getYears() Method\n\nDefinition and Usage:\n\nThe getYears() method gets the years value\n of this Duration as an int or 0\n if not present.\n\nSyntax:\n\duration.getYears()\n@return Integer
_label_CDSJavaScript__Duration__isLongerThan =JavaScript isLongerThan() Method\n\nDefinition and Usage:\n\nThe isLongerThan() method checks if this duration\n object is strictly longer than another\n Duration object.\n\nSyntax:\n\duration.isLongerThan(Duration duration)\n@return Boolean\n@param duration: Required. Duration to be checked
_label_CDSJavaScript__Duration__isShorterThan =JavaScript isShorterThan() Method\n\nDefinition and Usage:\n\nThe isShorterThan() method checks if this duration\n object is strictly shorter than another\n Duration object.\n\nSyntax:\n\duration.isShorterThan(Duration duration)\n@return Boolean\n@param duration: Required. Duration to be checked
_label_CDSJavaScript__Duration__multiply =JavaScript multiply() Method\n\nDefinition and Usage:\n\nThe multiply() method computes a new\n duration whose value is factor times\n longer than the value of this duration.\n\nSyntax:\n\duration.multiply(BigDecimal factor/int factor)\n@return Duration\n@param factor: Required. Factor times longer\n of new Duration to create
_label_CDSJavaScript__Duration__subtract =JavaScript subtract() Method\n\nDefinition and Usage:\n\nThe subtract() method computes a new\n duration whose value is this-rhs.\n\nSyntax:\n\duration.subtract(Duration rhs)\n@return Duration\n@param rhs: Required. Duration to\n subtract from this Duration

#BigInteger class
_label_CDSJavaScript__BigInteger =JavaScript BigInteger Object\n\nBigInteger Object:\n\nA BigInteger object is an immutable\n arbitrary-precision integers.\n\nSyntax:\n\nvar aBigInteger = new BigInteger(1);
_label_CDSJavaScript__BigInteger__abs =JavaScript abs() Method\n\nDefinition and Usage:\n\nThe abs() method returns a BigInteger\n whose value is the absolute value\n of this BigInteger.\n\nSyntax:\n\aBigInteger.abs()\n@return BigInteger
_label_CDSJavaScript__BigInteger__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method returns a BigInteger\n whose value is (this + val).\n\nSyntax:\n\aBigInteger.add(BigInteger val)\n@return BigInteger\n@param val: Required. Value to be added\n to this BigInteger
_label_CDSJavaScript__BigInteger__compareTo =JavaScript compareTo() Method\n\nDefinition and Usage:\n\nThe compareTo() method compares\n this BigInteger with the specified BigInteger.\n\nSyntax:\n\aBigInteger.compareTo(BigInteger val/Object obj)\n@return Integer\n@param val/obj: Required. BigInteger/Object\n to which this BigInteger is to be compared
_label_CDSJavaScript__BigInteger__divide =JavaScript divide() Method\n\nDefinition and Usage:\n\nThe divide() method returns a BigInteger\n whose value is (this / val).\n\nSyntax:\n\aBigInteger.divide(BigInteger val)\n@return BigInteger\n@param val: Required. Value by which this BigInteger\n is to be divided
_label_CDSJavaScript__BigInteger__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method compares this BigInteger\n with the specified Object for equality.\n\nSyntax:\n\aBigInteger.equals(Object obj)\n@return Boolean\n@param obj: Required. Object to which this\n BigInteger is to be compared
_label_CDSJavaScript__BigInteger__gcd =JavaScript gcd() Method\n\nDefinition and Usage:\n\nThe gcd() method returns a BigInteger whose\n value is the greatest common divisor of\n abs(this) and abs(val).\n\nSyntax:\n\aBigInteger.gcd(BigInteger val)\n@return BigInteger\n@param val: Required. Value with which the GCD\n is to be computed
_label_CDSJavaScript__BigInteger__max =JavaScript max() Method\n\nDefinition and Usage:\n\nThe max() method returns the maximum\n of this BigInteger and val.\n\nSyntax:\n\aBigInteger.max(BigInteger val)\n@return BigInteger\n@param val: Required. Value with which the\n maximum is to be computed
_label_CDSJavaScript__BigInteger__min =JavaScript min() Method\n\nDefinition and Usage:\n\nThe min() method returns the minimum\n of this BigInteger and val.\n\nSyntax:\n\aBigInteger.min(BigInteger val)\n@return BigInteger\n@param val: Required. Value with which the\n minimum is to be computed
_label_CDSJavaScript__BigInteger__mod =JavaScript mod() Method\n\nDefinition and Usage:\n\nThe mod() method returns a BigInteger\n whose value is (this mod m).\n\nSyntax:\n\aBigInteger.mod(BigInteger m)\n@return BigInteger\n@param m: Required. The modulus
_label_CDSJavaScript__BigInteger__multiply =JavaScript multiply() Method\n\nDefinition and Usage:\n\nThe multiply() method returns a BigInteger\n whose value is (this * val).\n\nSyntax:\n\aBigInteger.multiply(BigInteger val)\n@return BigInteger\n@param val: Required. Value to be multiplied\n by this BigInteger
_label_CDSJavaScript__BigInteger__negate =JavaScript negate() Method\n\nDefinition and Usage:\n\nThe negate() method returns a BigInteger\n whose value is (-this).\n\nSyntax:\n\aBigInteger.negate()\n@return BigInteger
_label_CDSJavaScript__BigInteger__pow =JavaScript pow() Method\n\nDefinition and Usage:\n\nThe pow() method returns a BigInteger\n whose value is (this^exponent).\n\nSyntax:\n\aBigInteger.pow(int exponent)\n@return BigInteger\n@param exponent: Required. Exponent to which\n this BigInteger is to be raised
_label_CDSJavaScript__BigInteger__remainder =JavaScript remainder() Method\n\nDefinition and Usage:\n\nThe remainder() method returns a BigInteger\n whose value is (this % val).\n\nSyntax:\n\aBigInteger.remainder(BigInteger val)\n@return BigInteger\n@param val: Required. Value by which this BigInteger\n is to be divided, and the remainder computed
_label_CDSJavaScript__BigInteger__subtract =JavaScript subtract() Method\n\nDefinition and Usage:\n\nThe subtract() method returns a BigInteger\n whose value is (this - val).\n\nSyntax:\n\aBigInteger.substract(BigInteger val)\n@return BigInteger\n@param val: Required. Value to be subtracted\n from this BigInteger
_label_CDSJavaScript__BigInteger__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method returns the String\n representation of this instance.\n\nSyntax:\n\aBigInteger.toString()\n@return String

#BigDecimal class
_label_CDSJavaScript__BigDecimal =JavaScript BigDecimal Object\n\nBigDecimal Object:\n\nA BigDecimal object is an immutable\n arbitrary-precision decimals.\n\nSyntax:\n\nvar aBigDecimal = new BigDecimal(1.2);
_label_CDSJavaScript__BigDecimal__abs =JavaScript abs() Method\n\nDefinition and Usage:\n\nThe abs() method returns a BigDecimal\n whose value is the absolute value\n of this BigDecimal.\n\nSyntax:\n\aBigDecimal.abs()\n@return BigDecimal
_label_CDSJavaScript__BigDecimal__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method returns a BigDecimal\n whose value is (this + val).\n\nSyntax:\n\aBigDecimal.add(BigDecimal val)\n@return BigDecimal\n@param val: Required. Value to be added\n to this BigDecimal\n\n\nSyntax:\n\aBigDecimal.add(BigDecimal val, MathContext mc)\n@return BigDecimal\n@param val: Required. Value to be added\n to this BigDecimal\n@param mc: Optional. Rounding according to the context settings
_label_CDSJavaScript__BigDecimal__compareTo =JavaScript compareTo() Method\n\nDefinition and Usage:\n\nThe compareTo() method compares\n this BigDecimal with the specified BigDecimal.\n\nSyntax:\n\aBigDecimal.compareTo(BigDecimal val)\n@return Integer\n@param val: Required. BigDecimal\n to which this BigDecimal is to be compared
_label_CDSJavaScript__BigDecimal__divide =JavaScript divide() Method\n\nDefinition and Usage:\n\nThe divide() method returns a BigDecimal\n whose value is (this / val).\n\nSyntax:\n\aBigDecimal.divide(BigDecimal val)\n@return BigDecimal\n@param val: Required. Value by which this BigDecimal\n is to be divided\n@param scale/mc/rm: Optional. \nScale/Math Context/Rounding Mode
_label_CDSJavaScript__BigDecimal__divideToIntegralValue =JavaScript divideToIntegralValue() Method\n\nDefinition and Usage:\n\nThe divideToIntegralValue() method returns a BigDecimal\n whose value is the integer part of the\n quotient (this / divisor) rounded down.\n\nSyntax:\n\aBigDecimal.divideToIntegralValue(BigDecimal val)\n@return BigDecimal\n@param val: Required. Value by which this BigDecimal\n is to be divided\n@param mc: Optional. The context to use
_label_CDSJavaScript__BigDecimal__max =JavaScript max() Method\n\nDefinition and Usage:\n\nThe max() method returns the maximum\n of this BigDecimal and val.\n\nSyntax:\n\aBigDecimal.max(BigDecimal val)\n@return BigDecimal\n@param val: Required. Value with which the\n maximum is to be computed
_label_CDSJavaScript__BigDecimal__min =JavaScript min() Method\n\nDefinition and Usage:\n\nThe min() method returns the minimum\n of this BigDecimal and val.\n\nSyntax:\n\aBigDecimal.min(BigDecimal val)\n@return BigDecimal\n@param val: Required. Value with which the\n minimum is to be computed
_label_CDSJavaScript__BigDecimal__multiply =JavaScript multiply() Method\n\nDefinition and Usage:\n\nThe multiply() method returns a BigDecimal\n whose value is (this * val).\n\nSyntax:\n\aBigDecimal.multiply(BigDecimal val, MathContext mc)\n@return BigDecimal\n@param val: Required. Value to be multiplied\n by this BigDecimal\n@param mc: Optional. The MathContext with context settings to use
_label_CDSJavaScript__BigDecimal__negate =JavaScript negate() Method\n\nDefinition and Usage:\n\nThe negate() method returns a BigDecimal\n whose value is (-this).\n\nSyntax:\n\aBigDecimal.negate()\n@return BigDecimal
_label_CDSJavaScript__BigDecimal__pow =JavaScript pow() Method\n\nDefinition and Usage:\n\nThe pow() method returns a BigDecimal\n whose value is (this^exponent).\n\nSyntax:\n\aBigDecimal.pow(int exponent, MathContext mc)\n@return BigDecimal\n@param exponent: Required. Exponent to which\n this BigDecimal is to be raised\n@param mc: Optional. The MathContext with context settings to use
_label_CDSJavaScript__BigDecimal__precision =JavaScript precision() Method\n\nDefinition and Usage:\n\nThe precision() method returns the precision\n of this BigDecimal.\n\nSyntax:\n\aBigDecimal.precision()\n@return Integer
_label_CDSJavaScript__BigDecimal__remainder =JavaScript remainder() Method\n\nDefinition and Usage:\n\nThe remainder() method returns a BigDecimal\n whose value is (this % val).\n\nSyntax:\n\aBigDecimal.remainder(BigDecimal val, MathContext mc)\n@return BigDecimal\n@param val: Required. Value by which this BigDecimal\n is to be divided, and the remainder computed\n@param mc: Optional. The MathContext with context settings to use
_label_CDSJavaScript__BigDecimal__round =JavaScript round() Method\n\nDefinition and Usage:\n\nThe round() method returns a BigDecimal\n rounded according to the MathContext\n settings.\n\nSyntax:\n\aBigDecimal.round(mc)\n@return BigDecimal\n@param mc: Required. The MathContext with context settings to use
_label_CDSJavaScript__BigDecimal__scale =JavaScript scale() Method\n\nDefinition and Usage:\n\nThe scale() method returns the scale of this BigDecimal.\n\nSyntax:\n\aBigDecimal.scale()\n@return Integer
_label_CDSJavaScript__BigDecimal__scaleByPowerOfTen =JavaScript scaleByPowerOfTen() Method\n\nDefinition and Usage:\n\nThe scaleByPowerOfTen() method returns a\n BigDecimal whose numerical value is\n equal to (this * 10n).\n\nSyntax:\n\aBigDecimal.scaleByPowerOfTen(int n)\n@return BigDecimal\n@param n: Required. Number
_label_CDSJavaScript__BigDecimal__setScale =JavaScript setScale() Method\n\nDefinition and Usage:\n\nThe setScale() method returns\n a BigDecimal whose scale is the specified\n value, and whose value is numerically\n equal to this BigDecimal's.\n\nSyntax:\n\aBigDecimal.setScale(int newScale, RoundingMode rm)\n@return BigDecimal\n@param n: Required. Scale of the\n BigDecimal value to be returned.\n@param rm: Optional. The rounding mode\n to apply
_label_CDSJavaScript__BigDecimal__signum =JavaScript signum() Method\n\nDefinition and Usage:\n\nThe signum() method returns the signum function\n of this BigDecimal.\n\nSyntax:\n\aBigDecimal.signum()\n@return Integer
_label_CDSJavaScript__BigDecimal__stripTrailingZeros =JavaScript stripTrailingZeros() Method\n\nDefinition and Usage:\n\nThe stripTrailingZeros() method returns\n a BigDecimal which is numerically equal\n to this one but with any trailing zeros\n removed from the representation.\n\nSyntax:\n\aBigDecimal.stripTrailingZeros()\n@return BigDecimal
_label_CDSJavaScript__BigDecimal__subtract =JavaScript subtract() Method\n\nDefinition and Usage:\n\nThe subtract() method returns a BigDecimal\n whose value is (this - val).\n\nSyntax:\n\aBigDecimal.subtract(BigDecimal val, MathContext mc)\n@return subtract\n@param val: Required. Value to be subtracted\n from this BigInteger\n@param mc: Optional. The MathContext with context settings to use
_label_CDSJavaScript__BigDecimal__toEngineeringString =JavaScript toEngineeringString() Method\n\nDefinition and Usage:\n\nThe toEngineeringString() method returns\n a string representation of this BigDecimal,\n using engineering notation if an\n exponent is needed.\n\nSyntax:\n\aBigDecimal.toEngineeringString()\n@return String
_label_CDSJavaScript__BigDecimal__toPlainString =JavaScript toPlainString() Method\n\nDefinition and Usage:\n\nThe toPlainString() method returns a string\n representation of this BigDecimal without\n an exponent field.\n\nSyntax:\n\aBigDecimal.toPlainString()\n@return String
_label_CDSJavaScript__BigDecimal__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method returns a string\n representation of this BigDecimal.\n\nSyntax:\n\aBigDecimal.toString()\n@return String
_label_CDSJavaScript__BigDecimal__ulp =JavaScript ulp() Method\n\nDefinition and Usage:\n\nThe ulp() method returns the size of an\n ulp (a unit in the last place)of this BigDecimal.\n\nSyntax:\n\aBigDecimal.ulp()\n@return BigDecimal
_label_CDSJavaScript__BigDecimal__unscaledValue =JavaScript unscaledValue() Method\n\nDefinition and Usage:\n\nThe unscaledValue() method returns\n a BigInteger whose value is the\n unscaled value of this BigDecimal.\n\nSyntax:\n\aBigDecimal.unscaledValue()\n@return BigInteger

#MathContext class
_label_CDSJavaScript__MathContext =JavaScript MathContext Object\n\nMathContext Object:\n\nMathContext objects are immutable objects\n which encapsulate the context settings\n which describe certain rules for numerical\n operators, such as those implemented\n by the BigDecimal class
_label_CDSJavaScript__MathContext__DECIMAL128 =JavaScript DECIMAL128 Property\n\nDefinition and Usage:\n\nThe DECIMAL128 property returns an\n object with a precision setting\n matching the IEEE 754R Decimal128 format,\n 34 digits, and a rounding mode of\n HALF_EVEN, the IEEE 754R default.\n\nSyntax:\n\nMathContext.DECIMAL128;\n@return MathContext
_label_CDSJavaScript__MathContext__DECIMAL32 =JavaScript DECIMAL32 Property\n\nDefinition and Usage:\n\nThe DECIMAL32 property returns an\n object with a precision setting\n matching the IEEE 754R Decimal32\n format, 7 digits, and a rounding mode of\n HALF_EVEN, the IEEE 754R default.\n\nSyntax:\n\nMathContext.DECIMAL32;\n@return MathContext
_label_CDSJavaScript__MathContext__DECIMAL64 =JavaScript DECIMAL64 Property\n\nDefinition and Usage:\n\nThe DECIMAL64 property returns an\n object with a precision setting\n matching the IEEE 754R Decimal64\n format, 16 digits, and a rounding mode of\n HALF_EVEN, the IEEE 754R default.\n\nSyntax:\n\nMathContext.DECIMAL64;\n@return MathContext
_label_CDSJavaScript__MathContext__UNLIMITED =JavaScript UNLIMITED Property\n\nDefinition and Usage:\n\nThe UNLIMITED property returns an\n object whose settings have the\n values required for unlimited precision\n arithmetic.\n\nSyntax:\n\nMathContext.UNLIMITED;\n@return MathContext
_label_CDSJavaScript__MathContext__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method compares this\n MathContext with the specified Object\n for equality.\n\nSyntax:\n\aMathContext.equals(x)\n@return Boolean\n@param x: Required. Object to which this\n MathContext is to be compared
_label_CDSJavaScript__MathContext__getPrecision =JavaScript getPrecision() Method\n\nDefinition and Usage:\n\nThe getPrecision() method returns\n the precision setting.\n\nSyntax:\n\aMathContext.getPrecision()\n@return Integer
_label_CDSJavaScript__MathContext__getRoundingMode =JavaScript getRoundingMode() Method\n\nDefinition and Usage:\n\nThe getRoundingMode() method returns\n the roundingMode setting.\n\nSyntax:\n\aMathContext.getRoundingMode()\n@return RoundingMode
_label_CDSJavaScript__MathContext__hashCode =JavaScript hashCode() Method\n\nDefinition and Usage:\n\nThe hashCode() method returns\n the hash code for this MathContext.\n\nSyntax:\n\aMathContext.hashCode()\n@return Integer
_label_CDSJavaScript__MathContext__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method returns the String\n representation of this instance.\n\nSyntax:\n\aMathContext.toString()\n@return String

#RoundingMode class
_label_CDSJavaScript__RoundingMode =JavaScript RoundingMode Object\n\nRoundingMode Object:\n\nRoundingMode object Specifies a rounding\n behavior for numerical operations capable\n of discarding precision
_label_CDSJavaScript__RoundingMode__CEILING =JavaScript CEILING Property\n\nDefinition and Usage:\n\nRounding mode to round towards\n positive infinity.\n\nSyntax:\n\RoundingMode.CEILING;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__FLOOR =JavaScript FLOOR Property\n\nDefinition and Usage:\n\nRounding mode to round towards\n negative infinity.\n\nSyntax:\n\RoundingMode.FLOOR;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__UP =JavaScript UP Property\n\nDefinition and Usage:\n\nRounding mode to round away\n from zero.\n\nSyntax:\n\RoundingMode.UP;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__DOWN =JavaScript DOWN Property\n\nDefinition and Usage:\n\nRounding mode to round towards\n zero.\n\nSyntax:\n\RoundingMode.DOWN;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__HALF_UP =JavaScript HALF_UP Property\n\nDefinition and Usage:\n\nRounding mode to round towards\n "nearest neighbour" unless both\n neighbours are equidistant, in which\n case round up.\n\nSyntax:\n\RoundingMode.HALF_UP;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__HALF_DOWN =JavaScript HALF_DOWN Property\n\nDefinition and Usage:\n\nRounding mode to round towards\n "nearest neighbour" unless\n both neighbours are equidistant\n, in which case round down.\n\nSyntax:\n\RoundingMode.HALF_DOWN;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__HALF_EVEN =JavaScript HALF_EVEN Property\n\nDefinition and Usage:\n\nRounding mode to round towards\n "nearest neighbour" unless\n both neighbours are equidistant\n, in which case round towards\n the even neighbor.\n\nSyntax:\n\RoundingMode.HALF_EVEN;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__UNNECESSARY =JavaScript UNNECESSARY Property\n\nDefinition and Usage:\n\nRounding mode to assert that\n the requested operation has an\n exact result, hence no rounding is\n necessary.\n\nSyntax:\n\RoundingMode.UNNECESSARY;\n@return RoundingMode
_label_CDSJavaScript__RoundingMode__valueOf =JavaScript valueOf() Method\n\nDefinition and Usage:\n\nThe valueOf() method returns\n the enum constant of this type with\n the specified name\n\nSyntax:\n\aRoundingMode.valueOf(name)\n@return RoundingMode\n@param name: Required. The name of the enum\n constant to be returned

#ScriptUtil class
_label_CDSJavaScript__ScriptUtil =JavaScript ScriptUtil Factory\n\nScriptUtil Factory:\n\nFactory for the creation and\n access of certain functions
_label_CDSJavaScript__ScriptUtil__createBigInteger =JavaScript createBigInteger() Method\n\nDefinition and Usage:\n\nThe createBigInteger() method creates a new BigInteger object.\n\nSyntax:\n\ScriptUtil.createBigInteger(BigDecimal value)\n@return BigInteger\n@param value: Required. The initial value of the BigInteger.\n\nSyntax:\n\ScriptUtil.createBigInteger(Integer value)\n@return BigInteger\n@param value: Required. The initial value of the BigInteger.\n\nSyntax:\n\ScriptUtil.createBigInteger(Text value)\n@return BigInteger\n@param value: Required. The initial value of the BigInteger.
_label_CDSJavaScript__ScriptUtil__createBigDecimal =JavaScript createBigDecimal() Method\n\nDefinition and Usage:\n\nThe createBigDecimal() method creates a new BigDecimal object.\n\nSyntax:\n\ScriptUtil.createBigDecimal(Integer value)\n@return BigDecimal\n@param value: Required. The initial value of the BigDecimal.\n\nSyntax:\n\ScriptUtil.createBigDecimal(Text value)\n@return BigDecimal\n@param value: Required. The initial value of the BigDecimal.\n\nSyntax:\n\ScriptUtil.createBigDecimal(Decimal value)\n@return BigDecimal\n@param value: Required. The initial value of the BigDecimal.\n\nSyntax:\n\ScriptUtil.createBigDecimal(BigInteger value)\n@return BigDecimal\n@param value: Required. The initial value of the BigDecimal.
_label_CDSJavaScript__ScriptUtil__createMathContext =JavaScript createMathContext() Method\n\nDefinition and Usage:\n\nThe createMathContext() method creates a new MathContext object.\n\nSyntax:\n\ScriptUtil.createMathContext(int precision, RoundingMode roundingmode)\n@return MathConext\n@param precision: Required. The value to create a MathContext with.\n@param roundingmode: Optional. \nThe RoundingMode is an enumeration with the following values: \nCEILING, FLOOR, UP, DOWN, HALF_UP,HALF_DOWN, HALF_EVEN, UNNECESSARY
_label_CDSJavaScript__ScriptUtil__createBoolean =JavaScript createBoolean() Method\n\nDefinition and Usage:\n\nThe createBoolean() method creates a new Boolean object.\n\nSyntax:\n\ScriptUtil.createBoolean(String value)\n@return Boolean\n@param value: Required. The initial value of the Boolean.
_label_CDSJavaScript__ScriptUtil__getFractionalSecond =JavaScript getFractionalSecond() Method\n\nDefinition and Usage:\n\nThe getFractionalSecond() method returns\n the fractional part of the seconds\n of the duration (0 <= value < 1.0).\n\nSyntax:\n\ScriptUtil.getFractionalSecond(duration)\n@return BigDecimal\n@param duration: Required. The duration
_label_CDSJavaScript__ScriptUtil__getMilliseconds =JavaScript getMilliseconds() Method\n\nDefinition and Usage:\n\nThe getMilliseconds() method returns\n the duration measured in  milliseconds.\n\nSyntax:\n\ScriptUtil.getMilliseconds(duration)\n@return Integer\n@param duration: Required. The duration
_label_CDSJavaScript__ScriptUtil__subtract =JavaScript subtract() Method\n\nDefinition and Usage:\n\nThe subtract() method calculates the\n duration between two timestamps. \n\nSyntax:\n\ScriptUtil.subtract(DateTimeUtil.createDate("2011-08-28"),DateTimeUtil.createDate("P1Y10M30D"))\n@return Duration\n@param timestamp1: Required. The timestamp,\n@param timestamp2: Required. The timestamp
_label_CDSJavaScript__ScriptUtil__subtractWorkingTime =JavaScript subtractWorkingTime() Method\n\nDefinition and Usage:\n\nThe subtractWorkingTime() method subtracts\n a duration from a date taking\n into account working hours & holidays \n\nSyntax:\n\ScriptUtil.subtractWorkingTime(calendar,duration,calendarName)\n@return XMLGregorianCalendar\n@param calendar: Required. The calendar,\n@param duration: Required. The duration\n@param calendarName: Required. The calendar name
_label_CDSJavaScript__ScriptUtil__addWorkingTime =JavaScript addWorkingTime() Method\n\nDefinition and Usage:\n\nThe addWorkingTime() method adds\n a working time.\n\nSyntax:\n\ScriptUtil.addWorkingTime(calendar,duration,calendarName)\n@return XMLGregorianCalendar\n@param calendar: Required. The calendar,\n@param duration: Required. The duration\n@param calendarName: Required. The calendar name
_label_CDSJavaScript__ScriptUtil__DATESTR =JavaScript DATESTR() Method\n\nDefinition and Usage:\n\nThe DATESTR() method converts a date\n field into a locale specific string,\n e.g. "20/08/2009"\n\nSyntax:\n\ScriptUtil.DATESTR(date)\n@return String\n@param date: Required. The date
_label_CDSJavaScript__ScriptUtil__NUM =JavaScript NUM() Method\n\nDefinition and Usage:\n\nThe NUM() method converts\n a string to Decimal.\n\nSyntax:\n\ScriptUtil.NUM(text)\n@return Decimal\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__ScriptUtil__SPECIALCHARS =JavaScript SPECIALCHARS() Method\n\nDefinition and Usage:\n\nThe SPECIALCHARS() method includes non-printing\n characters in a text string.\n\nSyntax:\n\ScriptUtil.SPECIALCHARS(text)\n@return String\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__ScriptUtil__STR =JavaScript STR() Method\n\nDefinition and Usage:\n\nThe STR() method converts from Decimal\n to a string with a specified number\n of decimal places.\nScriptUtil.STR(2.3, 2); Generates "2.30"\n\nSyntax:\n\ScriptUtil.STR(Decimal decimal, int decimals)\n@return String\n@param decimal: Required. The decimal to\n be converted\n@param decimals: Required. The\nnumber of decimal places
_label_CDSJavaScript__ScriptUtil__STRCONVERT =JavaScript STRCONVERT() Method\n\nDefinition and Usage:\n\nDepending on which bits are set in the opcode parameter \nthe following conversions are applied to the text parameter\n and the result is returned.\n1 delete all spaces\n2 delete all leading spaces\n4 delete all trailing spaces\n8 reduce sequences of multiple spaces to single spaces\n16 convert to lowercase\n32 convert to uppercase\n\nSyntax:\n\ScriptUtil.STRCONVERT(text, optCode)\n@return String\n@param text: Required. The text\n@param optCode: Required. The\n opt code
_label_CDSJavaScript__ScriptUtil__STRTOLOWER =JavaScript STRTOLOWER() Method\n\nDefinition and Usage:\n\nThe STRTOLOWER() method returns a\n lower case copy of the string\n passed in.\n\nSyntax:\n\ScriptUtil.STRTOLOWER(text)\n@return String\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__ScriptUtil__STRTOUPPER =JavaScript STRTOUPPER() Method\n\nDefinition and Usage:\n\nThe STRTOUPPER() method returns an\n upper case copy of the string\n passed in.\n\nSyntax:\n\ScriptUtil.STRTOUPPER(text)\n@return String\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__ScriptUtil__TIMESTR =JavaScript TIMESTR() Method\n\nDefinition and Usage:\n\nThe TIMESTR() method converts a time\n field into a locale specific\n string, e.g. "21:23".\n\nSyntax:\n\ScriptUtil.TIMESTR(Time time)\n@return String\n@param time: Required. The time to\n be converted
_label_CDSJavaScript__ScriptUtil__MONTHSTR =JavaScript MONTHSTR() Method\n\nDefinition and Usage:\n\nThe MONTHSTR() method returns the month\n name from the specified date.\n\nSyntax:\n\ScriptUtil.MONTHSTR(date)\n@return String - month name from the specified date\n@param date: Required. The date from which month name is requested
_label_CDSJavaScript__ScriptUtil__CALCDATE =JavaScript CALCDATE() Method\n\nDefinition and Usage:\n\nThe CALCDATE() method adds an offset to a date.\n\nSyntax:\n\ScriptUtil.CALCDATE(Date date, int dDy, int dWk, int dMo, int dYr)\n@return Date\n@param date: Required. The date\n@param dDy: Required. The day\n@param dWk: Required. The week\n@param dMo: Required. The month\n@param dYr: Required. The year
_label_CDSJavaScript__ScriptUtil__CALCTIME =JavaScript CALCTIME() Method\n\nDefinition and Usage:\n\nThe CALCTIME() method Adds an offset\n to a time returning number of\n days carried over\n\nSyntax:\n\ScriptUtil.CALCTIME(Time time, int dHr, int dMi)\n@return Time\n@param time: Required. The time\n@param dHr: Required. The hour\n@param dMi: Required. The minutes
_label_CDSJavaScript__ScriptUtil__CALCTIMECARRYOVER =JavaScript CALCTIMECARRYOVER() Method\n\nDefinition and Usage:\n\nThe CALCTIMECARRYOVER() returns the number of\n days carried over\n\nSyntax:\n\ScriptUtil.CALCTIMECARRYOVER(time, dHr, dMi)\n@return Integer\n@param time: Required. The time\n@param dHr: Required. The hour\n@param dMi: Required. The minutes
_label_CDSJavaScript__ScriptUtil__DATE =JavaScript DATE() Method\n\nDefinition and Usage:\n\nThe DATE() method constructs a Date.\n\nSyntax:\n\ScriptUtil.DATE(day, mon, year)\n@return Date\n@param day: Required. The day\n@param mon: Required. The month\n@param year: Required. The year
_label_CDSJavaScript__ScriptUtil__DAYNUM =JavaScript DAYNUM() Method\n\nDefinition and Usage:\n\nThe DAYNUM() method returns the\n day of the month of the specified date.\n\nSyntax:\n\ScriptUtil.DAYNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__ScriptUtil__DAYSTR =JavaScript DAYSTR() Method\n\nDefinition and Usage:\n\nThe DAYSTR() method returns the\n day of the week as a string.\n\nSyntax:\n\ScriptUtil.DAYSTR(Date date)\n@return String\n@param date: Required. The date
_label_CDSJavaScript__ScriptUtil__HOURNUM =JavaScript HOURNUM() Method\n\nDefinition and Usage:\n\nThe HOURNUM() method returns the\n hour of the specified time.\n\nSyntax:\n\ScriptUtil.HOURNUM(Time time)\n@return Integer\n@param time: Required. The time
_label_CDSJavaScript__ScriptUtil__MINSNUM =JavaScript MINSNUM() Method\n\nDefinition and Usage:\n\nThe MINSNUM() method returns the\n minutes of the specified time.\n\nSyntax:\n\ScriptUtil.MINSNUM(Time time)\n@return Integer\n@param time: Required. The time
_label_CDSJavaScript__ScriptUtil__MONTHNUM =JavaScript MONTHNUM() Method\n\nDefinition and Usage:\n\nThe MONTHNUM() method returns the\n month number of the specified date.\n\nSyntax:\n\ScriptUtil.MONTHNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__ScriptUtil__TIME =JavaScript TIME() Method\n\nDefinition and Usage:\n\nThe TIME() method constructs a time.\n\nSyntax:\n\ScriptUtil.TIME(int hours, int minutes)\n@return Time\n@param hours: Required. The hours\n@param minutes: Required. The minutes
_label_CDSJavaScript__ScriptUtil__WEEKNUM =JavaScript WEEKNUM() Method\n\nDefinition and Usage:\n\nThe WEEKNUM() method returns the\n week number of the specified date.\n\nSyntax:\n\ScriptUtil.WEEKNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__ScriptUtil__YEARNUM =JavaScript YEARNUM() Method\n\nDefinition and Usage:\n\nThe YEARNUM() method returns the\n year number of the specified date.\n\nSyntax:\n\ScriptUtil.YEARNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__ScriptUtil__RSEARCH =JavaScript RSEARCH() Method\n\nDefinition and Usage:\n\nThe RSEARCH() method returns the\n reverse search for substring in string.\nThe indices are 1-based.\nScriptUtil.RSEARCH("abc","junkabcdefs"); Returns "5".\n\n\nSyntax:\n\ScriptUtil.RSEARCH(String substring, String string)\n@return Integer the starting index of the substring in string\n@param substring: Required. The text\n to search\n@param string: Required. The target string in which the substring is searched
_label_CDSJavaScript__ScriptUtil__SEARCH =JavaScript SEARCH() Method\n\nDefinition and Usage:\n\nThe SEARCH() method returns the\n search for substring in string.\nThe indices are 1-based.\nScriptUtil.SEARCH("abc","junkabcdefs"); Returns "5".\n\nSyntax:\n\ScriptUtil.SEARCH(String substring, String string)\n@return Integer the starting index of the substring in string\n@param substring: Required. The text\n to search\n@param string: Required. The target string in which the substring is searched
_label_CDSJavaScript__ScriptUtil__STRLEN =JavaScript STRLEN() Method\n\nDefinition and Usage:\n\nThe STRLEN() method counts the number of characters\n in a string\n\nSyntax:\n\ScriptUtil.STRLEN(text)\n@return Integer\n@param text: Required. The text whose length is required.
_label_CDSJavaScript__ScriptUtil__SUBSTR =JavaScript SUBSTR() Method\n\nDefinition and Usage:\n\nThe SUBSTR() method returns a substring.\nThe indices are 1-based.\nScriptUtil.SUBSTR("abcdefgh", 3, 3); Returns "def".\n\nSyntax:\n\ScriptUtil.SUBSTR(String text, int start, int length)\n@return String\n@param text: Required. The text/string on which substring is required \n@param start: Required. The starting index\n@param length: Required. The length - the number of characters from the starting index
_label_CDSJavaScript__ScriptUtil__copy =JavaScript copy() Method\n\nDefinition and Usage:\n\nThe copy() method returns a copy of the bom.Class passed\n\nSyntax:\n\ScriptUtil.copy(bom.Class)\n@return bom.Class\n@param bom.Class: Required. The object to be copied
_label_CDSJavaScript__ScriptUtil__copyAll =JavaScript copyAll() Method\n\nDefinition and Usage:\n\nThe copyAll() method Copies all the objects\n in the source List\n returning a new list that can be passed to the\n addAll method for another list\n\nSyntax:\n\ScriptUtil.copyAll(srcBDSObjectCollection)\n@return List<bom.Class>\n@param srcBDSObjectCollection: Required. The source list
_label_CDSJavaScript__ScriptUtil__setObject =JavaScript setObject() Method\n\nDefinition and Usage:\n\nThe setObject() method allows for an "any" type to be set\n to a Bom Class (ComplexType).\n\nSyntax:\n\ScriptUtil.setObject(anyFeatureMapTarget, complexType, elementFQName)\n@param bom.Object: Required. The "any" to store the data in\n@param bom.Class: Required. The Bom Class to store into the "any"\n@param String: Required.The BOM name to store the element as
_label_CDSJavaScript__ScriptUtil__addObject =JavaScript addObject() Method\n\nDefinition and Usage:\n\nThe addObject() method allows for an "any" type to be added\n to with a Bom Class (ComplexType).\n\nSyntax:\n\ScriptUtil.setObject(anyFeatureMapTarget, complexType, elementFQName)\n@param bom.Object: Required. The "any" to store the data in\n@param bom.Class: Required. The bom.Class to store into the "any"\n@param String: Required.The BOM name to store the element as
_label_CDSJavaScript__ScriptUtil__round =JavaScript round() Method\n\nDefinition and Usage:\n\nThe round() method rounds the given value\n with the specified number of decimals.\n\nSyntax:\n\ScriptUtil.round(number, decimals)\n@return Decimal\n@param Decimal: Required. The number to be rounded\n@param decimal: Required. The number of decimals
#XPD-5542 - new methods added to ScriptUtil
_label_CDSJavaScript__ScriptUtil__toXML__bom.Class__String=JavaScript toXML() Method\n\nDefinition and Usage:\nThe toXML() method returns the XML representation of the given\nobject (by serialising the object).\n\nSyntax:\nScriptUtil.toXML(bom.Class)\n\n@param bom.Class: Required.\n\n@return String - xml string representation of the given object
_label_CDSJavaScript__ScriptUtil__toXML__String__bom.Class__String=JavaScript toXML() Method\n\nDefinition and Usage:\n\nThe toXML() method returns the XML representation of the given\nobject (serialises the object) using the type specified in the\nsecond parameter (which can either be the Element Name\nor Fully Qualified Class Name).\n\nSyntax:\nScriptUtil.toXML(bom.Class, String)\n\n@param bom.Class : Required\n@param String : Required\n@return String

_label_CDSJavaScript__ScriptUtil__fromXML=JavaScript fromXML() Method\n\nDefinition and Usage:\n\nThe fromXML() method Returns the business object represented by the the specified XML string.\n\nSyntax:\nScriptUtil.fromXML(String xmlstring)\n@return bom.Class\n@param String: Required. xml string
_label_CDSJavaScript__ScriptUtil__isConvertableToXML=JavaScript isConvertableToXML() Method\n\nDefinition and Usage:\n\nThe isConvertableToXML() method returns true if the specified object can be converted to XML\n\nSyntax:\nScriptUtil.isConvertableToXML(bom.Class)\n@return Boolean\n@param bom.Class: Required.

_label_CDSJavaScript__ScriptUtil__setArrayElement=JavaScript setArrayElement() Method\n\nDefinition and Usage:\nThis method sets the value of an existing element OR appends\nthe element to end of an array provided that the index is\nappropriate for end of list.\n\nUnlike List.set(index, value) this method will not fail on attempts\nto set the element after current last element. The zero-based index\nmust be in the range >=0 to <=lastElementIndex+1.\n\nSyntax:\nScriptUtil.setArrayElement(arrayData, index, value)\n\n@param Array arrayData: Required. Data array to set to.\n@param Integer index: Required. Index of array element to set\n                               (>=0 to <=lastElementIndex+1).\n@param Object value: Required. Value to set (this MUST be same type\n                                as arrayData at runtime but is not\n                                checked at design time).\n@return void\n
_label_CDSJavaScript__ScriptUtil__getArrayElement=JavaScript getArrayElement() Method\n\nDefinition and Usage:\nThis method gets the value of an existing element or null if that\nelement does not exist.\n\nUnlike List.get(index) it will not fail with an exception if there is no\nelement in array for given index.\n\nSyntax:\nScriptUtil.getArrayElement(arrayData, index, value)\n\n@param Array arrayData: Required. Data array to get from.\n@param index: Required. Index of array element to get (>=0).\n@return Value of arrayData element type or null if there is no\n        element at the given index (type is NOT checked\n        at designtime).\n

#DateTimeUtil class
_label_CDSJavaScript__DateTimeUtil =JavaScript DateTimeUtil Factory\n\nDateTimeUtil Factory:\n\nFactory for the creation and\n access of certain functions
_label_CDSJavaScript__DateTimeUtil__createDate =JavaScript createDate() Method\n\nDefinition and Usage:\n\nThe createDate() method creates a new Date object.\n\nSyntax:\n\DateTimeUtil.createDate()\n@return Date that is set to today's date\n\nSyntax:\n\DateTimeUtil.createDate(DateTime datetime)\n@return Date\n@param datetime: Required. This ignores any timezone offset\n\nSyntax:\n\DateTimeUtil.createDate(DateTimeTz datetimetz, boolean normalise)\n@return Date\n@param datetimetz: Required. The date and time with timezone specified\n@param normalize: Required. Boolean if set to True, normalizes to Zulu time. \nFor example, 2009-11-30T23:50:00-05:00 becomes 2009-12-01. \nIf set to False, it strips timezone. The same example date becomes 2009-11-30.\n\nSyntax:\n\DateTimeUtil.createDate(int year, int month, int day)\n@return Date\n@param year: Required. The year for the date to be created\n@param month: Required. The month for the date to be created\n@param day: Required. The day for the date to be created\n\nSyntax:\n\DateTimeUtil.createDate(String isoFormatDate)\n@return Date\n@param isoFormatDate: Required. The date in iso format. This ignores any timezone offset. \nFor example: 2009-11-30T23:50:00-05:00 becomes 2009-11-30.
_label_CDSJavaScript__DateTimeUtil__createTime =JavaScript createTime() Method\n\nDefinition and Usage:\n\nThe createTime() method creates a new Time object.\n\nSyntax:\n\DateTimeUtil.createTime()\n@return Time set to the current time\n\nSyntax:\n\DateTimeUtil.createTime(DateTime datetime)\n@return Time\n@param datetime: Required. This ignores any timezone offset\n\nSyntax:\n\DateTimeUtil.createTime(DateTimeTz datetimetz, boolean normalise)\n@return Time\n@param datetimetz: Required. The date and time with timezone specified\n@param normalize: Required. Boolean if set to True, normalizes to Zulu time. If it is set to False, it strips timezone\n\nSyntax:\n\DateTimeUtil.createTime(int hour, int minute, int second, BigDecimal fractionalSecond)\n@return Time\n@param hour: Required. The hour for the time to be created\n@param minute: Required. The minute for the time to be created\n@param second: Required. The second for the time to be created\n@param fractionalSecond: Required. The fractionalSecond for the time to be created\n\nSyntax:\n\DateTimeUtil.createTime(int hour, int minute, int second, int millisecond)\n@return Time\n@param hour: Required. The hour for the time to be created\n@param minute: Required. The minute for the time to be created\n@param second: Required. The second for the time to be created\n@param millisecond: Required. The millisecond in the time to be created\n\nSyntax:\n\DateTimeUtil.createTime(String isoFormatTime)\n@return Time\n@param isoFormatTime: Required. The time in iso format. This ignores any timezone offset.
_label_CDSJavaScript__DateTimeUtil__createDatetime =JavaScript createDatetime() Method\n\nDefinition and Usage:\n\nThe createDatetime() method creates a new\n DateTime object.\n\nSyntax:\n\DateTimeUtil.createDatetime()\n@return DateTime  set to the current date and time\n\nSyntax:\n\DateTimeUtil.createDatetime(int year, int month, int day, int hour, int minute, int second, int fractionalSecond)\n@return DateTime\n@param year: Required. The year for the datetime to be created\n@param month: Required. The month for the datetime to be created\n@param day: Required. The day for the datetime to be created\n@param hour: Required. The hour for the datetime to be created\n@param minute: Required. The minute for the datetime to be created\n@param second: Required. The second for the datetime to be created\n@param fractionalSecond: Required. The fractionalSecond for the datetime to be created\n\nSyntax:\n\DateTimeUtil.createDatetime(DateTimeTz datetimetz, boolean normalise)\n@return DateTime\n@param datetimetz: Required. The datetimetz with timezone specified\n@param normalize: Required. Boolean if set to True, normalizes to Zulu time. If it is set to False, it strips timezone\n\nSyntax:\n\DateTimeUtil.createDatetime(int year, int month, int day, int hour, int minute, int second, int millisecond)\n@return DateTime\n@param year: Required. The year for the datetime to be created\n@param month: Required. The month for the datetime to be created\n@param day: Required. The day for the datetime to be created\n@param hour: Required. The hour for the datetime to be created\n@param minute: Required. The minute for the datetime to be created\n@param second: Required. The second for the datetime to be created\n@param millisecond: Required. The millisecond for the datetime to be created\n\nSyntax:\n\DateTimeUtil.createDatetime(String lexicalRepresentation)\n@return DateTime\n@param lexicalRepresentation: Required. This creates a new Datetime by parsing the String as a lexical representation. \nThe Timezone offset is to be set only if specified in the string\n\nSyntax:\n\DateTimeUtil.createDatetime(Date date, Time time)\n@return DateTime\n@param date: Required. This ignores any timezone offset set\n@param time: Required. This ignores any timezone offset set
_label_CDSJavaScript__DateTimeUtil__createDatetimetz =JavaScript createDatetimetz() Method\n\nDefinition and Usage:\n\nThe createDatetimetz() method creates a new\n Datetimetz object.\n\nSyntax:\n\DateTimeUtil.createDatetimetz()\n@return Datetimetz set to the current date and time\n\nSyntax:\n\DateTimeUtil.createDatetimetz(int year, int month, int day, int hour, int minute, int second, int fractionalSecond, int timezone_offset)\n@return Datetimetz\n@param year: Required. The year for the datetimetz to be created\n@param month: Required. The month for the datetimetz to be created\n@param day: Required. The day for the datetimetz to be created\n@param hour: Required. The hour for the datetimetz to be created\n@param minute: Required. The minute for the datetimetz to be created\n@param second: Required. The second for the datetimetz to be created\n@param fractionalSecond: Required. The fractionalSecond for the datetimetz to be created\n@param timezone_offset: Required. The timezone_offset for the datetimetz to be created\n\nSyntax:\n\DateTimeUtil.createDatetimetz(DateTime datetime, int offset_minutes)\n@return Datetimetz\n@param datetime: Required. The datetime\n@param offset_minutes: Required. The offset_minutes\n\nSyntax:\n\DateTimeUtil.createDatetimetz(int year, int month, int day, int hour, int minute, int second, int millisecond, int timezone_offset)\n@return Datetimetz\n@param year: Required. The year for the datetimetz to be created\n@param month: Required. The month for the datetimetz to be created\n@param day: Required. The day for the datetimetz to be created\n@param hour: Required. The hour for the datetimetz to be created\n@param minute: Required. The minute for the datetimetz to be created\n@param second: Required. The second for the datetimetz to be created\n@param millisecond: Required. The millisecond for the datetimetz to be created\n@param timezone_offset: Required. The timezone_offset\n\nSyntax:\n\DateTimeUtil.createDatetimetz(String lexicalRepresentation)\n@return Datetimetz\n@param lexicalRepresentation: Required. This creates a new Datetimetz by parsing the String as a lexical representation. \nIt takes the timezone offset from string, and defaults to zulu time if not specified.\n\nSyntax:\n\DateTimeUtil.createDatetimetz(Date date, Time time, int offset_minutes)\n@return Datetimetz\n@param date: Required. The date\n@param time: Required. The time\n@param offset_minutes: Required. The offset_minutes
_label_CDSJavaScript__DateTimeUtil__createDuration =JavaScript createDuration(boolean isPositive, BigInteger years, BigInteger months, BigInteger days, BigInteger hours, BigInteger minutes, BigDecimal seconds) Method\n\nDefinition and Usage:\n\nThe createDuration() method creates a new\n Duration object.\n\nSyntax:\n\DateTimeUtil.createDuration(boolean isPositive, BigInteger years, BigInteger months, BigInteger days, BigInteger hours, BigInteger minutes, BigDecimal seconds)\n@return Duration\n@param isPositive: Required. Boolean if set to true, specifies the duration as positive\n@param years: Required. The years in duration\n@param months: Required. The months in duration\n@param days: Required. The days in duration\n@param hours: Required. The hours in duration\n@param minutes: Required. The minutes in duration\n@param seconds: Required. The seconds in duration\n\nSyntax:\n\DateTimeUtil.createDuration(boolean isPositive, int years, int months, int days, int hours, int minutes, int seconds)\n@return Duration\n@param isPositive: Required. Boolean if set to true, specifies the duration as positive\n@param years: Required. The years in duration\n@param months: Required. The months in duration\n@param days: Required. The days in duration\n@param hours: Required. The hours in duration\n@param minutes: Required. The minutes in duration\n@param seconds: Required. The seconds in duration\n\nSyntax:\n\DateTimeUtil.createDuration(int durationInMilliSeconds)\n@return Duration\n@param durationInMilliSeconds: Required. The durationInMilliSeconds\n\nSyntax:\n\DateTimeUtil.createDuration(String lexicalRepresentation)\n@return Duration\n@param lexicalRepresentation: Required. The lexicalRepresentation  as its string representation PnYnMnDTnHnMnS.

#IpeScriptUtil class
_label_CDSJavaScript__IpeScriptUtil =JavaScript IpeScriptUtil Factory\n\nIpeScriptUtil Factory:\n\nFactory for the creation and\n access of certain functions
_label_CDSJavaScript__IpeScriptUtil__DATESTR =JavaScript DATESTR() Method\n\nDefinition and Usage:\n\nThe DATESTR() method converts a date\n field into a locale specific string,\n e.g. "20/08/2009"\n\nSyntax:\n\IpeScriptUtil.DATESTR(date)\n@return String\n@param date: Required. The date
_label_CDSJavaScript__IpeScriptUtil__NUM =JavaScript NUM() Method\n\nDefinition and Usage:\n\nThe NUM() method converts\n a string to Decimal.\n\nSyntax:\n\IpeScriptUtil.NUM(text)\n@return Decimal\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__IpeScriptUtil__SPECIALCHARS =JavaScript SPECIALCHARS() Method\n\nDefinition and Usage:\n\nThe SPECIALCHARS() method includes non-printing\n characters in a text string.\n\nSyntax:\n\IpeScriptUtil.SPECIALCHARS(text)\n@return String\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__IpeScriptUtil__STR =JavaScript STR() Method\n\nDefinition and Usage:\n\nThe STR() method converts from Decimal\n to a string with a specified number\n of decimal places.\nIpeScriptUtil.STR(2.3, 2); Generates "2.30"\n\nSyntax:\n\IpeScriptUtil.STR(Decimal decimal, int decimals)\n@return String\n@param decimal: Required. The decimal to\n be converted\n@param decimals: Required. The\nnumber of decimal placeses
_label_CDSJavaScript__IpeScriptUtil__STRCONVERT =JavaScript STRCONVERT() Method\n\nDefinition and Usage:\n\nDepending on which bits are set in the opcode parameter \nthe following conversions are applied to the text parameter\n and the result is returned.\n1 delete all spaces\n2 delete all leading spaces\n4 delete all trailing spaces\n8 reduce sequences of multiple spaces to single spaces\n16 convert to lowercase\n32 convert to uppercase\n\nSyntax:\n\IpeScriptUtil.STRCONVERT(text, optCode)\n@return String\n@param text: Required. The text\n@param optCode: Required. The\n opt code
_label_CDSJavaScript__IpeScriptUtil__STRTOLOWER =JavaScript STRTOLOWER() Method\n\nDefinition and Usage:\n\nThe STRTOLOWER() method returns a\n lower case copy of the string\n passed in.\n\nSyntax:\n\IpeScriptUtil.STRTOLOWER(text)\n@return String\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__IpeScriptUtil__STRTOUPPER =JavaScript STRTOUPPER() Method\n\nDefinition and Usage:\n\nThe STRTOUPPER() method returns an\n upper case copy of the string\n passed in.\n\nSyntax:\n\IpeScriptUtil.STRTOUPPER(text)\n@return String\n@param text: Required. The text to\n be converted
_label_CDSJavaScript__IpeScriptUtil__TIMESTR =JavaScript TIMESTR() Method\n\nDefinition and Usage:\n\nThe TIMESTR() method converts a time\n field into a locale specific\n string, e.g. "21:23".\n\nSyntax:\n\IpeScriptUtil.TIMESTR(Time time)\n@return String\n@param time: Required. The time to\n be converted
_label_CDSJavaScript__IpeScriptUtil__MONTHSTR =JavaScript MONTHSTR() Method\n\nDefinition and Usage:\n\nThe MONTHSTR() method returns the month\n name from the specified date.\n\nSyntax:\n\IpeScriptUtil.MONTHSTR(Date date)\n@return String - month name from the specified date\n@param date: Required. The date from which month name is requested
_label_CDSJavaScript__IpeScriptUtil__CALCDATE =JavaScript CALCDATE() Method\n\nDefinition and Usage:\n\nThe CALCDATE() method adds an offset to a date.\n\nSyntax:\n\IpeScriptUtil.CALCDATE(Date date, int dDy, int dWk, int dMo, int dYr)\n@return Date\n@param date: Required. The date\n@param dDy: Required. The day\n@param dWk: Required. The week\n@param dMo: Required. The month\n@param dYr: Required. The year
_label_CDSJavaScript__IpeScriptUtil__CALCTIME =JavaScript CALCTIME() Method\n\nDefinition and Usage:\n\nThe CALCTIME() method Adds an offset\n to a time returning number of\n days carried over\n\nSyntax:\n\IpeScriptUtil.CALCTIME(Time time, int dHr, int dMi)\n@return Time\n@param time: Required. The time\n@param dHr: Required. The hour\n@param dMi: Required. The minutes
_label_CDSJavaScript__IpeScriptUtil__CALCTIMECARRYOVER =JavaScript CALCTIMECARRYOVER() Method\n\nDefinition and Usage:\n\nThe CALCTIMECARRYOVER() returns the number of\n days carried over\n\nSyntax:\n\ScriptUtil.CALCTIMECARRYOVER(Time time, int dHr, int dMi)\n@return Integer\n@param time: Required. The time\n@param dHr: Required. The hour\n@param dMi: Required. The minutes
_label_CDSJavaScript__IpeScriptUtil__DATE =JavaScript DATE() Method\n\nDefinition and Usage:\n\nThe DATE() method constructs a Date.\n\nSyntax:\n\IpeScriptUtil.DATE(int day, int mon, int year)\n@return Date\n@param day: Required. The day\n@param mon: Required. The month\n@param year: Required. The year
_label_CDSJavaScript__IpeScriptUtil__DAYNUM =JavaScript DAYNUM() Method\n\nDefinition and Usage:\n\nThe DAYNUM() method returns the\n day of the month of the specified date.\n\nSyntax:\n\IpeScriptUtil.DAYNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__IpeScriptUtil__DAYSTR =JavaScript DAYSTR() Method\n\nDefinition and Usage:\n\nThe DAYSTR() method returns the\n day of the week as a string.\n\nSyntax:\n\IpeScriptUtil.DAYSTR(Date date)\n@return String\n@param date: Required. The date
_label_CDSJavaScript__IpeScriptUtil__HOURNUM =JavaScript HOURNUM() Method\n\nDefinition and Usage:\n\nThe HOURNUM() method returns the\n hour of the specified time.\n\nSyntax:\n\IpeScriptUtil.HOURNUM(Time time)\n@return Integer\n@param time: Required. The time
_label_CDSJavaScript__IpeScriptUtil__MINSNUM =JavaScript MINSNUM() Method\n\nDefinition and Usage:\n\nThe MINSNUM() method returns the\n minutes of the specified time.\n\nSyntax:\n\IpeScriptUtil.MINSNUM(Time time)\n@return Integer\n@param time: Required. The time
_label_CDSJavaScript__IpeScriptUtil__MONTHNUM =JavaScript MONTHNUM() Method\n\nDefinition and Usage:\n\nThe MONTHNUM() method returns the\n month number of the specified date.\n\nSyntax:\n\IpeScriptUtil.MONTHNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__IpeScriptUtil__TIME =JavaScript TIME() Method\n\nDefinition and Usage:\n\nThe TIME() method constructs a time.\n\nSyntax:\n\IpeScriptUtil.TIME(int hours, int minutes)\n@return Time\n@param hours: Required. The hours\n@param minutes: Required. The minutes
_label_CDSJavaScript__IpeScriptUtil__WEEKNUM =JavaScript WEEKNUM() Method\n\nDefinition and Usage:\n\nThe WEEKNUM() method returns the\n week number of the specified date.\n\nSyntax:\n\IpeScriptUtil.WEEKNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__IpeScriptUtil__YEARNUM =JavaScript YEARNUM() Method\n\nDefinition and Usage:\n\nThe YEARNUM() method returns the\n year number of the specified date.\n\nSyntax:\n\IpeScriptUtil.YEARNUM(Date date)\n@return Integer\n@param date: Required. The date
_label_CDSJavaScript__IpeScriptUtil__RSEARCH =JavaScript RSEARCH() Method\n\nDefinition and Usage:\n\nThe RSEARCH() method returns the\n reverse search for substring in string.\nThe indices are 1-based.\nIpeScriptUtil.RSEARCH("abc","junkabcdefs"); Returns "5".\n\n\nSyntax:\n\IpeScriptUtil.RSEARCH(String substring, String string)\n@return Integer the starting index of the substring in string\n@param substring: Required. The text\n to search\n@param string: Required. The target string in which the substring is searched
_label_CDSJavaScript__IpeScriptUtil__SEARCH =JavaScript SEARCH() Method\n\nDefinition and Usage:\n\nThe SEARCH() method returns the\n search for substring in string.\nThe indices are 1-based.\nIpeScriptUtil.SEARCH("abc","junkabcdefs"); Returns "5".\n\nSyntax:\n\IpeScriptUtil.SEARCH(String substring, String string)\n@return Integer the starting index of the substring in string\n@param substring: Required. The text\n to search\n@param string: Required. The target string in which the substring is searched
_label_CDSJavaScript__IpeScriptUtil__STRLEN =JavaScript STRLEN() Method\n\nDefinition and Usage:\n\nThe STRLEN() method counts the number of characters\n in a string\n\nSyntax:\n\IpeScriptUtil.STRLEN(text)\n@return Integer\n@param text: Required. The text whose length is required.
_label_CDSJavaScript__IpeScriptUtil__SUBSTR =JavaScript SUBSTR() Method\n\nDefinition and Usage:\n\nThe SUBSTR() method returns a substring.\nThe indices are 1-based.\nIpeScriptUtil.SUBSTR("abcdefgh", 3, 3); Returns "def".\n\nSyntax:\n\IpeScriptUtil.SUBSTR(String text, int start, int length)\n@return String\n@param text: Required. The text/string on which substring is required \n@param start: Required. The starting index\n@param length: Required. The length - the number of characters from the starting index

#Log class
_label_CDSJavaScript__Log =JavaScript Log Object\n\nLog Object:\n\nClass that allows the log of messages
_label_CDSJavaScript__Log__write =JavaScript write() Method\n\nDefinition and Usage:\n\nThe write() method outputs the given text\n\nSyntax:\n\Log.write(text)\n@param text: Required. The text

#bom.Date class
_label_CDSJavaScript__bomDate =JavaScript bom.Date Object\n\nbom.Date Object:\n\nAbstract Class
_label_CDSJavaScript__bomDate__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method adds duration to this instance.\n\nSyntax:\n\aDate.add(Duration duration)\n@param duration: Required. Duration to add\n to this Date
_label_CDSJavaScript__bomDate__clear =JavaScript clear() Method\n\nDefinition and Usage:\n\nThe clear() method unsets all fields to undefined.\n\nSyntax:\n\aDate.clear()
_label_CDSJavaScript__bomDate__compare =JavaScript compare() Method\n\nDefinition and Usage:\n\nThe compare() method compares two\n instances of Date.\n\nSyntax:\n\aDate.compare(Date)\n@return Integer\n@param Date: Required. Instance\n of Date to compare
_label_CDSJavaScript__bomDate__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method indicates whether\n parameter obj is "equal to" this one.\n\nSyntax:\n\aDate.equals(Object obj)\n@return Boolean\n@param obj: Required. obj to compare
_label_CDSJavaScript__bomDate__getDay =JavaScript getDay() Method\n\nDefinition and Usage:\n\nThe getDay() method returns day in month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDate.getDay()\n@return Integer
_label_CDSJavaScript__bomDate__getMonth =JavaScript getMonth() Method\n\nDefinition and Usage:\n\nThe getMonth() method returns number of month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDate.getMonth()\n@return Integer
_label_CDSJavaScript__bomDate__getYear =JavaScript getYear() Method\n\nDefinition and Usage:\n\nThe getYear() method returns low order\n component for XML Schema 1.0 dateTime\n datatype field for year or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDate.getYear()\n@return Integer
_label_CDSJavaScript__bomDate__setDay =JavaScript setDay() Method\n\nDefinition and Usage:\n\nThe setDay() method set days in month.\n\nSyntax:\n\aDate.setDay(int day)\n@param day: Required. int day to be set.
_label_CDSJavaScript__bomDate__setMonth =JavaScript setMonth() Method\n\nDefinition and Usage:\n\nThe setMonth() method set month.\n\nSyntax:\n\aDate.setMonth(int month)\n@param month: Required. int month to be set.
_label_CDSJavaScript__bomDate__setYear =JavaScript setYear() Method\n\nDefinition and Usage:\n\nThe setYear() method set year.\n\nSyntax:\n\aDate.setYear(BigInteger year)\n@param year: Required. int year to be set.
_label_CDSJavaScript__bomDate__toXMLFormat =JavaScript toXMLFormat() Method\n\nDefinition and Usage:\n\nThe toXMLFormat() method returns the lexical\n representation of this instance.\n\nSyntax:\n\aDate.toXMLFormat()\n@return String

#Time class
_label_CDSJavaScript__Time =JavaScript Time Object\n\nTime Object:\n\nThe Time object is used to work with \n times.
_label_CDSJavaScript__Time__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method adds duration to this instance.\n\nSyntax:\n\aTime.add(Duration duration)\n@param duration: Required. Duration to add\n to this Time
_label_CDSJavaScript__Time__clear =JavaScript clear() Method\n\nDefinition and Usage:\n\nThe clear() method unsets all fields to undefined.\n\nSyntax:\n\aTime.clear()
_label_CDSJavaScript__Time__compare =JavaScript compare() Method\n\nDefinition and Usage:\n\nThe compare() method compares two\n instances of Time.\n\nSyntax:\n\aTime.compare(Time)\n@return Integer\n@param Time: Required. Instance\n of Time to compare
_label_CDSJavaScript__Time__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method indicates whether\n parameter obj is "equal to" this one.\n\nSyntax:\n\aTime.equals(Object obj)\n@return Boolean\n@param obj: Required. obj to compare
_label_CDSJavaScript__Time__getFractionalSecond =JavaScript getFractionalSecond() Method\n\nDefinition and Usage:\n\nThe getFractionalSecond() method returns fractional seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aTime.getFractionalSecond()\n@return BigDecimal
_label_CDSJavaScript__Time__getHour =JavaScript getHour() Method\n\nDefinition and Usage:\n\nThe getHour() method returns hours or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aTime.getHour()\n@return Integer
_label_CDSJavaScript__Time__getMillisecond =JavaScript getMillisecond() Method\n\nDefinition and Usage:\n\nThe getMillisecond() method returns miliseconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aTime.getMillisecond()\n@return Integer
_label_CDSJavaScript__Time__getMinute =JavaScript getMinute() Method\n\nDefinition and Usage:\n\nThe getMinute() method returns minutes or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aTime.getMinute()\n@return Integer
_label_CDSJavaScript__Time__getSecond =JavaScript getSecond() Method\n\nDefinition and Usage:\n\nThe getSecond() method returns seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aTime.getSecond()\n@return Integer
_label_CDSJavaScript__Time__setFractionalSecond =JavaScript setFractionalSecond() Method\n\nDefinition and Usage:\n\nThe setFractionalSecond() method set fractional seconds.\n\nSyntax:\n\aTime.setFractionalSecond(BigDecimal fractional)\n@param fractional: Required. fractional value.
_label_CDSJavaScript__Time__setHour =JavaScript setHour() Method\n\nDefinition and Usage:\n\nThe setHour() method set hours.\n\nSyntax:\n\aTime.setHour(int hour)\n@param hour: Required. int hour to be set.
_label_CDSJavaScript__Time__setMillisecond =JavaScript setMillisecond() Method\n\nDefinition and Usage:\n\nThe setMillisecond() method set milliseconds.\n\nSyntax:\n\aTime.setMillisecond(int millisecond)\n@param millisecond: Required. int millisecond to be set.
_label_CDSJavaScript__Time__setMinute =JavaScript setMinute() Method\n\nDefinition and Usage:\n\nThe setMinute() method set minute.\n\nSyntax:\n\aTime.setMinute(int minute)\n@param minute: Required. int minute to be set.
_label_CDSJavaScript__Time__setSecond =JavaScript setSecond() Method\n\nDefinition and Usage:\n\nThe setSecond() method set second.\n\nSyntax:\n\aTime.setSecond(int second)\n@param second: Required. int second to be set.
_label_CDSJavaScript__Time__setTime =JavaScript setTime() Method\n\nDefinition and Usage:\n\nThe setTime() method set time.\n\nSyntax:\n\aTime.setTime(int hour, int minute, int second, int millisecond/fractional)\n@param hour: Required. Hour to be set.\n@param minute: Required. Minute to be set.\n@param second: Required. Second to be set.\n@param millisecond/fractional: Optional.\n Millisecond/ Fractional to be set.
_label_CDSJavaScript__Time__toXMLFormat =JavaScript toXMLFormat() Method\n\nDefinition and Usage:\n\nThe toXMLFormat() method returns the lexical\n representation of this instance.\n\nSyntax:\n\aTime.toXMLFormat()\n@return String

#Datetime class
_label_CDSJavaScript__Datetime =JavaScript Datetime Object\n\nDatetime Object:\n\nThe Datetime object is used to work with \n Datetimes.
_label_CDSJavaScript__Datetime__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method adds duration to this instance.\n\nSyntax:\n\aDateTime.add(Duration duration)\n@param duration: Required. Duration to add\n to this Datetime
_label_CDSJavaScript__Datetime__clear =JavaScript clear() Method\n\nDefinition and Usage:\n\nThe clear() method unsets all fields to undefined.\n\nSyntax:\n\aDateTime.clear()
_label_CDSJavaScript__Datetime__compare =JavaScript compare() Method\n\nDefinition and Usage:\n\nThe compare() method compares two\n instances of Datetime.\n\nSyntax:\n\aDateTime.compare(Datetime)\n@return Integer\n@param Datetime: Required. Instance\n of Datetime to compare
_label_CDSJavaScript__Datetime__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method indicates whether\n parameter obj is "equal to" this one.\n\nSyntax:\n\aDateTime.equals(Object obj)\n@return Boolean\n@param obj: Required. obj to compare
_label_CDSJavaScript__Datetime__getDay =JavaScript getDay() Method\n\nDefinition and Usage:\n\nThe getDay() method returns day in month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getDay()\n@return Integer
_label_CDSJavaScript__Datetime__getFractionalSecond =JavaScript getFractionalSecond() Method\n\nDefinition and Usage:\n\nThe getFractionalSecond() method returns fractional seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getFractionalSecond()\n@return BigDecimal
_label_CDSJavaScript__Datetime__getHour =JavaScript getHour() Method\n\nDefinition and Usage:\n\nThe getHour() method returns hours or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getHour()\n@return Integer
_label_CDSJavaScript__Datetime__getMillisecond =JavaScript getMillisecond() Method\n\nDefinition and Usage:\n\nThe getMillisecond() method returns milliseconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getMillisecond()\n@return Integer
_label_CDSJavaScript__Datetime__getMinute =JavaScript getMinute() Method\n\nDefinition and Usage:\n\nThe getMinute() method returns minutes or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getMinute()\n@return Integer
_label_CDSJavaScript__Datetime__getMonth =JavaScript getMonth() Method\n\nDefinition and Usage:\n\nThe getMonth() method returns number of month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getMonth()\n@return Integer
_label_CDSJavaScript__Datetime__getSecond =JavaScript getSecond() Method\n\nDefinition and Usage:\n\nThe getSecond() method returns seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getSecond()\n@return Integer
_label_CDSJavaScript__Datetime__getTimezone =JavaScript getTimezone() Method\n\nDefinition and Usage:\n\nThe getTimezone() method returns timezone offset in minutes or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTime.getTimezone()\n@return Integer
_label_CDSJavaScript__Datetime__getYear =JavaScript getYear() Method\n\nDefinition and Usage:\n\nThe getYear() method returns low order\n component for XML Schema 1.0 dateTime\n datatype field for year.\n\nSyntax:\n\aDateTime.getYear()\n@return Integer
_label_CDSJavaScript__Datetime__setDay =JavaScript setDay() Method\n\nDefinition and Usage:\n\nThe setDay() method set days in month.\n\nSyntax:\n\aDateTime.setDay(int day)\n@param day: Required. int day to be set.
_label_CDSJavaScript__Datetime__setFractionalSecond =JavaScript setFractionalSecond() Method\n\nDefinition and Usage:\n\nThe setFractionalSecond() method set fractional seconds.\n\nSyntax:\n\aDateTime.setFractionalSecond(BigDecimal fractional)\n@param fractional: Required. value.
_label_CDSJavaScript__Datetime__setHour =JavaScript setHour() Method\n\nDefinition and Usage:\n\nThe setHour() method set hours.\n\nSyntax:\n\aDateTime.setHour(int hour)\n@param hour: Required. int hour to be set.
_label_CDSJavaScript__Datetime__setMillisecond =JavaScript setMillisecond() Method\n\nDefinition and Usage:\n\nThe setMillisecond() method set milliseconds.\n\nSyntax:\n\aDateTime.setMillisecond(int millisecond)\n@param millisecond: Required. int millisecond to be set.
_label_CDSJavaScript__Datetime__setMinute =JavaScript setMinute() Method\n\nDefinition and Usage:\n\nThe setMinute() method set minute.\n\nSyntax:\n\aDateTime.setMinute(minute)\n@param minute: Required. Minute to be set.
_label_CDSJavaScript__Datetime__setMonth =JavaScript setMonth() Method\n\nDefinition and Usage:\n\nThe setMonth() method set minute.\n\nSyntax:\n\aDateTime.setMonth(int month)\n@param month: Required. int month to be set.
_label_CDSJavaScript__Datetime__setSecond =JavaScript setSecond() Method\n\nDefinition and Usage:\n\nThe setSecond() method set second.\n\nSyntax:\n\aDateTime.setSecond(int second)\n@param second: Required. int second to be set.
_label_CDSJavaScript__Datetime__setTime =JavaScript setTime() Method\n\nDefinition and Usage:\n\nThe setTime() method set time.\n\nSyntax:\n\aDateTime.setTime(int hour, int minute,int second, int millisecond/fractional)\n@param hour: Required. Hour to be set.\n@param minute: Required. Minute to be set.\n@param second: Required. Second to be set.\n@param millisecond/fractional: Optional.\n Millisecond/ Fractional to be set.
_label_CDSJavaScript__Datetime__setTimezone =JavaScript setTimezone() Method\n\nDefinition and Usage:\n\nThe setTimezone() method set timezone offset.\n\nSyntax:\n\aDateTime.setTimezone(int offset)\n@param offset: Required. Offset to be set.
_label_CDSJavaScript__Datetime__setYear =JavaScript setYear() Method\n\nDefinition and Usage:\n\nThe setYear() method set year.\n\nSyntax:\n\aDateTime.setYear(BigInteger year)\n@param year: Required. int year to be set.
_label_CDSJavaScript__Datetime__toXMLFormat =JavaScript toXMLFormat() Method\n\nDefinition and Usage:\n\nThe toXMLFormat() method returns the lexical\n representation of this instance.\n\nSyntax:\n\aDateTime.toXMLFormat()\n@return String

#Datetimetz class
_label_CDSJavaScript__Datetimetz =JavaScript Datetimetz Object\n\nDatetimetz Object:\n\nThe Datetimetz object is used to work with \n Datetimetzs.
_label_CDSJavaScript__Datetimetz__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method adds duration to this instance.\n\nSyntax:\n\aDateTimetz.add(Duration duration)\n@param duration: Required. Duration to add\n to this Datetimetz
_label_CDSJavaScript__Datetimetz__clear =JavaScript clear() Method\n\nDefinition and Usage:\n\nThe clear() method unsets all fields to undefined.\n\nSyntax:\n\aDateTimetz.clear()
_label_CDSJavaScript__Datetimetz__compare =JavaScript compare() Method\n\nDefinition and Usage:\n\nThe compare() method compares two\n instances of Datetimetz.\n\nSyntax:\n\aDateTimetz.compare(Datetimetz)\n@return Integer\n@param Datetimetz: Required. Instance\n of Datetimetz to compare
_label_CDSJavaScript__Datetimetz__equals =JavaScript equals() Method\n\nDefinition and Usage:\n\nThe equals() method indicates whether\n parameter obj is "equal to" this one.\n\nSyntax:\n\aDateTimetz.equals(Object obj)\n@return Boolean\n@param obj: Required. obj to compare
_label_CDSJavaScript__Datetimetz__getDay =JavaScript getDay() Method\n\nDefinition and Usage:\n\nThe getDay() method returns day in month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getDay()\n@return Integer
_label_CDSJavaScript__Datetimetz__getFractionalSecond =JavaScript getFractionalSecond() Method\n\nDefinition and Usage:\n\nThe getFractionalSecond() method returns fractional seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getFractionalSecond()\n@return BigDecimal
_label_CDSJavaScript__Datetimetz__getHour =JavaScript getHour() Method\n\nDefinition and Usage:\n\nThe getHour() method returns hours or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getHour()\n@return Integer
_label_CDSJavaScript__Datetimetz__getMillisecond =JavaScript getMillisecond() Method\n\nDefinition and Usage:\n\nThe getMillisecond() method returns miliseconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getMillisecond()\n@return Integer
_label_CDSJavaScript__Datetimetz__getMinute =JavaScript getMinute() Method\n\nDefinition and Usage:\n\nThe getMinute() method returns minutes or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getMinute()\n@return Integer
_label_CDSJavaScript__Datetimetz__getMonth =JavaScript getMonth() Method\n\nDefinition and Usage:\n\nThe getMonth() method returns number of month or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getMonth()\n@return Integer
_label_CDSJavaScript__Datetimetz__getSecond =JavaScript getSecond() Method\n\nDefinition and Usage:\n\nThe getSecond() method returns seconds or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getSecond()\n@return Integer
_label_CDSJavaScript__Datetimetz__getTimezone =JavaScript getTimezone() Method\n\nDefinition and Usage:\n\nThe getTimezone() method returns timezone offset in minutes or DatatypeConstants.FIELD_UNDEFINED.\n\nSyntax:\n\aDateTimetz.getTimezone()\n@return Integer
_label_CDSJavaScript__Datetimetz__getYear =JavaScript getYear() Method\n\nDefinition and Usage:\n\nThe getYear() method returns low order\n component for XML Schema 1.0 dateTime\n datatype field for year.\n\nSyntax:\n\aDateTimetz.getYear()\n@return Integer
_label_CDSJavaScript__Datetimetz__setDay =JavaScript setDay() Method\n\nDefinition and Usage:\n\nThe setDay() method set days in month.\n\nSyntax:\n\aDateTimetz.setDay(int day)\n@param day: Required. int day to be set.
_label_CDSJavaScript__Datetimetz__setFractionalSecond =JavaScript setFractionalSecond() Method\n\nDefinition and Usage:\n\nThe setFractionalSecond() method set fractional seconds.\n\nSyntax:\n\aDateTimetz.setFractionalSecond(BigDecimal fractional)\n@param fractional: Required. value.
_label_CDSJavaScript__Datetimetz__setHour =JavaScript setHour() Method\n\nDefinition and Usage:\n\nThe setHour() method set hours.\n\nSyntax:\n\aDateTimetz.setHour(int hour)\n@param hour: Required. int hour to be set.
_label_CDSJavaScript__Datetimetz__setMillisecond =JavaScript setMillisecond() Method\n\nDefinition and Usage:\n\nThe setMillisecond() method set milliseconds.\n\nSyntax:\n\aDateTimetz.setMillisecond(int millisecond)\n@param millisecond: Required. int millisecond to be set.
_label_CDSJavaScript__Datetimetz__setMinute =JavaScript setMinute() Method\n\nDefinition and Usage:\n\nThe setMinute() method set minute.\n\nSyntax:\n\aDateTimetz.setMinute(int minute)\n@param minute: Required. int minute to be set.
_label_CDSJavaScript__Datetimetz__setMonth =JavaScript setMonth() Method\n\nDefinition and Usage:\n\nThe setMonth() method set minute.\n\nSyntax:\n\aDateTimetz.setMonth(int month)\n@param month: Required. int month to be set.
_label_CDSJavaScript__Datetimetz__setSecond =JavaScript setSecond() Method\n\nDefinition and Usage:\n\nThe setSecond() method set second.\n\nSyntax:\n\aDateTimetz.setSecond(int second)\n@param second: Required. int second to be set.
_label_CDSJavaScript__Datetimetz__setTime =JavaScript setTime() Method\n\nDefinition and Usage:\n\nThe setTime() method set time.\n\nSyntax:\n\aDateTimetz.setTime(int hour, int minute, int second, int millisecond/fractional)\n@param hour: Required. Hour to be set.\n@param minute: Required. Minute to be set.\n@param second: Required. Second to be set.\n@param millisecond/fractional: Optional.\n Millisecond/ Fractional to be set.
_label_CDSJavaScript__Datetimetz__setTimezone =JavaScript setTimezone() Method\n\nDefinition and Usage:\n\nThe setTimezone() method set timezone.\n\nSyntax:\n\aDateTimetz.setTimezone(int offset)\n@param offset: Required. Offset to be set.
_label_CDSJavaScript__Datetimetz__setYear =JavaScript setYear() Method\n\nDefinition and Usage:\n\nThe setYear() method set year.\n\nSyntax:\n\aDateTimetz.setYear(BigInteger year)\n@param year: Required. Year to be set.
_label_CDSJavaScript__Datetimetz__toXMLFormat =JavaScript toXMLFormat() Method\n\nDefinition and Usage:\n\nThe toXMLFormat() method returns the lexical\n representation of this instance.\n\nSyntax:\n\aDateTimetz.toXMLFormat()\n@return String


#DataTypeConstants

_label_CDSJavaScript__DatatypeConstants__EQUAL =JavaScript EQUAL Property\n\nDefinition and Usage:\n\nComparison result.\n\nSyntax:\n\DataTypeConstants.EQUAL\n@return Integer
_label_CDSJavaScript__DatatypeConstants__LESSER =JavaScript LESSER Property\n\nDefinition and Usage:\n\nComparison result.\n\nSyntax:\n\DataTypeConstants.LESSER\n@return Integer
_label_CDSJavaScript__DatatypeConstants__GREATER =JavaScript GREATER Property\n\nDefinition and Usage:\n\nComparison result.\n\nSyntax:\n\DataTypeConstants.GREATER\n@return Integer
_label_CDSJavaScript__DatatypeConstants__INDETERMINATE =JavaScript INDETERMINATE Property\n\nDefinition and Usage:\n\nComparison result.\n\nSyntax:\n\DataTypeConstants.INDETERMINATE\n@return Integer
_label_CDSJavaScript__DatatypeConstants__FIELD_UNDEFINED =JavaScript FIELD_UNDEFINED Property\n\nDefinition and Usage:\n\nDesignation that an "int" field is not set.\n\nSyntax:\n\DataTypeConstants.FIELD_UNDEFINED\n@return Integer

#bom.Object
_label_CDSJavaScript__bomObject__clear =JavaScript clear() Method\n\nDefinition and Usage:\n\nThe clear() method clears the data currently stored.\n\nSyntax:\n\aBomObject.clear().
_label_CDSJavaScript__bomObject__add =JavaScript add() Method\n\nDefinition and Usage:\n\nThe add() method adds data to the current object.\n\nSyntax:\n\aBomObject.add(bdsObject).\n@param bdsObject: Required. The bdsObject to add.

#Global Methods
_label_CDSJavaScript__GlobalMethods = Global Methods
_label_CDSJavaScript__GlobalMethods__setContextVariable =JavaScript setContextVariable() Method\n\nDefinition and Usage:\n\nThe setContextVariable() method sets value of specified\n context variable.\n\nSyntax:\n\nsetContextVariable(varName, data)\n@param varName: Required. Name of variable to set\n@param data: Required. Current value of variable - may be NULL
_label_CDSJavaScript__GlobalMethods__getContextVariable =JavaScript getContextVariable() Method\n\nDefinition and Usage:\n\nThe getContextVariable() method gets current value of specified\n context variable.\n\nSyntax:\n\ngetContextVariable(varName, className)\n@param varName: Required. Name of variable to get\n@param className: Required. Expected class name of variable\n@return bom.Class - may be NULL

#DataUtil class
_label_CDSJavaScript__DataUtil=JavaScript DataUtil Factory\n\nDataUtil Factory:\n\nFactory for the creation and\n access of certain functions
_label_CDSJavaScript__DataUtil__createList=JavaScript createList() Method\n\nDefinition and Usage:\n\nThe createList() method creates a new List object.\n\nSyntax:\n\DataUtil.createList()\n@return List\n\n@param None.
#_label_DataUtil__DataUtil__createCriteria=JavaScript createCriteria() Method\n\nDefinition and Usage:\n\nThe createCriteria() method creates a new Criteria object.\n\nSyntax:\n\DataUtil.createCriteria(string)\n@return Criteria\n@param string: Required. The DQL string to create the criteria.
#_label_DataUtil__DataUtil__createCriteria2=JavaScript createCriteria() Method\n\nDefinition and Usage:\n\nThe createCriteria() method creates a new Criteria object.\n\nSyntax:\n\DataUtil.createCriteria(string, int, int)\n@return Criteria\n@param string: Required. The DQL string to create the criteria. \n@param int: required. The zero based start index. \n@param int: required. The page size.

#Criteria class
_label_CDSJavaScript__Criteria=JavaScript Criteria Object\n\nCriteria Object:\n\nCriteria object specifies DQL query string
_label_CDSJavaScript__Criteria__startPosition=JavaScript startPosition Attribute\n\nThe index of item to read first\n\nSyntax:\naCriteria.startIndex
_label_CDSJavaScript__Criteria__pageSize=JavaScript pageSize Attribute\n\nThe number of items to return. -1 means fetch all.\n\nSyntax:\naCriteria.pageSize
_label_CDSJavaScript__Criteria__getQuery=JavaScript getQuery() Method\n\nDefinition and Usage:\n\nReturns the DQL query string.\n\nSyntax:\naCriteria.getQuery()
_label_CDSJavaScript__Criteria__setQueryParameter__String__Object__Criteria = JavaScript setQueryParameter() Method\n\nDefinition and Usage:\nThe setQueryParameter() method assigns a value to the\nnamed parameter that appears in the query string.\n\nSyntax:\nCriteria.setQueryParameter(String paramName, Object value)zn\n@param paramName: Identifies the DQL query parameter to set.\n@param value : Value of parameter (must be simple type\n              or enumeration).\n\n@return Criteria
_label_CDSJavaScript__Criteria__setQueryParameter__String__Object[]__Criteria = JavaScript setQueryParameter() Method\n\nDefinition and Usage:\nThe setQueryParameter() method assigns a multiple values to the\nnamed parameter that appears in the query string.\n\nSyntax:\nCriteria.setQueryParameter(String paramName, Object[] values)zn\n@param paramName: Identifies the DQL query parameter to set.\n@param values : Values of parameter (must be simple type\n              or enumeration list).\n\n@return Criteria

#PaginatedList class
_label_CDSJavaScript__PaginatedList =JavaScript PaginatedList Object\n\nPaginatedList Object:\n\nAn ordered collection (also known as a sequence).