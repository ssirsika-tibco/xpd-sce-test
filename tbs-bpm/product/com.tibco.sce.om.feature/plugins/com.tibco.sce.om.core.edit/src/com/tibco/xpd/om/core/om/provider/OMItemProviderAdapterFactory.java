/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.tibco.xpd.om.core.om.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.Disposable;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.tibco.xpd.om.core.om.util.OMAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * @generated
 */
public class OMItemProviderAdapterFactory extends OMAdapterFactory implements
        ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement
     * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    protected Disposable disposable = new Disposable();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     * 
     * @generated
     */
    public OMItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.OrgUnit} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected OrgUnitItemProvider orgUnitItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.OrgUnit}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrgUnitAdapter() {
        if (orgUnitItemProvider == null) {
            orgUnitItemProvider = new OrgUnitItemProvider(this);
        }

        return orgUnitItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.DynamicOrgUnit} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DynamicOrgUnitItemProvider dynamicOrgUnitItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.DynamicOrgUnit}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDynamicOrgUnitAdapter() {
        if (dynamicOrgUnitItemProvider == null) {
            dynamicOrgUnitItemProvider = new DynamicOrgUnitItemProvider(this);
        }

        return dynamicOrgUnitItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.DynamicOrgReference} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DynamicOrgReferenceItemProvider dynamicOrgReferenceItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.DynamicOrgReference}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDynamicOrgReferenceAdapter() {
        if (dynamicOrgReferenceItemProvider == null) {
            dynamicOrgReferenceItemProvider =
                    new DynamicOrgReferenceItemProvider(this);
        }

        return dynamicOrgReferenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.Position} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected PositionItemProvider positionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Position}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPositionAdapter() {
        if (positionItemProvider == null) {
            positionItemProvider = new PositionItemProvider(this);
        }

        return positionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.Location} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected LocationItemProvider locationItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Location}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLocationAdapter() {
        if (locationItemProvider == null) {
            locationItemProvider = new LocationItemProvider(this);
        }

        return locationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.Capability} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected CapabilityItemProvider capabilityItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Capability}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCapabilityAdapter() {
        if (capabilityItemProvider == null) {
            capabilityItemProvider = new CapabilityItemProvider(this);
        }

        return capabilityItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.Group} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GroupItemProvider groupItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Group}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGroupAdapter() {
        if (groupItemProvider == null) {
            groupItemProvider = new GroupItemProvider(this);
        }

        return groupItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.Organization} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OrganizationItemProvider organizationItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Organization}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrganizationAdapter() {
        if (organizationItemProvider == null) {
            organizationItemProvider = new OrganizationItemProvider(this);
        }

        return organizationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.DynamicOrgIdentifier} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DynamicOrgIdentifierItemProvider dynamicOrgIdentifierItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.DynamicOrgIdentifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDynamicOrgIdentifierAdapter() {
        if (dynamicOrgIdentifierItemProvider == null) {
            dynamicOrgIdentifierItemProvider =
                    new DynamicOrgIdentifierItemProvider(this);
        }

        return dynamicOrgIdentifierItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.AttributeValue} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected AttributeValueItemProvider attributeValueItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.AttributeValue}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeValueAdapter() {
        if (attributeValueItemProvider == null) {
            attributeValueItemProvider = new AttributeValueItemProvider(this);
        }

        return attributeValueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.Attribute} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected AttributeItemProvider attributeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Attribute}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeAdapter() {
        if (attributeItemProvider == null) {
            attributeItemProvider = new AttributeItemProvider(this);
        }

        return attributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.OrganizationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OrganizationTypeItemProvider organizationTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.OrganizationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrganizationTypeAdapter() {
        if (organizationTypeItemProvider == null) {
            organizationTypeItemProvider =
                    new OrganizationTypeItemProvider(this);
        }

        return organizationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.OrgUnitType} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected OrgUnitTypeItemProvider orgUnitTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.OrgUnitType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrgUnitTypeAdapter() {
        if (orgUnitTypeItemProvider == null) {
            orgUnitTypeItemProvider = new OrgUnitTypeItemProvider(this);
        }

        return orgUnitTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.PositionType} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected PositionTypeItemProvider positionTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.PositionType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPositionTypeAdapter() {
        if (positionTypeItemProvider == null) {
            positionTypeItemProvider = new PositionTypeItemProvider(this);
        }

        return positionTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.OrgUnitFeature} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected OrgUnitFeatureItemProvider orgUnitFeatureItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.OrgUnitFeature}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrgUnitFeatureAdapter() {
        if (orgUnitFeatureItemProvider == null) {
            orgUnitFeatureItemProvider = new OrgUnitFeatureItemProvider(this);
        }

        return orgUnitFeatureItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.PositionFeature} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected PositionFeatureItemProvider positionFeatureItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.PositionFeature}.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPositionFeatureAdapter() {
        if (positionFeatureItemProvider == null) {
            positionFeatureItemProvider = new PositionFeatureItemProvider(this);
        }

        return positionFeatureItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.OrgUnitRelationship} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected OrgUnitRelationshipItemProvider orgUnitRelationshipItemProvider;

    /**
     * This creates an adapter for a
     * {@link com.tibco.xpd.om.core.om.OrgUnitRelationship}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createOrgUnitRelationshipAdapter() {
        if (orgUnitRelationshipItemProvider == null) {
            orgUnitRelationshipItemProvider =
                    new OrgUnitRelationshipItemProvider(this);
        }

        return orgUnitRelationshipItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.OrgUnitRelationshipType} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected OrgUnitRelationshipTypeItemProvider orgUnitRelationshipTypeItemProvider;

    /**
     * This creates an adapter for a
     * {@link com.tibco.xpd.om.core.om.OrgUnitRelationshipType}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createOrgUnitRelationshipTypeAdapter() {
        if (orgUnitRelationshipTypeItemProvider == null) {
            orgUnitRelationshipTypeItemProvider =
                    new OrgUnitRelationshipTypeItemProvider(this);
        }

        return orgUnitRelationshipTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.CapabilityCategory} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected CapabilityCategoryItemProvider capabilityCategoryItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.CapabilityCategory}.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCapabilityCategoryAdapter() {
        if (capabilityCategoryItemProvider == null) {
            capabilityCategoryItemProvider =
                    new CapabilityCategoryItemProvider(this);
        }

        return capabilityCategoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.LocationType} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected LocationTypeItemProvider locationTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.LocationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLocationTypeAdapter() {
        if (locationTypeItemProvider == null) {
            locationTypeItemProvider = new LocationTypeItemProvider(this);
        }

        return locationTypeItemProvider;
    }

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.OrgModel}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrgModelAdapter() {
        return new OrgModelItemProvider(this);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.EnumValue} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected EnumValueItemProvider enumValueItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.EnumValue}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEnumValueAdapter() {
        if (enumValueItemProvider == null) {
            enumValueItemProvider = new EnumValueItemProvider(this);
        }

        return enumValueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.Privilege} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected PrivilegeItemProvider privilegeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Privilege}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPrivilegeAdapter() {
        if (privilegeItemProvider == null) {
            privilegeItemProvider = new PrivilegeItemProvider(this);
        }

        return privilegeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.CapabilityAssociation} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected CapabilityAssociationItemProvider capabilityAssociationItemProvider;

    /**
     * This creates an adapter for a
     * {@link com.tibco.xpd.om.core.om.CapabilityAssociation}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createCapabilityAssociationAdapter() {
        if (capabilityAssociationItemProvider == null) {
            capabilityAssociationItemProvider =
                    new CapabilityAssociationItemProvider(this);
        }

        return capabilityAssociationItemProvider;
    }

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.OrgMetaModel}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrgMetaModelAdapter() {
        return new OrgMetaModelItemProvider(this);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link com.tibco.xpd.om.core.om.PrivilegeAssociation} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected PrivilegeAssociationItemProvider privilegeAssociationItemProvider;

    /**
     * This creates an adapter for a
     * {@link com.tibco.xpd.om.core.om.PrivilegeAssociation}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createPrivilegeAssociationAdapter() {
        if (privilegeAssociationItemProvider == null) {
            privilegeAssociationItemProvider =
                    new PrivilegeAssociationItemProvider(this);
        }

        return privilegeAssociationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.PrivilegeCategory} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PrivilegeCategoryItemProvider privilegeCategoryItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.PrivilegeCategory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPrivilegeCategoryAdapter() {
        if (privilegeCategoryItemProvider == null) {
            privilegeCategoryItemProvider =
                    new PrivilegeCategoryItemProvider(this);
        }

        return privilegeCategoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.ResourceType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ResourceTypeItemProvider resourceTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.ResourceType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createResourceTypeAdapter() {
        if (resourceTypeItemProvider == null) {
            resourceTypeItemProvider = new ResourceTypeItemProvider(this);
        }

        return resourceTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.Resource} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ResourceItemProvider resourceItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.Resource}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createResourceAdapter() {
        if (resourceItemProvider == null) {
            resourceItemProvider = new ResourceItemProvider(this);
        }

        return resourceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.ResourceAssociation} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ResourceAssociationItemProvider resourceAssociationItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.ResourceAssociation}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createResourceAssociationAdapter() {
        if (resourceAssociationItemProvider == null) {
            resourceAssociationItemProvider =
                    new ResourceAssociationItemProvider(this);
        }

        return resourceAssociationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.OrgQuery} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OrgQueryItemProvider orgQueryItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.OrgQuery}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrgQueryAdapter() {
        if (orgQueryItemProvider == null) {
            orgQueryItemProvider = new OrgQueryItemProvider(this);
        }

        return orgQueryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.om.core.om.SystemAction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SystemActionItemProvider systemActionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.om.core.om.SystemAction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSystemActionAdapter() {
        if (systemActionItemProvider == null) {
            systemActionItemProvider = new SystemActionItemProvider(this);
        }

        return systemActionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory
                .getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(
            ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>)
                    || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
     * <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * @generated
     */
    @Override
    protected void associate(Adapter adapter, Notifier target) {
        super.associate(adapter, target);
        if (adapter != null) {
            disposable.add(adapter);
        }
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to
     * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void dispose() {
        disposable.dispose();
    }

}
