<%@ jet 
     package="com.tibco.xpd.openspacegwtgadget.samples.jetemitters" 
     class="OpenspaceProcessViewGadgetEmitter"
     imports="java.util.Map" 
%>
<%/* 
     * The argument parameter passed to the generate() method will be a 
     * Map<String,String> with (at least) the properties "sampleName", "sampleLabel" and "packageName"
     * And any additional properties you add to map via AdditionalWizardPage contributions.
     */ %> 
<% Map<String,String> variableProperties = (Map<String,String>)argument; %>
<%/* Make package the one that is selected by user in Create Sample Wizard */ %>
package <%=variableProperties.get("packageName")%>.client;

/** 
The Sample Gadget example is supplied "as is" with no warranties. The code in <%=variableProperties.get("sampleName")%> is intended
as a simple illustration of the concepts and techniques needed to develop a custom gadget application.
It is not intended as a basis for production-ready code and should not be used as such. 
Any references to any third party software in the code is not under our control and we can offer no warranties
*/
import java.util.ArrayList;
import java.util.HashSet;

import com.google.gwt.core.client.Callback;
import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.core.client.ScriptInjector;
import com.google.gwt.core.client.ScriptInjector.FromUrl;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.gadgets.client.Gadget;
import com.google.gwt.gadgets.client.UserPreferences;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.Frame;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootLayoutPanel;
import com.google.gwt.user.client.ui.ScrollPanel;
import com.google.gwt.user.client.ui.TabPanel;
import com.google.gwt.user.client.ui.TextArea;
import com.google.gwt.user.client.ui.Tree;
import com.google.gwt.user.client.ui.TreeItem;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.tibco.bpm.web.client.model.managedevents.LocaleChangedEvent;
import com.tibco.bpm.web.client.model.managedevents.LocaleChangedEventHandler;
import com.tibco.bpm.web.client.model.managedevents.LoginEvent;
import com.tibco.bpm.web.client.model.managedevents.LoginEventHandler;
import com.tibco.bpm.web.client.model.pagebus.hub.ManagedEvent;
import com.tibco.bpm.web.client.model.pagebus.hub.ManagedEventClient;
import com.tibco.bpm.web.client.model.types.ManagedId;
import com.tibco.bpm.web.client.model.types.OrgModelEntity;
import com.tibco.bpm.web.client.model.types.WorkItem;
import com.tibco.bpm.web.client.model.types.WorkListItem;
import com.tibco.bpm.web.client.services.actions.orgmodel.OpenOrgModel;
import com.tibco.bpm.web.client.services.results.OrgModelEntityResult;
import com.tibco.bpm.web.client.services.utils.BPMWebClientService;
import com.tibco.openspace.basegadget.client.ClientConstants;
import com.tibco.openspace.basegadget.client.FormRenderer;
import com.tibco.openspace.basegadget.client.Logger;
import com.tibco.openspace.basegadget.client.OSSTyles;

/**
 * Openspace Gadget: <%=variableProperties.get("sampleLabel")%>
 *
 * Entry point classes define <code>onModuleLoad()</code>.
 *
 * Extra Properties (from AdditionalWizardPage contribution):  
 *     From Text Control On Extra Property Page:         <%=variableProperties.get("extraProperty")%>
 *     From Radio Btn Choice On 2nd Extra Property Page: <%=variableProperties.get("radioProperty")%>
 */
 <%/* Make Sample Name the one that is selected by user in Create Sample Wizard */ %>
@com.google.gwt.gadgets.client.Gadget.ModulePrefs(title = "<%=variableProperties.get("sampleName")%>", description = "OpenspaceWork Process View Gadget Example", author = "Tibco Software", author_email = "openspace@tibco.com")
@com.google.gwt.gadgets.client.Gadget.UseLongManifestName(false)
@com.google.gwt.gadgets.client.Gadget.AllowHtmlQuirksMode(false)
public class <%=variableProperties.get("sampleName")%> extends Gadget<UserPreferences> 
{

	private TestGadgetManagedEventClient	testGadgetManagedEventClient;

	/**
	 * The message displayed to the user when the server cannot be reached or
	 * returns an error.
	 */
	private FlexTable						workList			= null;

	private VerticalPanel					formPanel			= null;

	private ArrayList<WorkListItem>			currentResult		= null;

	private int								lastSelectedRow		= 0;

	private Tree							orgModelTree		= new Tree();

	private WorkItem						openItem			= null;

	private TabPanel						tabs;

	private TextArea						textArea;

	private Label							lastUpdatedLabel;

	private Label							frameLabel;

	private Frame							frame;

	private String							userId				= ClientConstants.USER_ID;

	private DateTimeFormat					dateTimeFormat		= DateTimeFormat.getFormat("yyyyMMdd:HH:mm:ss");

	/**@GVS 
	 * currently setting the location of the bpm from the launch gadget page URL
	 */
	protected static final String			SERVICE_LOCATION	= Window.Location.getProtocol() + "//"
																		+ Window.Location.getHost() + "/"
																		+ ClientConstants.BPM_CONTEXT;

	private FormRenderer					renderer;

	//	protected static final String			PAGEBUS_JS_LOCATION	= "http://127.0.0.1:9090/testgadget/testgadget/PageBus.js";
	
	
	/**This should be the location of the pagebus js file which will be from the same location where test gadget xml is loaded.Ensure that the path
	 * is appropriately set, otherwise gadget fails to load*/

	protected static final String			PAGEBUS_JS_LOCATION	= Window.Location.getProtocol() + "//"
																		+ Window.Location.getHost()
																		+"/openspace"
																		+ "/sample/PageBus.js";

	protected static final String			FILE_LAST_UPDATED	= "20121116:2030";

	private HashSet<String>					localFiredEventKeys	= new HashSet<String>();

	// Set the location of the AMX BPM server.
	// This location is used for all subsequent Action calls executed by BPMWebClientService
	private void setServiceLocation()
	{
		BPMWebClientService.setServiceLocation(SERVICE_LOCATION);
	}

	public void init(UserPreferences up)
	{
		/**@GVS Currently this is limitation of dynamically inserting script url of forms cache using DHTML
				it has to be statically inserted into the gadget xml with the absolute url
		*/

		setServiceLocation();
		loadPageBus();
	}

	/*
	 * =====================================================
	 * METHOD : loadPageBus
	 * =====================================================
	 */
	/**
	 * The PageBus.js file must be loaded and injected because it cannot be
	 * loaded via the TestGadget.gwt.xml module script tag:
	 * <p/>
	 * <code>
	 *     &lt;script src="PageBus.js" /&gt;
	 * <code/>
	 * <p/>
	 * The Cross-Site-Iframe linker does not support &lt;script&gt; tags in the gwt.xml files.
	 */
	private void loadPageBus()
	{
		FromUrl fromUrl = ScriptInjector.fromUrl(PAGEBUS_JS_LOCATION);
		fromUrl.setCallback(new Callback<Void, Exception>()
		{
			public void onFailure(Exception reason)
			{
				Window.alert("Script load failed for: " + PAGEBUS_JS_LOCATION);
			}

			public void onSuccess(Void result)
			{
				buildLayout();
				// Check for URL param nohub and load as ManagedEventClient if absent.
				if (testForOpenAjax())
				{
					if (!Window.Location.getHref().contains("nohub"))
					{
						//Window.alert("About to connect the iframe.");
						testGadgetManagedEventClient = new TestGadgetManagedEventClient("test");
					}

				}
				else
				{
					Window.alert("ManagedEventClient cannot load because $wnd.OpenAjax is undefined.");
				}
			}
		});

		// If setWindow is not called with the correct $wnd returned from the
		// getReferencedWindow() JSNI method below then the PageBus code is
		// not injected on the correct window and the subsequent
		// ManagedEventClient calls will fail with $wnd.OpenAjax is undefined.

		fromUrl.setWindow(getReferencedWindow());
		fromUrl.inject();
	}

	/*
	 * =====================================================
	 * METHOD : getReferencedWindow
	 * =====================================================
	 */
	/**
	 * Returns the correctly referenced nested frame window that the GWT compiled
	 * script runs in.  See the GWT document at:
	 * <p/>
	 *     https://developers.google.com/web-toolkit/doc/latest/DevGuideCodingBasicsJSNI
	 * <p/>
	 *   When accessing the browser's window and document objects from JSNI, you must 
	 *   reference them as $wnd and $doc, respectively. Your compiled script runs in a
	 *   nested frame, and $wnd and $doc are automatically initialized to correctly refer
	 *   to the host page's window and document.
	 *   
	 * @return The correctly referenced nested frame window.
	 */
	public native JavaScriptObject getReferencedWindow()
	/*-{
		return $wnd;
	}-*/;

	/*
	 * =====================================================
	 * METHOD : testForOpenAjax
	 * =====================================================
	 */
	/**
	 * Test that the PageBus.js file has been loaded by verifying that the
	 * $wnd.OpenAjax property is initialized.
	 *
	 * @return true if $wnd.OpenAjax is not undefined.
	 */
	public native boolean testForOpenAjax()
	/*-{
		return $wnd.OpenAjax != undefined;
	}-*/;

	/**
	 * @GVS
	 * This layout is currently built using GWT standard widgets through the code,we can always use UI binder as the layout strategy
	 */
	private void buildLayout()
	{
		tabs = new TabPanel();
		tabs.setStyleName(OSSTyles.OSP_TABPANEL);
		VerticalPanel workListPanel = new VerticalPanel();

		workListPanel.setStyleName(OSSTyles.OSP_WORKLISTPANEL);
		VerticalPanel orgModelPanel = new VerticalPanel();
		orgModelPanel.setStyleName(OSSTyles.OSP_ORG_MODEL_PANEL);
		VerticalPanel messagePanel = new VerticalPanel();
		VerticalPanel actionPanel = new VerticalPanel();

		ScrollPanel workListScrollPanel = new ScrollPanel(workListPanel);

		tabs.add(workListScrollPanel, ClientConstants.WORK_LIST);
		tabs.add(orgModelPanel, ClientConstants.ORG_MODEL);
		tabs.add(messagePanel, ClientConstants.MESSAGES);
		tabs.add(actionPanel, ClientConstants.ACTIONS);

		textArea = new TextArea();
		textArea.setHeight("430px");
		textArea.setWidth("100%");
		messagePanel.add(textArea);

		frameLabel = new Label();
		frameLabel.setStyleName(OSSTyles.OSP_TABPANEL);
		lastUpdatedLabel = new Label("Last Updated: " + FILE_LAST_UPDATED);
		frame = new Frame();
		frame.setHeight("390px");
		frame.setWidth("100%");
		actionPanel.add(lastUpdatedLabel);
		actionPanel.add(frameLabel);
		actionPanel.add(frame);

		RootLayoutPanel.get().add(tabs);
		RootLayoutPanel.get().setStyleName(OSSTyles.OSP_CONTAINER);

		HorizontalPanel orgButtonPanel = new HorizontalPanel();
		Button getOrgModel = new Button(ClientConstants.GET_ORG_MODEL);
		orgButtonPanel.add(getOrgModel);
		orgButtonPanel.setStyleName(OSSTyles.OSP_ORGMODEL_TOOLBAR);
		orgModelTree = new Tree();

		orgModelPanel.add(orgButtonPanel);
		orgModelPanel.add(orgModelTree);

		getOrgModel.addClickHandler(new ClickHandler()
		{
			@Override
			public void onClick(ClickEvent event)
			{
				getOrgModel();
			}
		});

		workList = new FlexTable();
		formPanel = new VerticalPanel();
		formPanel.getElement().setId("form-container");
		formPanel.setWidth("100%");
		formPanel.setHeight("100px");
		workList.setStyleName(OSSTyles.OSP_DATATABLE);
		Button getWorkList = new Button(ClientConstants.GET_WORK_LIST);
		Button open = new Button(ClientConstants.OPEN_BUTTON);
		Button close = new Button(ClientConstants.CLOSE_BUTTON);
		Button complete = new Button(ClientConstants.COMPLETE_BUTTON);
		Button cancel = new Button(ClientConstants.CANCEL_BUTTON);
		Button pend = new Button(ClientConstants.PEND_BUTTON);
		Button allocate = new Button(ClientConstants.ALLOCATE_BUTTON);
		Button reoffer = new Button(ClientConstants.REOFFER_BUTTON);

		

		orgModelTree.setStyleName(OSSTyles.OSP_TREE);
	}



	private void getOrgModel()
	{
		BPMWebClientService.getInstance().execute(new OpenOrgModel(-1, false),
				new AsyncCallback<OrgModelEntityResult>()
				{
					@Override
					public void onFailure(Throwable caught)
					{
						Logger.error("Error: " + caught.getMessage());
					}

					@Override
					public void onSuccess(OrgModelEntityResult result)
					{
						orgModelTree.clear();
						if (result != null && result.getEntities() != null)
						{
							for (OrgModelEntity entity : result.getEntities())
							{
								TreeItem item = new TreeItem(entity.getName());
								addChildren(item, entity.getChildren());

								orgModelTree.addItem(item);
							}
						}
					}
				});
	}

	private void addChildren(TreeItem item, ArrayList<OrgModelEntity> children)
	{
		if (children != null)
		{
			for (OrgModelEntity child : children)
			{
				TreeItem childItem = item.addItem(child.getName());
				if (child.getChildren() != null)
				{
					addChildren(childItem, child.getChildren());
				}
			}
		}
	}

	private ManagedId toManagedObject(WorkListItem item)
	{
		ManagedId id = new ManagedId();
		id.setId(item.getId());
		id.setVersion(item.getVersion());
		return id;
	}

	private ManagedId toManagedObject(WorkItem item)
	{
		ManagedId id = new ManagedId();
		id.setId(item.getId());
		id.setVersion(item.getVersion());
		return id;
	}

	private class TestGadgetManagedEventClient extends ManagedEventClient
	{

		public TestGadgetManagedEventClient(String clientName)
		{
			super(clientName);
		}

		@Override
		public void addEvents()
		{
			HashSet<ManagedEvent< ? >> managedEvents = new HashSet<ManagedEvent< ? >>();

			// Create ManageEvent for the Openspace fired event.
			managedEvents.add((ManagedEvent< ? >) LoginEvent.create());
			managedEvents.add((ManagedEvent< ? >) LocaleChangedEvent.create());

			for (ManagedEvent< ? > event : managedEvents)
			{
				event.setCacheEnabled(true);
				addEvent(event);
			}

		}

		@Override
		public void addHandlers()
		{
			// Add a handler for the TestGadget fired ManagedEvent.

			
			// Add a handler for the Openspace fired ManagedEvent.

			addHandler(LoginEvent.TYPE, new LoginEventHandler()
			{
				@Override
				public void onLoginEvent(LoginEvent event)
				{
					logMessage("LoginEvent received from Openspace with user: " + event.getUsername());
					setUserId(event.getUsername());
				}
			});

			addHandler(LocaleChangedEvent.TYPE, new LocaleChangedEventHandler()
			{
				@Override
				public void onLocaleChangedEvent(LocaleChangedEvent event)
				{
					logMessage("LocaleChangedEvent received from Openspace with locale: " + event.getLocale());
				}
			});

		}

		@Override
		public void addSubscribers()
		{
			// Subscribers could be added here if there was a need to receive
			// PageBus messages directly from the PageBus.
		}

	}

	private String getUserId()
	{
		return userId;
	}

	private void setUserId(String userId)
	{
		this.userId = userId;
	}

	private void logMessage(String message)
	{
		textArea.setText(message + "\n------------------------------\n" + textArea.getText());
	}


}
