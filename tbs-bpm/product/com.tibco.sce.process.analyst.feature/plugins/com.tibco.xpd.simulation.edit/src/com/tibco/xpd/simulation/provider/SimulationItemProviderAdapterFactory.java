/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.tibco.xpd.simulation.provider;

import com.tibco.xpd.simulation.util.SimulationAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimulationItemProviderAdapterFactory extends
        SimulationAdapterFactory implements ComposeableAdapterFactory,
        IChangeNotifier, IDisposable {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static final String copyright =
            "Copyright 2005 TIBCO Software Inc. "; //$NON-NLS-1$

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SimulationItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ActivitySimulationDataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ActivitySimulationDataTypeItemProvider activitySimulationDataTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ActivitySimulationDataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createActivitySimulationDataTypeAdapter() {
        if (activitySimulationDataTypeItemProvider == null) {
            activitySimulationDataTypeItemProvider =
                    new ActivitySimulationDataTypeItemProvider(this);
        }

        return activitySimulationDataTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ConstantRealDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConstantRealDistributionItemProvider constantRealDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ConstantRealDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConstantRealDistributionAdapter() {
        if (constantRealDistributionItemProvider == null) {
            constantRealDistributionItemProvider =
                    new ConstantRealDistributionItemProvider(this);
        }

        return constantRealDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.EnumBasedExpressionType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EnumBasedExpressionTypeItemProvider enumBasedExpressionTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.EnumBasedExpressionType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEnumBasedExpressionTypeAdapter() {
        if (enumBasedExpressionTypeItemProvider == null) {
            enumBasedExpressionTypeItemProvider =
                    new EnumBasedExpressionTypeItemProvider(this);
        }

        return enumBasedExpressionTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.EnumerationValueType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EnumerationValueTypeItemProvider enumerationValueTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.EnumerationValueType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEnumerationValueTypeAdapter() {
        if (enumerationValueTypeItemProvider == null) {
            enumerationValueTypeItemProvider =
                    new EnumerationValueTypeItemProvider(this);
        }

        return enumerationValueTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ExponentialRealDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExponentialRealDistributionItemProvider exponentialRealDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ExponentialRealDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExponentialRealDistributionAdapter() {
        if (exponentialRealDistributionItemProvider == null) {
            exponentialRealDistributionItemProvider =
                    new ExponentialRealDistributionItemProvider(this);
        }

        return exponentialRealDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ExpressionType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExpressionTypeItemProvider expressionTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ExpressionType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExpressionTypeAdapter() {
        if (expressionTypeItemProvider == null) {
            expressionTypeItemProvider = new ExpressionTypeItemProvider(this);
        }

        return expressionTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ExternalEmpiricalDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExternalEmpiricalDistributionItemProvider externalEmpiricalDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ExternalEmpiricalDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExternalEmpiricalDistributionAdapter() {
        if (externalEmpiricalDistributionItemProvider == null) {
            externalEmpiricalDistributionItemProvider =
                    new ExternalEmpiricalDistributionItemProvider(this);
        }

        return externalEmpiricalDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.LoopControlTransitionType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LoopControlTransitionTypeItemProvider loopControlTransitionTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.LoopControlTransitionType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLoopControlTransitionTypeAdapter() {
        if (loopControlTransitionTypeItemProvider == null) {
            loopControlTransitionTypeItemProvider =
                    new LoopControlTransitionTypeItemProvider(this);
        }

        return loopControlTransitionTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.LoopControlType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LoopControlTypeItemProvider loopControlTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.LoopControlType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLoopControlTypeAdapter() {
        if (loopControlTypeItemProvider == null) {
            loopControlTypeItemProvider = new LoopControlTypeItemProvider(this);
        }

        return loopControlTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.MaxElapseTimeStrategyType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MaxElapseTimeStrategyTypeItemProvider maxElapseTimeStrategyTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.MaxElapseTimeStrategyType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMaxElapseTimeStrategyTypeAdapter() {
        if (maxElapseTimeStrategyTypeItemProvider == null) {
            maxElapseTimeStrategyTypeItemProvider =
                    new MaxElapseTimeStrategyTypeItemProvider(this);
        }

        return maxElapseTimeStrategyTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.MaxLoopCountStrategyType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MaxLoopCountStrategyTypeItemProvider maxLoopCountStrategyTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.MaxLoopCountStrategyType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMaxLoopCountStrategyTypeAdapter() {
        if (maxLoopCountStrategyTypeItemProvider == null) {
            maxLoopCountStrategyTypeItemProvider =
                    new MaxLoopCountStrategyTypeItemProvider(this);
        }

        return maxLoopCountStrategyTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.NormalRealDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NormalRealDistributionItemProvider normalRealDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.NormalRealDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNormalRealDistributionAdapter() {
        if (normalRealDistributionItemProvider == null) {
            normalRealDistributionItemProvider =
                    new NormalRealDistributionItemProvider(this);
        }

        return normalRealDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ParameterBasedDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParameterBasedDistributionItemProvider parameterBasedDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ParameterBasedDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createParameterBasedDistributionAdapter() {
        if (parameterBasedDistributionItemProvider == null) {
            parameterBasedDistributionItemProvider =
                    new ParameterBasedDistributionItemProvider(this);
        }

        return parameterBasedDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ParameterDependentDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParameterDependentDistributionItemProvider parameterDependentDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ParameterDependentDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createParameterDependentDistributionAdapter() {
        if (parameterDependentDistributionItemProvider == null) {
            parameterDependentDistributionItemProvider =
                    new ParameterDependentDistributionItemProvider(this);
        }

        return parameterDependentDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ParameterDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParameterDistributionItemProvider parameterDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ParameterDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createParameterDistributionAdapter() {
        if (parameterDistributionItemProvider == null) {
            parameterDistributionItemProvider =
                    new ParameterDistributionItemProvider(this);
        }

        return parameterDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.ParticipantSimulationDataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParticipantSimulationDataTypeItemProvider participantSimulationDataTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.ParticipantSimulationDataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createParticipantSimulationDataTypeAdapter() {
        if (participantSimulationDataTypeItemProvider == null) {
            participantSimulationDataTypeItemProvider =
                    new ParticipantSimulationDataTypeItemProvider(this);
        }

        return participantSimulationDataTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.SimulationRealDistributionType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimulationRealDistributionTypeItemProvider simulationRealDistributionTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.SimulationRealDistributionType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimulationRealDistributionTypeAdapter() {
        if (simulationRealDistributionTypeItemProvider == null) {
            simulationRealDistributionTypeItemProvider =
                    new SimulationRealDistributionTypeItemProvider(this);
        }

        return simulationRealDistributionTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.SplitParameterType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SplitParameterTypeItemProvider splitParameterTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.SplitParameterType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSplitParameterTypeAdapter() {
        if (splitParameterTypeItemProvider == null) {
            splitParameterTypeItemProvider =
                    new SplitParameterTypeItemProvider(this);
        }

        return splitParameterTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.SplitSimulationDataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SplitSimulationDataTypeItemProvider splitSimulationDataTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.SplitSimulationDataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSplitSimulationDataTypeAdapter() {
        if (splitSimulationDataTypeItemProvider == null) {
            splitSimulationDataTypeItemProvider =
                    new SplitSimulationDataTypeItemProvider(this);
        }

        return splitSimulationDataTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.StartSimulationDataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StartSimulationDataTypeItemProvider startSimulationDataTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.StartSimulationDataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStartSimulationDataTypeAdapter() {
        if (startSimulationDataTypeItemProvider == null) {
            startSimulationDataTypeItemProvider =
                    new StartSimulationDataTypeItemProvider(this);
        }

        return startSimulationDataTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.StructuredConditionType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StructuredConditionTypeItemProvider structuredConditionTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.StructuredConditionType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStructuredConditionTypeAdapter() {
        if (structuredConditionTypeItemProvider == null) {
            structuredConditionTypeItemProvider =
                    new StructuredConditionTypeItemProvider(this);
        }

        return structuredConditionTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.TimeUnitCostType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TimeUnitCostTypeItemProvider timeUnitCostTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.TimeUnitCostType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTimeUnitCostTypeAdapter() {
        if (timeUnitCostTypeItemProvider == null) {
            timeUnitCostTypeItemProvider =
                    new TimeUnitCostTypeItemProvider(this);
        }

        return timeUnitCostTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.TransitionSimulationDataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TransitionSimulationDataTypeItemProvider transitionSimulationDataTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.TransitionSimulationDataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTransitionSimulationDataTypeAdapter() {
        if (transitionSimulationDataTypeItemProvider == null) {
            transitionSimulationDataTypeItemProvider =
                    new TransitionSimulationDataTypeItemProvider(this);
        }

        return transitionSimulationDataTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.UniformRealDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UniformRealDistributionItemProvider uniformRealDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.UniformRealDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUniformRealDistributionAdapter() {
        if (uniformRealDistributionItemProvider == null) {
            uniformRealDistributionItemProvider =
                    new UniformRealDistributionItemProvider(this);
        }

        return uniformRealDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.WorkflowProcessSimulationDataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected WorkflowProcessSimulationDataTypeItemProvider workflowProcessSimulationDataTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.WorkflowProcessSimulationDataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createWorkflowProcessSimulationDataTypeAdapter() {
        if (workflowProcessSimulationDataTypeItemProvider == null) {
            workflowProcessSimulationDataTypeItemProvider =
                    new WorkflowProcessSimulationDataTypeItemProvider(this);
        }

        return workflowProcessSimulationDataTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.simulation.NormalDistributionStrategyType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NormalDistributionStrategyTypeItemProvider normalDistributionStrategyTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.simulation.NormalDistributionStrategyType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNormalDistributionStrategyTypeAdapter() {
        if (normalDistributionStrategyTypeItemProvider == null) {
            normalDistributionStrategyTypeItemProvider =
                    new NormalDistributionStrategyTypeItemProvider(this);
        }

        return normalDistributionStrategyTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory
                .getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(
            ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class)
                    || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (activitySimulationDataTypeItemProvider != null)
            activitySimulationDataTypeItemProvider.dispose();
        if (constantRealDistributionItemProvider != null)
            constantRealDistributionItemProvider.dispose();
        if (documentRootItemProvider != null)
            documentRootItemProvider.dispose();
        if (enumBasedExpressionTypeItemProvider != null)
            enumBasedExpressionTypeItemProvider.dispose();
        if (enumerationValueTypeItemProvider != null)
            enumerationValueTypeItemProvider.dispose();
        if (exponentialRealDistributionItemProvider != null)
            exponentialRealDistributionItemProvider.dispose();
        if (expressionTypeItemProvider != null)
            expressionTypeItemProvider.dispose();
        if (externalEmpiricalDistributionItemProvider != null)
            externalEmpiricalDistributionItemProvider.dispose();
        if (loopControlTransitionTypeItemProvider != null)
            loopControlTransitionTypeItemProvider.dispose();
        if (loopControlTypeItemProvider != null)
            loopControlTypeItemProvider.dispose();
        if (maxElapseTimeStrategyTypeItemProvider != null)
            maxElapseTimeStrategyTypeItemProvider.dispose();
        if (maxLoopCountStrategyTypeItemProvider != null)
            maxLoopCountStrategyTypeItemProvider.dispose();
        if (normalRealDistributionItemProvider != null)
            normalRealDistributionItemProvider.dispose();
        if (parameterBasedDistributionItemProvider != null)
            parameterBasedDistributionItemProvider.dispose();
        if (parameterDependentDistributionItemProvider != null)
            parameterDependentDistributionItemProvider.dispose();
        if (parameterDistributionItemProvider != null)
            parameterDistributionItemProvider.dispose();
        if (participantSimulationDataTypeItemProvider != null)
            participantSimulationDataTypeItemProvider.dispose();
        if (simulationRealDistributionTypeItemProvider != null)
            simulationRealDistributionTypeItemProvider.dispose();
        if (splitParameterTypeItemProvider != null)
            splitParameterTypeItemProvider.dispose();
        if (splitSimulationDataTypeItemProvider != null)
            splitSimulationDataTypeItemProvider.dispose();
        if (startSimulationDataTypeItemProvider != null)
            startSimulationDataTypeItemProvider.dispose();
        if (structuredConditionTypeItemProvider != null)
            structuredConditionTypeItemProvider.dispose();
        if (timeUnitCostTypeItemProvider != null)
            timeUnitCostTypeItemProvider.dispose();
        if (transitionSimulationDataTypeItemProvider != null)
            transitionSimulationDataTypeItemProvider.dispose();
        if (normalDistributionStrategyTypeItemProvider != null)
            normalDistributionStrategyTypeItemProvider.dispose();
        if (uniformRealDistributionItemProvider != null)
            uniformRealDistributionItemProvider.dispose();
        if (workflowProcessSimulationDataTypeItemProvider != null)
            workflowProcessSimulationDataTypeItemProvider.dispose();
    }

}
