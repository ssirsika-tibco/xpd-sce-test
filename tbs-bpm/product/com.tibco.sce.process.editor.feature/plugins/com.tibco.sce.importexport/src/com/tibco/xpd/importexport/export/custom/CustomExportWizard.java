/*
 * Copyright (c) TIBCO Software Inc 2004, 2007. All rights reserved.
 */
package com.tibco.xpd.importexport.export.custom;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IContributor;
import org.eclipse.core.runtime.IExecutableExtension;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.jface.viewers.ViewerFilter;
import org.osgi.framework.Bundle;

import com.tibco.xpd.importexport.ImportExportPlugin;
import com.tibco.xpd.importexport.pluginGenerator.IPluginData;
import com.tibco.xpd.ui.importexport.exportwizard.AbstractExportWizard;
import com.tibco.xpd.ui.importexport.utils.ImportExportTransformer.ITransformationStylesheetsProvider2;
import com.tibco.xpd.ui.projectexplorer.viewerfilters.FileExtensionInclusionFilter;
import com.tibco.xpd.ui.projectexplorer.viewerfilters.NoFileContentFilter;
import com.tibco.xpd.ui.projectexplorer.viewerfilters.SpecialFoldersOnlyFilter;
import com.tibco.xpd.ui.projectexplorer.viewerfilters.XpdNatureProjectsOnly;

/**
 * This class is the implementation of <code>IExportWizard</code> for all
 * custom export wizards generated by the Import/Export wizard plug-in
 * generator.
 * 
 * @author njpatel
 * 
 */
public class CustomExportWizard extends AbstractExportWizard implements
        IExecutableExtension, ITransformationStylesheetsProvider2 {

    /**
     * Plugin properties file
     */
    private static final String PLUGIN_PROPERTIES = "plugin.properties"; //$NON-NLS-1$

    private static final String MESSAGES_PROPERTIES = "messages.properties"; //$NON-NLS-1$
    
    private Properties pluginProperties;

    private Bundle bundle;

    private URL[] xslts;

    private String systemId;

    @Override
    public String getExportFileExt() {
        return getProperty(IPluginData.PROP_OUTPUT_FILE_EXT);
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.eclipse.core.runtime.IExecutableExtension#setInitializationData(org.eclipse.core.runtime.IConfigurationElement,
     *      java.lang.String, java.lang.Object)
     */
    public void setInitializationData(IConfigurationElement config,
            String propertyName, Object data) throws CoreException {
        IContributor contributor = config.getContributor();

        try {
            if (contributor != null) {
                String name = contributor.getName();

                if (name != null) {
                    bundle = Platform.getBundle(name);

                    if (bundle != null) {
                        pluginProperties =
                                getPluginProperties(bundle, PLUGIN_PROPERTIES);

                        // Initialise the wizard
                        init();
                    } else {
                        throw new NullPointerException(
                                "Unable to get the bundle for " + name); //$NON-NLS-1$
                    }
                } else {
                    throw new NullPointerException(
                            "Unable to get the name of the contributor of " + config.getName()); //$NON-NLS-1$
                }
            } else {
                throw new NullPointerException(
                        "Unable to get the contributor of " + config.getName()); //$NON-NLS-1$
            }
        } catch (Exception e) {
            throw new CoreException(new Status(IStatus.ERROR,
                    ImportExportPlugin.PLUGIN_ID, IStatus.OK, null, e));
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.tibco.xpd.ui.importexport.utils.ImportExportTransformer.ITransformationStylesheetsProvider#getXslts()
     */
    public URL[] getXslts() {

        if (xslts == null) {
            if (bundle != null) {
                String fileName = getProperty(IPluginData.PROP_XSL);

                if (fileName != null) {
                    xslts = new URL[] { bundle.getResource(fileName) };
                }
            }
        }

        return xslts;
    }

    public Map<String, String> getXsltParameters() {
        return null;
    }

    @Override
    public String getSystemId() {

        if (systemId == null) {
            // Set system ID for the transformer
            if (bundle != null) {
                String fileName = getProperty(IPluginData.PROP_XSL);

                if (fileName != null) {
                    systemId = bundle.getResource(fileName).toString();
                }
            }
        }

        return systemId;
    }

    @Override
    protected ViewerFilter[] getFilters() {
        String fileFilter = getProperty(IPluginData.PROP_FILE_EXT_FILTER);
        String specialFolderFilter =
                getProperty(IPluginData.PROP_SPECIALFOLDER_FILTER);
        List<ViewerFilter> filters = new ArrayList<ViewerFilter>();

        // Only show XPD projects
        filters.add(new XpdNatureProjectsOnly());

        // Set the file extension filter
        if (fileFilter != null && fileFilter.length() > 0) {
            Set<String> exts =
                    new HashSet<String>(Arrays.asList(fileFilter.split(", "))); //$NON-NLS-1$

            filters.add(new FileExtensionInclusionFilter(exts));
        }

        // Set the special folder filter
        if (specialFolderFilter != null && specialFolderFilter.length() > 0) {
            // Only show the selected special folders
            Set<String> kinds =
                    new HashSet<String>(Arrays.asList(specialFolderFilter
                            .split(", "))); //$NON-NLS-1$

            filters.add(new SpecialFoldersOnlyFilter(kinds));
        }

        // Don't drill into files
        filters.add(new NoFileContentFilter());

        return filters.toArray(new ViewerFilter[filters.size()]);
    }

    /**
     * Initialise the import wizard.
     */
    private void init() {
        // Get all required properties
        String wizardTitle = getProperty(IPluginData.PROP_WIZARD_NAME);
        String wizardMessage = getProperty(IPluginData.PROP_WIZARD_DESCRIPTION);
        String exportFolder = getProperty(IPluginData.PROP_EXPORT_FOLDER);

        // Set wizard title
        if (wizardTitle != null) {
            setWindowTitle(wizardTitle);
        }

        // Set wizard message
        if (wizardMessage != null) {
            setWindowMessage(wizardMessage);
        }

        // Set the export folder
        if (exportFolder != null) {
            setWorkspaceExportFolder(exportFolder);
        }
    }

    //
    /**
     * Get the properties file from the given bundle
     * 
     * @param bundle
     * @param propertiesFile
     * @return
     * @throws IOException
     */
    private Properties getPluginProperties(Bundle bundle, String propertiesFile)
            throws IOException {
        if (bundle != null && propertiesFile != null) {
            URL url = bundle.getResource(propertiesFile);

            if (url != null) {
                Properties properties = null;
                InputStream inStream = url.openStream();

                if (inStream != null) {
                    properties = new Properties();
                    properties.load(inStream);

                    // Close the stream
                    try {
                        inStream.close();
                    } catch (IOException e) {
                        ; // Do nothing
                    }
                }

                return properties;
            }
        }
        return null;
    }

    /**
     * Get the property of the given <i>key</i> from the plugin properties
     * file.
     * 
     * @param key
     * @return Value of the <i>key</i>.
     */
    private String getProperty(String key) {
        String value = null;

        if (pluginProperties != null) {
            value = pluginProperties.getProperty(key);
        }

        return value;
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.tibco.xpd.ui.importexport.utils.ImportExportTransformer.ITransformationStylesheetsProvider2#getImportXsltURL(java.lang.String)
     */
    public URL getImportXsltURL(String href) {
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.tibco.xpd.ui.importexport.utils.ImportExportTransformer.ITransformationStylesheetsProvider2#getMessagePropertiesURL(java.net.URL)
     */
    public URL getMessagePropertiesURL(URL xsltURL) {
        // By default return a URL to a message.properties file in the same
        // location as the xslt file.
        String fileName = getProperty(IPluginData.PROP_XSL);

        int lastSlash = fileName.lastIndexOf("/"); //$NON-NLS-1$
        if (lastSlash >= 0) {
            fileName = fileName.substring(0, lastSlash);
        } else {
            fileName = ""; //$NON-NLS-1$
        }
        
        fileName = fileName + MESSAGES_PROPERTIES;

        if (fileName.startsWith("/")) { //$NON-NLS-1$
            fileName = "$nl$" + fileName; //$NON-NLS-1$
            
        } else if (!fileName.startsWith("$nl$")) { //$NON-NLS-1$
            fileName = "$nl$/" + fileName; //$NON-NLS-1$
        }
        
        return FileLocator.find(bundle,
                new Path(fileName),
                null);
    }

}
