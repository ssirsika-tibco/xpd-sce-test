//import xpdl2;
//import xpdExtension;
import bpmnxpdl31;

extension org::openarchitectureware::util::stdlib::cloning;
extension com::tibco::xpd::process::om::template::Extensions reexport;
	
String getFileName(PackageType packageType) :
	traceMe("getFileName =" + packageType.name + "_sub.xpdl") ->
	packageType.name + ".xpdl";
	
// create a PackageType for every Process
List[PackageType] transform(PackageType packageType) :
	let modelCollection = {} :
	modelCollection.addAll(getPackages(packageType)) ->	
	modelCollection;

List[PackageType] getPackages(PackageType packageType) :
//For each package, look through the all the processes, and for each process, call createPackage, and "collect" returns it into a collection.
	let packages = {} :	
	packages.addAll(packageType.workflowProcesses.eAllContents.typeSelect(ProcessType).collect(e|createPackage(packageType, e))) ->	
	packages;
	
PackageType createPackage(PackageType packageType, ProcessType processType) : 
	let r = new PackageType :		
	let tempList = {processType} :	
	r.setName(processType.name) ->
	r.setPackageHeader((PackageHeaderType)clone((Object)packageType.packageHeader)) ->	
	r.setPools(createPools(packageType, processType)) ->
	r.setApplications((ApplicationsType)clone((Object)packageType.applications)) ->
	r.setArtifacts(getArtifactsForProcess(packageType, processType)) ->	
	r.setAssociations(getAssocForProc(packageType, processType)) ->
    r.setMessageFlows(getMessageFlows(packageType, processType)) ->	
	r.setConformanceClass((ConformanceClassType)clone((Object)packageType.conformanceClass)) ->
	r.setExtendedAttributes((ExtendedAttributesType)clone((Object)packageType.extendedAttributes)) ->
	r.setExternalPackages((ExternalPackagesType)clone((Object)packageType.externalPackages)) ->
	r.setDataFields(getRelevantDataFieldsType(packageType, processType)) ->
	r.setWorkflowProcesses(new WorkflowProcessesType) ->
	r.workflowProcesses.setWorkflowProcess(tempList) ->	
	r;	

create MessageFlowsType getMessageFlows(PackageType packageType, ProcessType processType) :
    let messageFlowList = {} :
    this.setMessageFlow({}) ->
    messageFlow.addAll(packageType.eAllContents.typeSelect(MessageFlowType).collect(e | doesMessageFlowBelongToProc(packageType, processType, e)).select(f | f != null)) ->
    traceMe("MessageFLow##" + messageFlow);
    
MessageFlowType doesMessageFlowBelongToProc(PackageType packageType, ProcessType processType, MessageFlowType msgFlow) :
    let objId = msgFlow.source :
    let msgFlowSrc = checkMsgFlow(packageType, processType, msgFlow, objId) :
    msgFlowSrc != null ? msgFlowSrc :
        (
            let tgtId = msgFlow.target :
            let msgFlowTgt = checkMsgFlow(packageType, processType, msgFlow, tgtId) :
            traceMe("Assoc Tgt##" + msgFlowTgt) ->
            msgFlowTgt
            
        );
    
MessageFlowType checkMsgFlow(PackageType packageType, ProcessType processType, MessageFlowType msgFlowType, String objId) :
    let activity = packageType.eAllContents.typeSelect(ActivityType).select(e|e.id == objId).first() :
    (
        objId != null ? (getProcFromActivity(packageType, processType, activity).id == processType.id ? msgFlowType : null) :
            (
                let pool = packageType.eAllContents.typeSelect(PoolType).select(e|e.id == objId).first() :
                pool != null ? (getProcFromPool(packageType, pool).id == processType.id ? msgFlowType : null) : null
            )
    );

create AssociationsType getAssocForProc(PackageType packageType, ProcessType processType) :
    let associationsList = {} :
    this.setAssociation({}) ->
    association.addAll(packageType.eAllContents.typeSelect(AssociationType).collect(e | doesAssociationBelongToProcess(packageType, processType, e)).select( f | f != null)) ->
    traceMe("Associations##" + association); 

AssociationType doesAssociationBelongToProcess(PackageType packageType, ProcessType processType, AssociationType assocType) :
    let objId = assocType.source :
    let assocTypeSrc = checkAssoc(packageType, processType, assocType, objId) :
    traceMe("Assoc Src##" + assocTypeSrc) ->
    assocTypeSrc != null ? assocTypeSrc :
        (
            let tgtId = assocType.target :
            let assocTypeTgt = checkAssoc(packageType, processType, assocType, tgtId) :
            traceMe("Assoc Tgt##" + assocTypeTgt) ->
            assocTypeTgt
            
        );
    
    
AssociationType checkAssoc(PackageType packageType, ProcessType processType, AssociationType assocType, String objId) :
    let proc = packageType.eAllContents.typeSelect(ProcessType).select(e|e.id == objId).first() :
    let activity = packageType.eAllContents.typeSelect(ActivityType).select(e|e.id == objId).first() :
    let artifact = packageType.eAllContents.typeSelect(ArtifactType).select(e|e.id == objId).first() :
    let lane = packageType.eAllContents.typeSelect(LaneType).select(e|e.id == objId).first() :
    let pool = packageType.eAllContents.typeSelect(PoolType).select(e|e.id == objId).first() :
    let actSet = packageType.eAllContents.typeSelect(ActivitySetType).select(e|e.id == objId).first() :
    let trans = packageType.eAllContents.typeSelect(TransitionType).select(e|e.id == objId).first() :
    (
        proc != null ? (traceMe("Proc!!"+proc) -> proc.id == processType.id ? assocType : null ): 
        (
            activity != null ? (getProcFromActivity(packageType, processType, activity).id == processType.id ? assocType : null ) :
            (
                lane!= null ? (traceMe("lane!!"+lane) -> getProcFromLane(packageType, lane).id == processType.id ? assocType : null) :
                (
                    pool != null? (getProcFromPool(packageType, pool).id == processType.id ? assocType : null) :
                    (
                        artifact != null ? ( traceMe("artifact!!"+artifact) ->  getProcFromArtifact(packageType, processType, artifact).id == processType.id ? assocType : null) : null
                        //actSet != null ? actSet :
                        //(
                        //    trans!=null ? trans : null
                        //)
                    )
                )   
            )
        )
    );
    
ProcessType getProcFromActivity(PackageType packageType, ProcessType processType, ActivityType activity) :
    let procId = activity.eContainer.eContainer.id :
    let proc = packageType.eAllContents.typeSelect(ProcessType).select(e| e.id == procId).first() :
    proc != null ? proc : 
        (
            let procId1 = activity.eContainer.eContainer.eContainer.eContainer.id :
            let proc1 = packageType.eAllContents.typeSelect(ProcessType).select(e| e.id == procId1).first() :
            traceMe("Process Test##"+ proc1) ->
            proc1
        );
        
ProcessType getProcFromArtifact(PackageType packageType, ProcessType processType, ArtifactType artifact) :
    let ngi = artifact.nodeGraphicsInfos.nodeGraphicsInfo.first() :
    let laneId = ngi.laneId :
    let actSetId = processType.eAllContents.typeSelect(ActivitySetType).select(e | e.id == laneId).first() :
    traceMe("ActivitySetID##" + actSetId) ->
    actSetId != null ? processType : 
        (
            let lane = packageType.eAllContents.typeSelect(LaneType).select(e | e.id == laneId).first() :
            lane != null ? getProcFromLane(packageType, lane) : null
        ); 

ProcessType getProcFromLane(PackageType packageType, LaneType lane) :
    let pool = lane.eContainer :
    getProcFromPool(packageType, pool);

ProcessType getProcFromPool(PackageType packageType, PoolType pool) :
    let procId = pool.process :
    packageType.eAllContents.typeSelect(WorkFlowProcessType).select(e|e.id == procId);

ArtifactsType getArtifactsForProcess(PackageType packageType, ProcessType processType) : 
    let artifacts = new ArtifactsType :
    let arSet = packageType.artifacts.eAllContents.typeSelect(ArtifactType).collect(e| doesArtifactBelongToProcess(packageType, processType, e)).select(e|e!=null) :
    arSet != null ? artifacts.setArtifact(arSet) : artifacts.setArtifact({}) ->    
    artifacts;
    
ArtifactType doesArtifactBelongToProcess(PackageType packageType, ProcessType processType, ArtifactType artifact) :

	let nodeGraphicsInfo = artifact.eAllContents.typeSelect(NodeGraphicsInfoType).select(e | e.toolId == "XPD.Fragment_ParentProcess_GraphicInfo").first() :
	traceMe("NodeGraphicsInfo->laneId " + nodeGraphicsInfo.laneId) ->
	nodeGraphicsInfo.laneId == processType.id ? 
		(
			checkForLanes(packageType, processType,artifact) ->
			artifact
		) : null;	
    //let lanes = packageType.pools.eAllContents.typeSelect(PoolType).select(e| e.process == processType.id).eAllContents.typeSelect(LaneType).select(e| e.id == artifact.nodeGraphicsInfos.nodeGraphicsInfo.first().laneId) :
    //traceMe("Test Test #####"+lanes) ->
    //lanes.size == 0 ? checkSecond(packageType, processType, artifact) : artifact;
    
checkForLanes(PackageType packageType, ProcessType processType, ArtifactType artifact) :
	let nodeGraphicsInfo = artifact.nodeGraphicsInfos.eAllContents.typeSelect(NodeGraphicsInfoType).select(e | e.toolId != "XPD.Fragment_ParentProcess_GraphicInfo").first() :
	let nodeGraphicsInfoToBeRemoved = artifact.nodeGraphicsInfos.eAllContents.typeSelect(NodeGraphicsInfoType).select(e | e.toolId == "XPD.Fragment_ParentProcess_GraphicInfo").first() :
	let laneIdToVerify = nodeGraphicsInfo.laneId :
	let lane = packageType.eAllContents.typeSelect(LaneType).select(e | e.id == laneIdToVerify).first() :
	traceMe("LaneIdToVerify ##" + laneIdToVerify) ->
	
	//delete the nodeGraphicsInfo with XPD.FragmentParentProcess_GraphicInfo
	artifact.nodeGraphicsInfos.eAllContents.remove(nodeGraphicsInfoToBeRemoved) ->
	(lane != null) ?
		(
			//do nothing
			traceMe("Lane##" + lane)
		):
		(
			//1. change the laneId to a lane that is relevant to the process
			//2. delete the nodeGraphicsInfo with XPD.FragmentParentProcess_GraphicInfo
			let aSet = processType.eAllContents.typeSelect(ActivitySetType).select(e | e.id == laneIdToVerify).first() :
			aSet != null ? 
				(
					traceMe("ActivitySet##" + aSet.id)
				) : (
						let pool = packageType.eAllContents.typeSelect(PoolType).select(e | e.process == processType.id).first() :
						let lane = pool.lanes.eAllContents.typeSelect(LaneType).select(e | e != null).first() :
						lane.id != null ? nodeGraphicsInfo.setLaneId(lane.id) : nodeGraphicsInfo.setLaneId("_Fragment_Dummy_Lane_")   
					) 
		);
	

ArtifactType checkSecond(PackageType packageType, ProcessType processType, ArtifactType artifact) :
   let aSet =  packageType.workflowProcesses.eAllContents.typeSelect(ActivitySetType).select(e|e.id == artifact.nodeGraphicsInfos.nodeGraphicsInfo.first().laneId) :
    traceMe("Test Test #####"+aSet) ->
    aSet.size == 0 ? null : artifact;
    	
DataFieldsType getRelevantDataFieldsType(PackageType packageType, ProcessType processType) :
	let dataFieldsType = new DataFieldsType :
	let dataFieldList = {} :
	// Example you could go through all activities and only add referenced datafields etc
	// for this example I am going to add all regardless
	//dataFieldList.addAll() -> 
	//dataFieldsType.setDataField(dataFieldList) ->
	//dataFieldsType;			 	
	(DataFieldsType)clone((Object)packageType.dataFields);
	

PoolsType createPools(PackageType packageType, ProcessType processType) :
    let poolList = packageType.pools.eAllContents.typeSelect(PoolType).select( e | e.process == processType.id) :
        ((poolList.size > 0) ? ((PoolsType)clone((Object)packageType.pools)) : createPool(processType));
        
create PoolsType createPool(ProcessType processType) :
    pool.add(createPoolInstances(processType)) ->
    pool.setId("_Fragment_Dummy_Pool_") ->
    resetLaneIds(processType);
    
resetLaneIds(ProcessType processType):
    processType.activities.eAllContents.typeSelect(ActivityType).collect(e|resetLaneId(e));
    
resetLaneId(ActivityType a) :
    a.nodeGraphicsInfos.eAllContents.typeSelect(NodeGraphicsInfoType).collect(e| setLaneId(e));
    
setLaneId(NodeGraphicsInfoType n) :
    n.setLaneId("_Fragment_Dummy_Lane_");
    
    
create PoolType createPoolInstances(ProcessType processType) :
    let lanes = new LanesType :
    let lane = new LaneType :
    let nodeGraphInfos = new NodeGraphicsInfosType :
    let nGInfo = new NodeGraphicsInfoType :
    nGInfo.setToolId("XPD") ->
    nodeGraphInfos.setNodeGraphicsInfo({}) ->
    nodeGraphInfos.nodeGraphicsInfo.add(nGInfo) ->
    lane.setId("_Fragment_Dummy_Lane_") ->
    lane.setName("Lane") ->
    lanes.setLane({}) ->
    lanes.lane.add(lane) ->
    this.setName("Pool") ->
    this.setLanes(lanes) ->
    this.setNodeGraphicsInfos(nodeGraphInfos) ->
    this.setProcess(processType.id); 