<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:extended.meta.data="ExtendedMetaData" xmlns:xpdExt="http://www.tibco.com/XPD/xpdExtension1.0.0" xmlns:xpdl2="http://www.wfmc.org/2008/XPDL2.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="xpdExt" ecore:package="com.tibco.xpd.xpdExtension" targetNamespace="http://www.tibco.com/XPD/xpdExtension1.0.0">
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="platform:/plugin/org.eclipse.emf.ecore/model/Ecore.xsd"/>
  <xsd:import namespace="http://www.wfmc.org/2008/XPDL2.1" schemaLocation="xpdl2.xsd"/>
  <xsd:element ecore:ignore="true" name="AssociatedParametersContainer" type="xpdExt:AssociatedParametersContainer"/>
  <xsd:element ecore:ignore="true" name="Discriminator" type="xpdExt:Discriminator"/>
  <xsd:element ecore:ignore="true" name="DynamicOrganizationMapping" type="xpdExt:DynamicOrganizationMapping"/>
  <xsd:element ecore:ignore="true" name="DynamicOrgIdentifierRef" type="xpdExt:DynamicOrgIdentifierRef"/>
  <xsd:element ecore:ignore="true" name="ErrorMethod" type="xpdExt:ErrorMethod"/>
  <xsd:element ecore:ignore="true" name="FormImplementation" type="xpdExt:FormImplementation"/>
  <xsd:element ecore:ignore="true" name="InterfaceMethod" type="xpdExt:InterfaceMethod"/>
  <xsd:element ecore:ignore="true" name="RescheduleTimers" type="xpdExt:RescheduleTimers"/>
  <xsd:element ecore:ignore="true" name="RESTServices" type="xpdExt:RESTServices"/>
  <xsd:element ecore:ignore="true" name="StructuredDiscriminator" type="xpdExt:StructuredDiscriminator"/>
  <xsd:element ecore:ignore="true" name="DataObjectAttributes" type="xpdExt:DataObjectAttributes"/>
  <xsd:element ecore:ignore="true" name="ExtendedAttributes" type="xpdExt:ExtendedAttributes"/>
  <xsd:complexType name="ActivityRef">
    <xsd:annotation>
      <xsd:appinfo ecore:key="operations" source="http://www.eclipse.org/emf/2002/Ecore">
        <operation name="getActivity" type="xpdl2:Activity_._type"/>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:attribute ecore:name="idRef" form="qualified" name="IdRef" type="xpdl2:IdReferenceString" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="ActivityResourcePatterns">
    <xsd:sequence>
      <xsd:element ecore:name="allocationStrategy" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="AllocationStrategy" type="xpdExt:AllocationStrategy"/>
      <xsd:element ecore:name="piling" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Piling" type="xpdExt:PilingInformation"/>
      <xsd:element ecore:name="workItemPriority" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="WorkItemPriority" type="xpdExt:WorkItemPriority"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="AllocationStrategy">
    <xsd:attribute ecore:name="offer" form="qualified" name="Offer" type="xpdExt:AllocationType">
      <xsd:annotation>
        <xsd:documentation>Allocation via 'Offer' implies an extra
step involving user choice prior to work
items reaching an allocated state, so if
this attribute is missing it implies the
allocation decision is the prerogative of
the BPMS alone.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="strategy" form="qualified" name="Strategy" type="xpdExt:AllocationStrategyType_._type"/>
    <xsd:attribute ecore:name="reOfferOnClose" form="qualified" name="ReOfferOnClose" type="xsd:boolean">
      <xsd:annotation>
        <xsd:documentation>Whether the work item should be re-offered to others when the 
first opener closes the work item.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="reOfferOnCancel" form="qualified" name="ReOfferOnCancel" type="xsd:boolean">
      <xsd:annotation>
        <xsd:documentation>Whether the work item should be re-offered to others when the 
first opener cancels the opening of the work item.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:simpleType ecore:name="AllocationStrategyType" name="AllocationStrategyType_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="SYSTEM_DETERMINED"/>
      <xsd:enumeration value="RANDOM"/>
      <xsd:enumeration value="ROUND_ROBIN"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="AllocationType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="OfferAll"/>
      <xsd:enumeration ecore:value="2" value="OfferOne"/>
      <xsd:enumeration ecore:value="3" value="AllocateOne"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="AssociatedCorrelationFields">
    <xsd:sequence>
      <xsd:element ecore:name="associatedCorrelationField" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="AssociatedCorrelationField" type="xpdExt:AssociatedCorrelationField"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="disableImplicitAssociation" name="DisableImplicitAssociation" type="xsd:boolean"/>
  </xsd:complexType>
  <xsd:complexType name="AssociatedCorrelationField">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:DescribedElement">
        <xsd:attribute ecore:name="name" name="Name" type="xsd:string"/>
        <xsd:attribute ecore:name="correlationMode" name="CorrelationMode" type="xpdExt:CorrelationMode_._type"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="AssociatedParameter">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:DescribedElement">
        <xsd:attribute ecore:name="formalParam" name="FormalParam" type="xsd:string"/>
        <xsd:attribute default="" ecore:name="mode" name="Mode" type="xpdl2:Mode_._type"/>
        <xsd:attribute ecore:name="mandatory" name="Mandatory" type="xsd:boolean"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="AssociatedParameters">
    <xsd:sequence>
      <xsd:element ecore:name="associatedParameter" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="AssociatedParameter" type="xpdExt:AssociatedParameter"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="disableImplicitAssociation" name="DisableImplicitAssociation" type="xsd:boolean"/>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:interface="true" name="AssociatedParametersContainer">
    <xsd:sequence>
      <xsd:element ecore:name="associatedParameters" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="AssociatedParameter" type="xpdExt:AssociatedParameter">
        <xsd:annotation>
          <xsd:documentation>Stores the list of associated Parameter Objects linked to the Process 
Interface whilst implementation.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute ecore:name="disableImplicitAssociation" name="DisableImplicitAssociation" type="xsd:boolean"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="Audit" name="Audit_._type">
    <xsd:sequence>
      <xsd:element ecore:name="auditEvent" form="qualified" maxOccurs="unbounded" minOccurs="0" name="AuditEvent" type="xpdExt:AuditEvent_._type">
        <xsd:annotation>
          <xsd:documentation>Audit to perform for particular events that happen to activity.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:any ecore:name="any" maxOccurs="unbounded" minOccurs="0" namespace="##other"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType ecore:name="AuditEvent" name="AuditEvent_._type">
    <xsd:sequence>
      <xsd:element ecore:name="information" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Information" type="xpdl2:ExpressionType"/>
    </xsd:sequence>
    <xsd:attribute ecore:default="Initiated" ecore:name="type" name="Type" type="xpdExt:Type_._type" use="required"/>
  </xsd:complexType>
  <xsd:simpleType ecore:name="AuditEventType" name="Type_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Initiated"/>
      <xsd:enumeration value="Completed"/>
      <xsd:enumeration value="DeadlineExpired"/>
      <xsd:enumeration value="Cancelled"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="BusinessProcess">
    <xsd:attribute ecore:name="processId" name="BusinessProcessId" type="xpdl2:IdReferenceString"/>
    <xsd:attribute ecore:name="packageRefId" name="PackageRef" type="xpdl2:IdReferenceString"/>
    <xsd:attribute ecore:name="activityId" name="ActivityId" type="xpdl2:IdReferenceString"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="CalendarReference" name="CalendarReference_._type">
    <xsd:attribute default="" ecore:name="alias" name="Alias" type="xsd:string"/>
    <xsd:attribute default="" ecore:name="dataFieldId" name="DataFieldId" type="xpdl2:IdReferenceString"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="CatchErrorMappings" name="CatchErrorMappings&#13;&#10;">
    <xsd:annotation>
      <xsd:documentation>This element is added to the xpdl:ResultError element of an intermediate
catch error event to specify the data mappings to the data output with the 
caught error.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="message" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Message" type="xpdl2:MessageType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ConstantPeriod">
    <xsd:attribute ecore:name="days" name="Days" type="xsd:integer"/>
    <xsd:attribute ecore:name="hours" name="Hours" type="xsd:integer"/>
    <xsd:attribute ecore:name="microSeconds" name="MicroSeconds" type="xsd:integer"/>
    <xsd:attribute ecore:name="minutes" name="Minutes" type="xsd:integer"/>
    <xsd:attribute ecore:name="months" name="Months" type="xsd:integer"/>
    <xsd:attribute ecore:name="seconds" name="Seconds" type="xsd:integer"/>
    <xsd:attribute ecore:name="weeks" name="Weeks" type="xsd:integer"/>
    <xsd:attribute ecore:name="years" name="Years" type="xsd:integer"/>
  </xsd:complexType>
  <xsd:complexType name="ConditionalParticipant">
    <xsd:sequence>
      <xsd:element ecore:name="performerScript" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="PerformerScript" type="xpdl2:ExpressionType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ReplyImmediateDataMappings">
    <xsd:sequence>
      <xsd:element ecore:name="dataMappings" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DataMapping" type="xpdl2:DataMapping_._type"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="CorrelationDataMappings">
    <xsd:sequence>
      <xsd:element ecore:name="dataMappings" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DataMapping" type="xpdl2:DataMapping_._type"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType ecore:name="CorrelationMode" name="CorrelationMode_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Initialize"/>
      <xsd:enumeration value="Correlate"/>
      <xsd:enumeration value="Join"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType extended.meta.data:kind="element" extended.meta.data:name="Discriminator" extended.meta.data:namespace="##targetNamespace" name="Discriminator">
    <xsd:sequence>
      <xsd:element ecore:name="structuredDiscriminator" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="StructuredDiscriminator" type="xpdExt:StructuredDiscriminator"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="discriminatorType" name="Type" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType name="DocumentRoot">
    <xsd:sequence>
      <xsd:element ecore:name="dataObjectAttributes" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DataObjectAttributes" type="xpdExt:DataObjectAttributes"/>
      <xsd:element ecore:name="extendedAttributes" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="XpdExtAttributes" type="xpdExt:ExtendedAttributes"/>
      <xsd:element ecore:name="constantPeriod" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ConstantPeriod" type="xpdExt:ConstantPeriod"/>
      <xsd:element ecore:name="userTaskScripts" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="UserTaskScripts" type="xpdExt:UserTaskScripts"/>
      <xsd:element ecore:name="audit" form="qualified" maxOccurs="unbounded" minOccurs="0" name="Audit" type="xpdExt:Audit_._type">
        <xsd:annotation>
          <xsd:documentation>Auditing to perform on activity.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="script" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ScriptInformation" type="xpdExt:ScriptInformation"/>
      <xsd:element ecore:name="initialValues" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="InitialValues" type="xpdExt:InitialValues"/>
      <xsd:element ecore:name="associatedCorrelationFields" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="AssociatedCorrelationFields" type="xpdExt:AssociatedCorrelationFields"/>
      <xsd:element ecore:name="associatedParameters" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="AssociatedParameters" type="xpdExt:AssociatedParameters">
        <xsd:annotation>
          <xsd:documentation>The associated parameters for an activity.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="implementedInterface" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ImplementedInterface" type="xpdExt:ImplementedInterface">
        <xsd:annotation>
          <xsd:documentation>This attribute is to store the process designers intent to 
have this processes content in-lined into calling processes in
the execution environment.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="processInterfaces" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ProcessInterfaces" type="xpdExt:ProcessInterfaces"/>
      <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="wsdlEventAssociation" type="xpdExt:WsdlEventAssociation"/>
      <xsd:element ecore:name="multiInstanceScripts" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="MultiInstanceScripts" type="xpdExt:MultiInstanceScripts"/>
      <xsd:element ecore:name="expression" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="Expression" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="initialParameterValue" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="InitialParameterValue" type="xpdExt:InitialParameterValue"/>
      <xsd:element ecore:name="portTypeOperation" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="PortTypeOperation" type="xpdExt:PortTypeOperation"/>
      <xsd:element ecore:name="externalReference" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ExternalReference" type="xpdl2:ExternalReference_._type"/>
      <xsd:element ecore:name="processResourcePatterns" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ProcessResourcePatterns" type="xpdExt:ProcessResourcePatterns"/>
      <xsd:element ecore:name="eventHandlerInitialisers" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="EventHandlerInitialisers" type="xpdExt:EventHandlerInitialisers"/>
      <xsd:element ecore:name="activityResourcePatterns" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ActivityResourcePatterns" type="xpdExt:ActivityResourcePatterns"/>
      <xsd:element ecore:name="durationCalculation" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DurationCalculation" type="xpdExt:DurationCalculation"/>
      <xsd:element ecore:name="discriminator" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="Discriminator" type="xpdExt:Discriminator"/>
      <xsd:element ecore:name="correlationDataMappings" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="CorrelationDataMappings" type="xpdExt:CorrelationDataMappings"/>
      <xsd:element ecore:name="transformScript" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="TransformScript" type="xpdExt:TransformScript"/>
      <xsd:element ecore:name="errorThrowerInfo" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ErrorThrowerInfo" type="xpdExt:ErrorThrowerInfo">
        <xsd:annotation>
          <xsd:documentation>This element is added to the xpdl:ResultError element of an intermediate
catch error event when the error has been set (in Business Studio) to
catch an error thrown by a specific activity.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="catchErrorMappings" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="CatchErrorMappings" type="xpdExt:CatchErrorMappings&#13;&#10;">
        <xsd:annotation>
          <xsd:documentation>This element is added to the xpdl:ResultError element of an intermediate
catch error event to specify the data mappings to the data output with the 
caught error.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="ConditionalParticipant" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ConditionalParticipant" type="xpdExt:ConditionalParticipant"/>
      <xsd:element ecore:name="taskLibraryReference" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="TaskLibraryReference" type="xpdExt:TaskLibraryReference"/>
      <xsd:element ecore:name="formImplementation" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="FormImplementation" type="xpdExt:FormImplementation">
        <xsd:annotation>
          <xsd:documentation>Form Implementation information - 
This is added to TaskUser element of user task activities.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="participantQuery" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ParticipantQuery" type="xpdl2:ExpressionType">
        <xsd:annotation>
          <xsd:documentation>ParticipantQuery -
Organisation Model Query Scripts are persisted as these participant query.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="faultMessage" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="FaultMessage" type="xpdl2:MessageType">
        <xsd:annotation>
          <xsd:documentation>Element added to xpdl2:ResultError for throw error end event when that event 
is configured to throw a fault message defined for the operation in the referenced
incoming message request activity (ref'd via xpdl2:ResultError/xpdExt:RequestActivityId).</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="businessProcess" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="BusinessProcess" type="xpdExt:BusinessProcess"/>
      <xsd:element ecore:name="wsdlGeneration" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="WsdlGeneration" type="xpdExt:WsdlGeneration"/>
      <xsd:element ecore:name="decisionService" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DecisionService" type="xpdl2:SubFlow_._type"/>
      <xsd:element ecore:name="participantSharedResource" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ParticipantSharedResource" type="xpdExt:ParticipantSharedResource"/>
      <xsd:element ecore:name="calendarReference" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="CalendarReference" type="xpdExt:CalendarReference_._type">
        <xsd:annotation>
          <xsd:documentation>Calendar reference on Process and Timer Event.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="signalData" form="qualified" maxOccurs="unbounded" minOccurs="0" name="SignalData" type="xpdExt:SignalData">
        <xsd:annotation>
          <xsd:documentation>SignalData added to TriggerResultSignal for Catch Signal Events</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="retry" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="Retry" type="xpdExt:Retry">
        <xsd:annotation>
          <xsd:documentation>For activities specifying the retry information. Added to xpdl:Activity</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="namespacePrefixMap" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="NamespacePrefixMap" type="xpdExt:NamespacePrefixMap">
        <xsd:annotation>
          <xsd:documentation>This element is added under xpdl:Activity for web service
activities that use XPath mappings so that we can relate namespace to prefix
in existing mappings when these change in the WSDL.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="correlationTimeout" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="CorrelationTimeout" type="xpdExt:ConstantPeriod">
        <xsd:annotation>
          <xsd:documentation>For receive task with incoming flow and intermediate catch message event specifying the uncorrelated message timeout information. Added to xpdl:Activity</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="validationControl" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ValidationControl" type="xpdExt:ValidationControl">
        <xsd:annotation>
          <xsd:documentation>Element specifying control / overrides over various validation rules.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="replyImmediateDataMappings" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ReplyImmediateDataMappings" type="xpdExt:ReplyImmediateDataMappings"/>
      <xsd:element ecore:name="caseRefType" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="CaseRefType" type="xpdl2:RecordType_._type"/>
      <xsd:element ecore:name="RESTServices" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="RESTServices" type="xpdExt:RESTServices">
        <xsd:annotation>
          <xsd:documentation>The REST services for a Business Process (stored as a pageflow process)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="rescheduleTimerScript" form="qualified" maxOccurs="unbounded" minOccurs="0" name="RescheduleTimerScript" type="xpdExt:RescheduleTimerScript">
        <xsd:annotation>
          <xsd:documentation>This element is optionally added under xpdl2:TriggerTimer and specifies 
how to recalculate expiry time of timer.
DurationRelativeTo specifies how to treat durations if they are returned by the
script (i.e. as relative to time of reschedule, or to eixsiting timeout for timer event)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="dynamicOrganizationMappings" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DynamicOrganizationMappings" type="xpdExt:DynamicOrganizationMappings"/>
      <xsd:element ecore:name="globalDataOperation" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="GlobalDataOperation" type="xpdExt:GlobalDataOperation"/>
      <xsd:element ecore:name="processDataWorkItemAttributeMappings" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ProcessDataWorkItemAttributeMappings" type="xpdExt:ProcessDataWorkItemAttributeMappings_._type"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="xMLNSPrefixMap" ecore:reference="ecore:EStringToStringMapEntry" ecore:transient="true" name="xmlns:prefix" type="xsd:IDREFS"/>
    <xsd:attribute ecore:name="xSISchemaLocation" ecore:reference="ecore:EStringToStringMapEntry" ecore:transient="true" name="xsi:schemaLocation" type="xsd:IDREFS"/>
    <xsd:attribute ecore:name="implementationType" form="qualified" name="ImplementationType" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation> Name of the task implementation currently set.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="continueOnTimeout" ecore:unsettable="false" form="qualified" name="ContinueOnTimeout" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>For Intermediate Timer Event on Task Boundary... 
If true, override BPMN default behaviour of interrupt task 
on timeoput and instead, allow task to continue as well as processing
timer event outgoiung flow.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="alias" form="qualified" name="Alias" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation> Name of the web service alias.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="replyImmediately" ecore:unsettable="false" form="qualified" name="ReplyImmediate" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>For Intermediate Timer Event on Task Boundary... 
If true, override BPMN default behaviour of interrupt task 
on timeoput and instead, allow task to continue as well as processing
timer event outgoiung flow.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="inlineSubProcess" ecore:unsettable="false" form="qualified" name="InlineSubProcess" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>This attribute is to store the process designers intent to 
have this processes content in-lined into calling processes in
the execution environment.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="documentationURL" form="qualified" name="DocumentationURL" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>URL for the Process Documentation.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="implements" form="qualified" name="Implements" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation>Attribute to indicate a Process implements a Process Interface.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="processIdentifierField" form="qualified" name="ProcessIdentifierField" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Reference to the process data which contains the process names to 
be invoked.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:default="" ecore:name="visibility" form="qualified" name="Visibility" type="xpdExt:Visibility_._type" use="required"/>
    <xsd:attribute ecore:name="securityProfile" form="qualified" name="SecurityProfile" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation> Name of the web service alias.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="language" form="qualified" name="Language" type="xsd:string"/>
    <xsd:attribute ecore:name="initialValueMapping" ecore:unsettable="false" form="qualified" name="InitialValueMapping" type="xsd:boolean"/>
    <xsd:attribute ecore:name="transport" form="qualified" name="Transport" type="xsd:string"/>
    <xsd:attribute ecore:name="isChained" form="qualified" name="IsChained" type="xsd:boolean" use="required"/>
    <xsd:attribute ecore:name="requireNewTransaction" ecore:unsettable="false" form="qualified" name="RequireNewTransaction" type="xsd:boolean"/>
    <xsd:attribute ecore:name="displayName" ecore:unsettable="true" form="qualified" name="DisplayName" type="xsd:string"/>
    <xsd:attribute ecore:name="catchThrow" ecore:unsettable="false" form="qualified" name="CatchThrow" type="xpdl2:CatchThrow_._type" use="required"/>
    <xsd:attribute ecore:name="isRemote" form="qualified" name="IsRemote" type="xsd:boolean" use="required"/>
    <xsd:attribute ecore:name="publishAsBusinessService" form="qualified" name="PublishAsBusinessService" type="xsd:boolean" use="required"/>
    <xsd:attribute ecore:name="businessServiceCategory" ecore:unsettable="true" form="qualified" name="BusinessServiceCategory" type="xsd:string"/>
    <xsd:attribute ecore:name="generated" ecore:unsettable="false" form="qualified" name="Generated" type="xsd:boolean" use="required"/>
    <xsd:attribute ecore:name="replyToActivityId" form="qualified" name="ReplyToActivityId" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation>Attribute added to xpdl2:TaskSend / xpdl2:TriggerResultMessage for throw
message intermediate/end event when it has been configured to 
be a reply to  message received by start/intermedaite/receiveTask.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="setPerformerInProcess" form="qualified" name="SetPerformerInProcess" type="xsd:boolean"/>
    <xsd:attribute ecore:name="embSubprocOtherStateHeight" form="qualified" name="EmbSubprocOtherStateHeight" type="xsd:double">
      <xsd:annotation>
        <xsd:documentation>Added to the BlockActivity for an embedded sub-proces activity.
This stores the last set size / width of the OPPOSITE to current state size/width.
i.e. if the current state is ViewType=COLLAPSED then this stores the last 
set size whilst the sub-process was in expanded state.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="embSubprocOtherStateWidth" form="qualified" name="EmbSubprocOtherStateWidth" type="xsd:double">
      <xsd:annotation>
        <xsd:documentation>Added to the BlockActivity for an embedded sub-proces activity.
This stores the last set size / width of the OPPOSITE to current state size/width.
i.e. if the current state is ViewType=COLLAPSED then this stores the last 
set size whilst the sub-process was in expanded state.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="apiEndPointParticipant" form="qualified" name="ApiEndPointParticipant" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation>Reference (by Id) of the package participant that is used as the default endpoint participant for all process API activities (stored on xpdl2:WorkflowProcess).</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="requestActivityId" form="qualified" name="RequestActivityId" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation>Attribute added to xpdl2:RssultError for a throw error end event configured to
throw a fault message for the operation of the incoming message request 
activity referenced defined by this attribute.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="targetPrimitiveProperty" form="qualified" name="TargetPrimitiveProperty" type="xsd:boolean"/>
    <xsd:attribute ecore:name="sourcePrimitiveProperty" form="qualified" name="SourcePrimitiveProperty" type="xsd:boolean"/>
    <xsd:attribute ecore:default="PageFlow" ecore:name="xpdModelType" form="qualified" name="XpdModelType" type="xpdExt:XpdModelType_._type" use="required"/>
    <xsd:attribute ecore:name="flowRoutingStyle" ecore:unsettable="false" form="qualified" name="FlowRoutingStyle" type="xpdExt:FlowRoutingStyle_._type"/>
    <xsd:attribute ecore:name="nonCancelling" ecore:unsettable="false" form="qualified" name="NonCancelling" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>For Intermediate Catch Signal Event on Task Boundary... 
If true, override BPMN default behaviour of cancel task 
on catch signal and instead, allow task to continue as well as processing
signal event outgoing flow.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="activityDeadlineEventId" form="qualified" name="ActivityDeadlineEventId" type="xpdl2:IdReferenceString"/>
    <xsd:attribute ecore:name="startStrategy" ecore:unsettable="false" form="qualified" name="StartStrategy" type="xpdExt:SubProcessStartStrategy_._type">
      <xsd:annotation>
        <xsd:documentation>Added to xpdl:Subflow elemnt to define the start strategy 
for sub-process invocations</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="overwriteAlreadyModifiedTaskData" ecore:unsettable="false" form="qualified" name="OverwriteAlreadyModifiedTaskData" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>Attribtue added to xpdl:Activity element to specify whether already 
changed work item data should be overwritten on receipt of an 
update-task-item-data via non-cancelling event.
- OverwriteAlreadyModifiedData = (IgnoreIncomingData=false) in Work type.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="eventHandlerFlowStrategy" ecore:unsettable="false" form="qualified" name="EventHandlerFlowStrategy" type="xpdExt:EventHandlerFlowStrategy_._type">
      <xsd:annotation>
        <xsd:documentation>Attribtue added to xpdl:TriggerResultMessage element for event handler
activity, to control the behaviour of multiple concurrent flows</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="suspendResumeWithParent" ecore:unsettable="false" form="qualified" name="SuspendResumeWithParent" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>Attribute added to xpdl:SubFlow for sub-process tasks to configure the 
whether the sub-process instance should suspend/resume with the parent 
process instance or not.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="systemErrorAction" ecore:unsettable="false" form="qualified" name="SystemErrorAction" type="xpdExt:SystemErrorActionType_._type"/>
    <xsd:attribute ecore:name="bxUseUnqualifiedPropertyNames" ecore:unsettable="false" form="qualified" name="BxUseUnqualifiedPropertyNames" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>Optionally added to xpdl2:Package element.
Indicates to Xpdl2Bpel converter that when generating PropertyName's for the
PropertyAlias's (added to BPEL copy of WSDL) for correlation mappings it 
should not qualify the PropertyName (dervied from correlation data name)
with the process name. DEFAULT is FALSE when not present (i.e. new 
packages will qualify ProeprtyName with processname). 
Only Migrated XPDL from pre FormatVersion=13 should have this set.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:unsettable="false" form="qualified" name="publishAsRestService" type="xsd:boolean">
      <xsd:annotation>
        <xsd:documentation>Optionally added to xpdl2:Activity if it is provided as a REST Service</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute form="qualified" name="restActivityId" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Added to xpdExt:RESTService to store ID of the activity generating this REST service.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:unsettable="false" form="qualified" name="signalHandlerAsynchronous" type="xsd:boolean">
      <xsd:annotation>
        <xsd:documentation>Optionally added to xpdl2:TriggerResultSignal element (when the signal is an 
event handler) of a catch signal event handler activity to determine the 
behaviour of the invoking throw signals (i.e., Synchronous or Asynchronous). </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="allowUnqualifiedSubProcessIdentification" ecore:unsettable="false" form="qualified" name="AllowUnqualifiedSubProcessIdentification" type="xsd:boolean" use="required">
      <xsd:annotation>
        <xsd:documentation>For dynamic sub-process tasks, this attribute can be added to the xpdl2:Subflow
element.
It configures the runtime behaviour of how Unqualified sub-process names are
treated when they are used in the runtime identifier field. 
If true, the process engine will look for unqualified sub-process names in 
the same package as invoking process, then in all packages in same project,
then all packages deployed ot the BPM node to find the given process.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="DurationCalculation">
    <xsd:annotation>
      <xsd:documentation>Element specifying an expression-based duration.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="years" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Years" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="months" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Months" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="weeks" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Weeks" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="days" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Days" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="hours" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Hours" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="minutes" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Minutes" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="seconds" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Seconds" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="microseconds" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Microseconds" type="xpdl2:ExpressionType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="DynamicOrganizationMappings">
    <xsd:sequence>
      <xsd:element ecore:name="dynamicOrganizationMapping" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DynamicOrganizationMapping" type="xpdExt:DynamicOrganizationMapping"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="DynamicOrganizationMapping">
    <xsd:sequence>
      <xsd:element ecore:name="sourcePath" form="qualified" minOccurs="0" name="SourcePath" type="ecore:EString"/>
      <xsd:element ecore:name="dynamicOrgIdentifierRef" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="DynamicOrgIdentifierRef" type="xpdExt:DynamicOrgIdentifierRef"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="DynamicOrgIdentifierRef">
    <xsd:attribute ecore:name="identifierName" name="IdentifierName" type="ecore:EString"/>
    <xsd:attribute ecore:name="dynamicOrgId" name="DynamicOrgId" type="ecore:EString"/>
    <xsd:attribute ecore:name="orgModelPath" name="OrgModelPath" type="ecore:EString"/>
  </xsd:complexType>
  <xsd:complexType name="EmailResource">
    <xsd:attribute ecore:name="instanceName" name="InstanceName" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType ecore:implements="xpdExt:AssociatedParametersContainer" name="ErrorMethod">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:UniqueIdElement">
        <xsd:attribute ecore:name="errorCode" name="ErrorCode" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ErrorThrowerInfo">
    <xsd:annotation>
      <xsd:documentation>This element is added to the xpdl:ResultError element of an intermediate
catch error event when the error has been set (in Business Studio) to
catch an error thrown by a specific activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:name="throwerId" ecore:unsettable="true" name="ThrowerId" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation>Id of object (nominally Activity / Process Interface Method that throws the error.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="throwerContainerId" ecore:unsettable="true" name="ThrowerContainerId" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation>Id of the container of the object (nominally Process / Process Interface that throws the error.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="throwerType" name="ThrowerType" type="xpdExt:ErrorThrowerType">
      <xsd:annotation>
        <xsd:documentation>The type of error thrower specified by the throwerId and throweerContainerId.
This allows the model reader to interpret the throwerId and throwerContainerId
accurartely (i.e. ProcessActivity means that these are an XPDL Activity Id and Process Id, 
InterfaceEvent means that these are a xpdExt ProcessInterface Event Id and ProcessInteface Id).
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:simpleType name="ErrorThrowerType">
    <xsd:annotation>
      <xsd:documentation>The type of error thrower specified by the throwerId and throweerContainerId.
This allows the model reader to interpret the throwerId and throwerContainerId
accurartely (i.e. ProcessActivity means that these are an XPDL Activity Id and Process Id, 
InterfaceEvent means that these are a xpdExt ProcessInterface Event Id and ProcessInteface Id).
</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="ProcessActivity"/>
      <xsd:enumeration ecore:value="2" value="InterfaceEvent"/>
      <xsd:enumeration ecore:value="3" value="Other"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType ecore:name="EventHandlerFlowStrategy" name="EventHandlerFlowStrategy_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="SerializeConcurrent"/>
      <xsd:enumeration ecore:value="2" value="AllowConcurrent"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="EventHandlerInitialisers">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:name="activityRef" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ActivityRef" type="xpdExt:ActivityRef"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="FaultMessage">
    <xsd:annotation>
      <xsd:documentation>Element added to xpdl2:ResultError for throw error end event when that event 
is configured to throw a fault message defined for the operation in the referenced
incoming message request activity (ref'd via xpdl2:ResultError/xpdExt:RequestActivityId).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="xpdl2:MessageType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:name="FlowRoutingStyle" name="FlowRoutingStyle_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="UncenteredOnTasks"/>
      <xsd:enumeration ecore:value="2" value="SingleEntryExit"/>
      <xsd:enumeration ecore:value="3" value="MultiEntryExit"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType extended.meta.data:kind="element" extended.meta.data:name="FormImplementation" extended.meta.data:namespace="##targetNamespace" name="FormImplementation">
    <xsd:annotation>
      <xsd:documentation>Form Implementation information - 
This is added to TaskUser element of user task activities.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:name="formType" name="FormType" type="xpdExt:FormImplementationType"/>
    <xsd:attribute ecore:name="formURI" name="FormURI" type="xsd:string"/>
  </xsd:complexType>
  <xsd:simpleType name="FormImplementationType">
    <xsd:annotation>
      <xsd:documentation>Form Implementation Type</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="UserDefined"/>
      <xsd:enumeration ecore:value="2" value="Form"/>
      <xsd:enumeration ecore:value="3" value="Pageflow"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="ImplementedInterface">
    <xsd:attribute ecore:name="packageRef" form="qualified" name="PackageRef" type="xpdl2:IdReferenceString">
      <xsd:annotation>
        <xsd:documentation>This stores the package reference to which the implemented interface 
is associated.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="processInterfaceId" form="qualified" name="ProcessInterfaceId" type="xpdl2:IdReferenceString" use="required">
      <xsd:annotation>
        <xsd:documentation>Stores the Process Interface Id.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="InitialValues">
    <xsd:sequence>
      <xsd:element ecore:name="value" form="qualified" maxOccurs="unbounded" minOccurs="0" name="Value" nillable="true" type="ecore:EString"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="InitialParameterValue">
    <xsd:attribute ecore:name="name" name="Name" type="xsd:string" use="required"/>
    <xsd:attribute ecore:name="value" name="Value" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:implements="xpdl2:DescribedElement xpdExt:AssociatedParametersContainer" ecore:interface="true" extended.meta.data:kind="element" extended.meta.data:name="InterfaceMethod" extended.meta.data:namespace="##targetNamespace" name="InterfaceMethod">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:name="triggerResultMessage" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="TriggerResultMessage" type="xpdl2:TriggerResultMessage_._type">
            <xsd:annotation>
              <xsd:documentation>This attribute is used to store the trigger result message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:name="errorMethods" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ErrorMethod" type="xpdExt:ErrorMethod"/>
        </xsd:sequence>
        <xsd:attribute ecore:name="trigger" ecore:unsettable="false" name="Trigger" type="xpdl2:Trigger_._type" use="required">
          <xsd:annotation>
            <xsd:documentation>This attribute is to store the process designers intent to 
have this processes content in-lined into calling processes in
the execution environment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="" ecore:name="visibility" name="Visibility" type="xpdExt:Visibility_._type" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IntermediateMethod">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:InterfaceMethod"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="JdbcResource">
    <xsd:attribute ecore:name="instanceName" name="InstanceName" type="xsd:string"/>
    <xsd:attribute ecore:name="jdbcProfileName" name="JdbcProfileName" type="xsd:string"/>
  </xsd:complexType>
  <xsd:simpleType name="MaxRetryActionType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="Halt"/>
      <xsd:enumeration ecore:value="2" value="Error"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="MultiInstanceScripts">
    <xsd:sequence>
      <xsd:element ecore:name="additionalInstances" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="AdditionalInstances" type="xpdl2:ExpressionType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="NamespacePrefixMap">
    <xsd:annotation>
      <xsd:documentation>This element is added under xpdl:Activity for web service
activities that use XPath mappings so that we can relate namespace to prefix
in existing mappings when these change in the WSDL.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="namespaceEntries" form="qualified" maxOccurs="unbounded" minOccurs="0" name="NamespaceEntry" type="xpdExt:NamespaceMapEntry"/>
    </xsd:sequence>
    <xsd:attribute ecore:default="false" ecore:name="PrefixMappingDisabled" ecore:unsettable="false" name="PrefixMappingDisabled" type="xsd:boolean" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="NamespaceMapEntry">
    <xsd:annotation>
      <xsd:documentation>This element an entry in the XPathNamespaceMap</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:name="Prefix" name="Prefix" type="xsd:NMTOKEN" use="required"/>
    <xsd:attribute ecore:default="" ecore:name="Namespace" ecore:unsettable="false" name="Namespace" type="xsd:anyURI" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="ParticipantSharedResource">
    <xsd:annotation>
      <xsd:appinfo ecore:key="operations" source="http://www.eclipse.org/emf/2002/Ecore">
        <operation name="getSharedResource" type="xsd:anyType"/>
        <operation name="setSharedResource">
          <parameter name="sharedResource" type="xsd:anyType"/>
        </operation>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="email" form="qualified" minOccurs="0" name="Email" type="xpdExt:EmailResource"/>
      <xsd:element ecore:name="jdbc" form="qualified" minOccurs="0" name="Jdbc" type="xpdExt:JdbcResource"/>
      <xsd:element ecore:name="webService" form="qualified" minOccurs="0" name="WebService" type="xpdExt:WsResource"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType ecore:name="PilingInfo" name="PilingInformation">
    <xsd:annotation>
      <xsd:documentation>This element is added under Activity Resource Patterns for piling information</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:name="pilingAllowed" name="PilingAllowed" type="xsd:boolean"/>
    <xsd:attribute ecore:name="maxPiliableItems" name="MaxPilableItems" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType name="PortTypeOperation">
    <xsd:sequence>
      <xsd:element ecore:name="externalReference" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="ExternalReference" type="xpdl2:ExternalReference_._type"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="portTypeName" name="PortTypeName" type="xsd:string"/>
    <xsd:attribute ecore:name="operationName" name="OperationName" type="xsd:string"/>
    <xsd:attribute ecore:name="transport" name="Transport" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType ecore:implements="xpdl2:DescribedElement xpdl2:ExtendedAttributesContainer xpdl2:FormalParametersContainer xpdl2:OtherAttributesContainer xpdl2:OtherElementsContainer" name="ProcessInterface">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:name="startMethods" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="StartMethod" type="xpdExt:StartMethod">
            <xsd:annotation>
              <xsd:documentation>Lists the start methods associated with the process interface.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:name="intermediateMethods" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="IntermediateMethod" type="xpdExt:IntermediateMethod">
            <xsd:annotation>
              <xsd:documentation>Lists the intermediate events methods that are associated with the process interface.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ProcessInterfaces">
    <xsd:sequence>
      <xsd:element ecore:name="processInterface" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ProcessInterface" type="xpdExt:ProcessInterface">
        <xsd:annotation>
          <xsd:documentation>Lists the process interface associated with the package.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ProcessResourcePatterns">
    <xsd:sequence>
      <xsd:element ecore:name="separationOfDutiesActivities" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="SeparationOfDutiesActivities" type="xpdExt:SeparationOfDutiesActivities"/>
      <xsd:element ecore:name="retainFamiliarActivities" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="RetainFamiliarActivities" type="xpdExt:RetainFamiliarActivities"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="RescheduleTimerScript">
    <xsd:annotation>
      <xsd:documentation>This element is optionally added under xpdl2:TriggerTimer and specifies 
how to recalculate expiry time of timer.
DurationRelativeTo specifies how to treat durations if they are returned by the
script (i.e. as relative to time of reschedule, or to eixsiting timeout for timer event)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="xpdl2:ExpressionType">
        <xsd:attribute ecore:name="durationRelativeTo" name="DurationRelativeTo" type="xpdExt:DurationRelativeToType_._type" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:name="RescheduleDurationType" name="DurationRelativeToType_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="RescheduleTime"/>
      <xsd:enumeration value="ExistingTimeout"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="RescheduleTimers">
    <xsd:annotation>
      <xsd:documentation>This element is optionally added under xpdExt:SignalData when the
given non-cancelling task boundary signal event is configured to 
reschedule timer events also attached to the same task.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="timerEvents" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ActivityRef" type="xpdExt:ActivityRef"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="timerSelectionType" name="TimerSelection" type="xpdExt:RescheduleTimerSelectionType_._type" use="required"/>
  </xsd:complexType>
  <xsd:simpleType ecore:name="RescheduleTimerSelectionType" name="RescheduleTimerSelectionType_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="All"/>
      <xsd:enumeration value="Deadline"/>
      <xsd:enumeration value="Selected"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="RESTServices">
    <xsd:sequence>
      <xsd:element ecore:name="RESTServices" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="RESTService" type="xpdl2:ProcessType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="RetainFamiliarActivities">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:name="activityRef" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ActivityRef" type="xpdExt:ActivityRef"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Retry">
    <xsd:attribute ecore:name="max" name="Max" type="xsd:int"/>
    <xsd:attribute ecore:name="initialPeriod" name="InitialPeriod" type="xsd:int"/>
    <xsd:attribute ecore:name="periodIncrement" name="PeriodIncrement" type="xsd:int"/>
    <xsd:attribute ecore:name="maxRetryAction" name="MaxRetryAction" type="xpdExt:MaxRetryActionType"/>
  </xsd:complexType>
  <xsd:complexType name="ScriptInformation">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:name="expression" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="Expression" type="xpdl2:ExpressionType">
            <xsd:annotation>
              <xsd:documentation>rvalue expression of the assignment</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:name="activity" ecore:reference="xpdl2:Activity_._type" ecore:transient="true" form="qualified" minOccurs="0" name="Activity" type="xsd:anyURI">
            <xsd:annotation>
              <xsd:documentation>transient reference to allow new ScriptInformation items to be associated with an activity without being attached.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:name="direction" ecore:unsettable="false" name="Direction" type="xpdl2:Direction_._type"/>
        <xsd:attribute ecore:name="reference" ecore:unsettable="false" name="Reference" type="xsd:boolean"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="SecurityPolicy">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="UsernameToken"/>
      <xsd:enumeration value="X509Token"/>
      <xsd:enumeration value="SamlToken"/>
      <xsd:enumeration value="Custom"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="SeparationOfDutiesActivities">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:name="activityRef" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ActivityRef" type="xpdExt:ActivityRef"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SignalData">
    <xsd:annotation>
      <xsd:documentation>SignalData added to TriggerResultSignal for Catch Signal Events</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="dataMappings" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DataMapping" type="xpdl2:DataMapping_._type"/>
      <xsd:element ecore:name="rescheduleTimers" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="RescheduleTimers" type="xpdExt:RescheduleTimers"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="StartMethod">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:InterfaceMethod"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="SoapBindingStyle">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="RpcLiteral"/>
      <xsd:enumeration value="DocumentLiteral"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="StructuredDiscriminator">
    <xsd:sequence>
      <xsd:element ecore:name="waitForIncomingPath" form="qualified" name="WaitForIncomingPath" type="xsd:integer"/>
      <xsd:element ecore:name="UpStreamParallelSplit" form="qualified" name="UpStreamParallelSplit" type="xpdl2:IdReferenceString"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType ecore:name="SubProcessStartStrategy" name="SubProcessStartStrategy_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="StartImmediately"/>
      <xsd:enumeration value="ScheduleStart"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType ecore:name="SystemErrorActionType" name="SystemErrorActionType_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:name="halt" ecore:value="1" value="Halt"/>
      <xsd:enumeration ecore:value="2" value="Error"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="TaskLibraryReference">
    <xsd:annotation>
      <xsd:documentation>This element is added under Activity xpdl:Reference element for 
reference tasks that reference an activity in another process / package.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:name="taskLibraryId" name="TaskLibraryId" type="xpdl2:IdReferenceString" use="required"/>
    <xsd:attribute ecore:name="packageRef" name="PackageRef" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType name="TransformScript">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:ExtendedAttributesContainer">
        <xsd:sequence>
          <xsd:element ecore:name="dataMappings" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DataMapping" type="xpdl2:DataMapping_._type"/>
          <xsd:element ecore:name="inputDom" ecore:unique="true" form="qualified" maxOccurs="unbounded" name="InputDom" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This attribute stores the input document for the transformation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:name="outputDom" ecore:unique="true" form="qualified" maxOccurs="unbounded" name="OutputDom" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This attribute stores the output document for the transformation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UserTaskScripts">
    <xsd:sequence>
      <xsd:element ecore:name="openScript" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="OpenScript" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="closeScript" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="CloseScript" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="submitScript" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="SubmitScript" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="scheduleScript" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="ScheduleScript" type="xpdl2:ExpressionType"/>
      <xsd:element ecore:name="rescheduleScript" ecore:resolveProxies="true" form="qualified" minOccurs="0" name="RescheduleScript" type="xpdl2:ExpressionType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ValidationControl">
    <xsd:sequence>
      <xsd:element ecore:name="validationIssueOverrides" form="qualified" maxOccurs="unbounded" minOccurs="0" name="ValidationIssueOverride" type="xpdExt:ValidationIssueOverride"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ValidationIssueOverride">
    <xsd:annotation>
      <xsd:documentation>A given validaiton issue-id and a validation rule override that can control it.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:name="validationIssueId" name="ValidationIssueId" type="xsd:string" use="required"/>
    <xsd:attribute ecore:default="" ecore:name="overrideType" name="OverrideType" type="xpdExt:ValidationIssueOverrideType_._type" use="required"/>
  </xsd:complexType>
  <xsd:simpleType ecore:name="ValidationIssueOverrideType" name="ValidationIssueOverrideType_._type">
    <xsd:annotation>
      <xsd:documentation>Enumeration of various validation rule overrides.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="SuppressUntilNextFlowChange"/>
      <xsd:enumeration ecore:value="2" value="SuppressUntilManualReactivation"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType ecore:name="Visibility" name="Visibility_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration ecore:value="1" value="Private"/>
      <xsd:enumeration ecore:value="2" value="Public"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="WsdlEventAssociation">
    <xsd:attribute ecore:name="eventId" form="qualified" name="EventId" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>This attribute stores the event id of the event associated with the WSDL
 file.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="WorkItemPriority">
    <xsd:annotation>
      <xsd:documentation>This element is added under Activity Resource Patterns for assigning initial priority</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:name="initialPriority" name="InitialPriority" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType name="WsdlGeneration">
    <xsd:attribute ecore:name="soapBindingStyle" name="SoapBindingStyle" type="xpdExt:SoapBindingStyle" use="required">
      <xsd:annotation>
        <xsd:documentation>This attribute stores the binding type of the WSDL generated.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="WsBinding">
    <xsd:attribute ecore:name="name" name="Name" type="xsd:string"/>
    <xsd:attribute ecore:reference="xpdExt:Property" name="extendedProperties">
      <xsd:simpleType>
        <xsd:list itemType="xsd:anyURI"/>
      </xsd:simpleType>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="WsInbound">
    <xsd:annotation>
      <xsd:appinfo ecore:key="operations" source="http://www.eclipse.org/emf/2002/Ecore">
        <operation name="getAllBindings" type="xpdExt:WsBinding" upperBound="-1"/>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="virtualBinding" form="qualified" name="VirtualBinding" type="xpdExt:WsVirtualBinding"/>
      <xsd:element ecore:name="soapHttpBinding" form="qualified" maxOccurs="unbounded" minOccurs="0" name="SoapHttpBinding" type="xpdExt:WsSoapHttpInboundBinding"/>
      <xsd:element ecore:name="soapJmsBinding" form="qualified" maxOccurs="unbounded" minOccurs="0" name="SoapJmsBinding" type="xpdExt:WsSoapJmsInboundBinding"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="WsOutbound">
    <xsd:annotation>
      <xsd:appinfo ecore:key="operations" source="http://www.eclipse.org/emf/2002/Ecore">
        <operation name="getBinding" type="xpdExt:WsBinding"/>
        <operation name="setBinding">
          <parameter name="inboundBinding" type="xpdExt:WsBinding"/>
        </operation>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:name="virtualBinding" form="qualified" minOccurs="0" name="VirtualBinding" type="xpdExt:WsVirtualBinding"/>
      <xsd:element ecore:name="soapHttpBinding" form="qualified" minOccurs="0" name="SoapHttpBinding" type="xpdExt:WsSoapHttpOutboundBinding"/>
      <xsd:element ecore:name="soapJmsBinding" form="qualified" minOccurs="0" name="SoapJmsBinding" type="xpdExt:WsSoapJmsOutboundBinding"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="WsResource">
    <xsd:sequence>
      <xsd:element ecore:name="inbound" form="qualified" minOccurs="0" name="Inbound" type="xpdExt:WsInbound"/>
      <xsd:element ecore:name="outbound" form="qualified" minOccurs="0" name="Outbound" type="xpdExt:WsOutbound"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="WsSecurityPolicy">
    <xsd:complexContent>
      <xsd:extension base="xpdl2:ExtendedAttributesContainer">
        <xsd:attribute ecore:name="governanceApplicationName" name="GovernanceApplicationName" type="xsd:string"/>
        <xsd:attribute ecore:name="type" name="Type" type="xpdExt:SecurityPolicy"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="WsSoapBinding">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:WsBinding">
        <xsd:attribute default="RpcLiteral" ecore:name="bindingStyle" name="BindingStyle" type="xpdExt:SoapBindingStyle"/>
        <xsd:attribute default="1.1" ecore:name="soapVersion" name="SoapVersion" type="xsd:string"/>
        <xsd:attribute ecore:derived="true" ecore:reference="xpdExt:WsSoapSecurity" ecore:transient="true" ecore:volatile="true" name="soapSecurity" type="xsd:IDREF"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="WsSoapHttpInboundBinding">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:WsSoapBinding">
        <xsd:sequence>
          <xsd:element ecore:name="inboundSecurity" form="qualified" name="InboundSecurity" type="xpdExt:WsSoapSecurity"/>
        </xsd:sequence>
        <xsd:attribute ecore:name="endpointUrlPath" name="EndpointUrlPath" type="xsd:anyURI"/>
        <xsd:attribute ecore:name="httpConnectorInstanceName" name="HttpConnectorInstanceName" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="WsSoapHttpOutboundBinding">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:WsSoapBinding">
        <xsd:sequence>
          <xsd:element ecore:name="outboundSecurity" form="qualified" name="OutboundSecurity" type="xpdExt:WsSoapSecurity"/>
        </xsd:sequence>
        <xsd:attribute ecore:name="httpClientInstanceName" name="HttpClientInstanceName" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="WsSoapJmsInboundBinding">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:WsSoapBinding">
        <xsd:sequence>
          <xsd:element name="inboundSecurity" type="xpdExt:WsSoapSecurity"/>
        </xsd:sequence>
        <xsd:attribute ecore:name="outboundConnectionFactory" name="ConnectionFactory" type="xsd:string"/>
        <xsd:attribute ecore:name="inboundConnectionFactoryConfiguration" name="ConnectionFactoryConfigurator" type="xsd:string"/>
        <xsd:attribute ecore:name="inboundDestination" name="InboundDestination" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="WsSoapJmsOutboundBinding">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:WsSoapBinding">
        <xsd:sequence>
          <xsd:element name="outboundSecurity" type="xpdExt:WsSoapSecurity"/>
        </xsd:sequence>
        <xsd:attribute ecore:name="outboundConnectionFactory" name="OutboundConnectionFactory" type="xsd:string"/>
        <xsd:attribute ecore:name="inboundDestination" name="InboundDestination" type="xsd:string"/>
        <xsd:attribute ecore:name="outboundDestination" name="OutboundDestination" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="WsSoapSecurity">
    <xsd:sequence>
      <xsd:element ecore:name="securityPolicy" form="qualified" maxOccurs="unbounded" minOccurs="0" name="SecurityPolicy" type="xpdExt:WsSecurityPolicy"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="WsVirtualBinding">
    <xsd:complexContent>
      <xsd:extension base="xpdExt:WsBinding"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:name="XpdExtDataObjectAttributes" name="DataObjectAttributes">
    <xsd:sequence>
      <xsd:element ecore:name="description" form="qualified" minOccurs="0" name="Description" type="ecore:EString"/>
      <xsd:element ecore:name="properties" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="Property" type="xpdExt:Property"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="externalReference" form="qualified" name="ExternalReference" type="ecore:EString"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="XpdExtProperty" name="Property">
    <xsd:simpleContent>
      <xsd:extension base="ecore:EString">
        <xsd:attribute ecore:name="Name" name="Name" type="ecore:EString" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType ecore:name="XpdExtAttribute" mixed="true" name="XpdExtAttribute_._type">
    <xsd:sequence>
      <xsd:choice ecore:featureMap="group" maxOccurs="unbounded"/>
      <xsd:any ecore:name="any" maxOccurs="unbounded" minOccurs="0" namespace="##any"/>
    </xsd:sequence>
    <xsd:attribute ecore:name="name" name="Name" type="xsd:NMTOKEN" use="required"/>
    <xsd:attribute ecore:name="value" name="Value" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="XpdExtAttributes" name="ExtendedAttributes">
    <xsd:sequence>
      <xsd:element ecore:name="attributes" ecore:resolveProxies="true" form="qualified" maxOccurs="unbounded" minOccurs="0" name="Attribute" type="xpdExt:XpdExtAttribute_._type"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType ecore:name="UpdateType" name="Update_._type">
    <xsd:attribute ecore:name="fromFieldPath" name="FromFieldPath" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Field or javascript child content path e.g. myField.child etc 
If CaseRefField is an array, then FromFieldPath must also reference a multiple sequence.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:simpleType ecore:name="XpdModelType" name="XpdModelType_._type">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PageFlow"/>
      <xsd:enumeration value="TaskLibrary"/>
      <xsd:enumeration value="DecisionFlow"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType ecore:name="AddLinkAssociationsType" name="AddLinkAssociations_._type">
    <xsd:attribute ecore:name="addCaseRefField" name="AddCaseRefField" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Single instance or Array field containing ref(s) to add to the given association (array field is invalid if association multipleicty=1).</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="associationName" name="AssociationName" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="RemoveLinkAssociationsType" name="RemoveLinkAssociations_._type">
    <xsd:attribute ecore:name="associationName" name="AssociationName" type="xsd:string" use="required"/>
    <xsd:attribute ecore:name="removeCaseRefField" name="RemoveCaseRefField" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Single instance or Array field containing ref(s) to add to the given association (array field is invalid if association multipleicty=1).</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType ecore:name="CaseReferenceOperationsType" name="CaseReferenceOperations_._type">
    <xsd:sequence>
      <xsd:element ecore:name="caseRefField" name="CaseRefField" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>The case reference  field or array field name</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="update" minOccurs="0" name="Update" type="xpdExt:Update_._type">
        <xsd:annotation>
          <xsd:documentation>Operation to update the referenced case object with the given local class data.

IT IS IMPLIED that the return CaseRefField IS THE source CaseRefFielld AND THEREFORE CaseRefField will be updated to the new version automatically if the task succeeds.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="delete" minOccurs="0" name="Delete" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation>No further properties are required by the delete operation as everything can be derived from the CaseRefField (including CAC class for the cac.delete(arrayOfRefs) that will be needed for a case reference array.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="addLinkAssociations" minOccurs="0" name="AddLinkAssociations" type="xpdExt:AddLinkAssociations_._type">
        <xsd:annotation>
          <xsd:documentation>Operation to add link(s) (refs) to other case object(s) for a given case-class to case-class association (within the case object identifier by CaseRefField)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="removeLinkAssociations" minOccurs="0" name="RemoveLinkAssociations" type="xpdExt:RemoveLinkAssociations_._type">
        <xsd:annotation>
          <xsd:documentation>Operation to remove link(s) (refs) to other case object(s) for a given case-class to case-class association (within the case object identified by CaseRefField)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="GlobalDataOperation">
    <xsd:sequence>
      <xsd:element ecore:name="caseAccessOperations" minOccurs="0" name="CaseAccessOperations" type="xpdExt:CaseAccessOperations_._type">
        <xsd:annotation>
          <xsd:documentation>Operations performed via case access classes that do not require case reference field.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="caseReferenceOperations" minOccurs="0" name="CaseReferenceOperations" type="xpdExt:CaseReferenceOperations_._type">
        <xsd:annotation>
          <xsd:documentation>Operatoins performed on  cae objects identiifed by already populated case reference(s) field</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType ecore:name="DeleteByCaseIdentifierType" name="DeleteByCaseIdentifier_._type">
    <xsd:attribute ecore:name="fieldPath" name="FieldPath" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Field or javascript child content path e.g. myField.child etc</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="identifierName" name="IdentifierName" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="CompositeIdentifierType" name="CompositeIdentifier_._type">
    <xsd:attribute ecore:name="fieldPath" name="FieldPath" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Field or javascript child content path e.g. myField.child etc</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="identifiername" name="Identifiername" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:complexType ecore:name="DeleteByCompositeIdentifiersType" name="DeleteByCompositeIdentifiers_._type">
    <xsd:sequence>
      <xsd:choice ecore:featureMap="group" maxOccurs="unbounded">
        <xsd:element ecore:lowerBound="1" ecore:name="compositeIdentifier" ecore:upperBound="-1" minOccurs="0" name="CompositeIdentifier" type="xpdExt:CompositeIdentifier_._type">
          <xsd:annotation>
            <xsd:documentation>Identifier name and source value pairs</xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType ecore:name="CreateType" name="Create_._type">
    <xsd:attribute ecore:name="fromFieldPath" name="FromFieldPath" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Field or javascript child content path e.g. myField.child etc</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:name="toCaseRefField" name="ToCaseRefField" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>If FromClassField is an array then ToClassRefField must also be an array (and visa versa)</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType ecore:name="CaseAccessOperationsType" name="CaseAccessOperations_._type">
    <xsd:sequence>
      <xsd:element ecore:name="caseClassExternalReference" name="CaseClassExternalReference" type="xpdl2:ExternalReference_._type">
        <xsd:annotation>
          <xsd:documentation>Standard xpdl2 ExternalReference to CaseClass concerned.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="create" minOccurs="0" name="Create" type="xpdExt:Create_._type">
        <xsd:annotation>
          <xsd:documentation>Operation to create new case object from given local class field and assign return field to a refernece to it. </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="deleteByCaseIdentifier" minOccurs="0" name="DeleteByCaseIdentifier" type="xpdExt:DeleteByCaseIdentifier_._type">
        <xsd:annotation>
          <xsd:documentation>Operation to delete an existing case object whose named case identifier is equal to the value of the provided field value</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ecore:name="deleteByCompositeIdentifiers" minOccurs="0" name="DeleteByCompositeIdentifiers" type="xpdExt:DeleteByCompositeIdentifiers_._type">
        <xsd:annotation>
          <xsd:documentation>Operation to delete an existing case object whose composite identfiers match the values of the Field that each is paired with.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType ecore:name="DataWorkItemAttributeMapping" name="DataWorkItemAttributeMapping_._type">
    <xsd:sequence>
      <xsd:element ecore:name="attribute" form="qualified" name="WorkItemAttribute" type="xsd:string"/>
      <xsd:element ecore:name="processData" form="qualified" name="ProcessData" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType ecore:name="ProcessDataWorkItemAttributeMappings" name="ProcessDataWorkItemAttributeMappings_._type">
    <xsd:sequence>
      <xsd:element ecore:name="dataWorkItemAttributeMapping" form="qualified" maxOccurs="unbounded" minOccurs="0" name="DataWorkItemAttributeMapping" type="xpdExt:DataWorkItemAttributeMapping_._type"/>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>
