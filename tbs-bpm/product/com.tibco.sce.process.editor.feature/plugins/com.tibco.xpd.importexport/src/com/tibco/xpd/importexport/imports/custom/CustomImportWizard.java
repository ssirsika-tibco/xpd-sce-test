/*
 * Copyright (c) TIBCO Software Inc 2004, 2007. All rights reserved.
 */
package com.tibco.xpd.importexport.imports.custom;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IContributor;
import org.eclipse.core.runtime.IExecutableExtension;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.ui.dialogs.SelectionDialog;
import org.osgi.framework.Bundle;

import com.tibco.xpd.importexport.ImportExportPlugin;
import com.tibco.xpd.importexport.internal.Messages;
import com.tibco.xpd.importexport.pluginGenerator.IPluginData;
import com.tibco.xpd.navigator.pickers.BaseObjectPicker;
import com.tibco.xpd.resources.XpdResourcesPlugin;
import com.tibco.xpd.resources.projectconfig.ProjectConfig;
import com.tibco.xpd.resources.projectconfig.SpecialFolder;
import com.tibco.xpd.ui.importexport.importwizard.AbstractImportWizard;
import com.tibco.xpd.ui.projectexplorer.viewerfilters.FileExtensionInclusionFilter;
import com.tibco.xpd.ui.projectexplorer.viewerfilters.SpecialFoldersOnlyFilter;
import com.tibco.xpd.ui.projectexplorer.viewerfilters.XpdNatureProjectsOnly;

/**
 * This class is the implementation of <code>IImportWizard</code> for all custom
 * import wizards generated by the Import/Export wizard plug-in generator.
 * 
 * @author njpatel
 * 
 */
public class CustomImportWizard extends AbstractImportWizard implements
        IExecutableExtension {

    /**
     * Plugin properties file
     */
    private static final String PLUGIN_PROPERTIES = "plugin.properties"; //$NON-NLS-1$

    private Bundle bundle;

    private URL[] xslts;

    private String systemId;

    // Target special folders to contain the imported resource
    private List<String> specialFolderKinds = null;

    private Properties pluginProperties;

    @Override
    protected String getImportFileExtension() {
        return getProperty(IPluginData.PROP_OUTPUT_FILE_EXT);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.core.runtime.IExecutableExtension#setInitializationData(org
     * .eclipse.core.runtime.IConfigurationElement, java.lang.String,
     * java.lang.Object)
     */
    public void setInitializationData(IConfigurationElement config,
            String propertyName, Object data) throws CoreException {
        IContributor contributor = config.getContributor();

        try {
            if (contributor != null) {
                String name = contributor.getName();

                if (name != null) {
                    bundle = Platform.getBundle(name);

                    if (bundle != null) {
                        pluginProperties =
                                getPluginProperties(bundle, PLUGIN_PROPERTIES);
                        // Initialise the wizard
                        init();

                    } else {
                        throw new NullPointerException(
                                "Unable to get the bundle for " + name); //$NON-NLS-1$
                    }
                } else {
                    throw new NullPointerException(
                            "Unable to get the name of the contributor of " + config.getName()); //$NON-NLS-1$
                }
            } else {
                throw new NullPointerException(
                        "Unable to get the contributor of " + config.getName()); //$NON-NLS-1$
            }
        } catch (Exception e) {
            throw new CoreException(new Status(IStatus.ERROR,
                    ImportExportPlugin.PLUGIN_ID, IStatus.OK, null, e));
        }
    }

    /**
     * Get the properties of this custom import wizard.
     * 
     * @return {@link Properties} or <code>null</code> if the properties have
     *         not been loaded.
     * @since 3.5
     */
    public final Properties getImportProperties() {
        return pluginProperties;
    }

    /*
     * (non-Javadoc)
     * 
     * @seecom.tibco.xpd.ui.importexport.utils.ImportExportTransformer.
     * ITransformationStylesheetsProvider#getXslts()
     */
    public URL[] getXslts() {
        if (xslts == null) {
            if (bundle != null) {
                String fileName = getProperty(IPluginData.PROP_XSL);

                if (fileName != null) {
                    xslts = new URL[] { bundle.getResource(fileName) };
                }
            }
        }

        return xslts;
    }

    public Map<String, String> getXsltParameters() {
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.tibco.xpd.ui.importexport.importWizard.IImportWizardPageProvider#
     * getDestinationContainerSelectionDialog()
     */
    public SelectionDialog getDestinationContainerSelectionDialog() {
        BaseObjectPicker picker = new BaseObjectPicker(getShell());
        picker.setAllowMultiple(false);
        picker.setInput(ResourcesPlugin.getWorkspace().getRoot());
        picker.setTitle(Messages.CustomImportWizard_picker_title);
        picker.setMessage(Messages.CustomImportWizard_picker_message);

        // Only include xpd projects
        picker.addFilter(new XpdNatureProjectsOnly());
        // Include no files
        Set<String> extensions = new HashSet<String>();
        picker.addFilter(new FileExtensionInclusionFilter(extensions));

        // Set special folder filter
        if (specialFolderKinds != null) {
            Set<String> sf = new HashSet<String>(specialFolderKinds);
            picker.addFilter(new SpecialFoldersOnlyFilter(sf));
        }

        return picker;
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.tibco.xpd.ui.importexport.importWizard.IImportWizardPageProvider#
     * getFileExtensionFilter()
     */
    public String[] getFileExtensionFilter() {
        String filter = getProperty(IPluginData.PROP_FILE_EXT_FILTER);

        if (filter != null) {
            if (filter.trim().length() > 0) {
                return filter.split(", "); //$NON-NLS-1$
            }
        }
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.tibco.xpd.ui.importexport.importWizard.IImportWizardPageProvider#
     * validateDestinationContainer(org.eclipse.core.resources.IContainer)
     */
    public IStatus validateDestinationContainer(IContainer container) {
        IStatus status = Status.OK_STATUS;

        /*
         * Validate that the folder selected is a special folder of the right
         * kind, or is contained in the special folder of the right kind, based
         * on the special folder filter set in the custom wizard.
         */
        if (specialFolderKinds != null && !specialFolderKinds.isEmpty()) {
            if (container != null && container instanceof IFolder) {
                IFolder folder = (IFolder) container;
                ProjectConfig config =
                        XpdResourcesPlugin.getDefault().getProjectConfig(folder
                                .getProject());

                if (config != null && config.getSpecialFolders() != null) {
                    SpecialFolder sFolder =
                            config.getSpecialFolders()
                                    .getFolderContainer(folder);

                    if (sFolder != null
                            && specialFolderKinds.contains(sFolder.getKind())) {
                        status = Status.OK_STATUS;
                    } else {
                        status =
                                new Status(
                                        IStatus.ERROR,
                                        ImportExportPlugin.PLUGIN_ID,
                                        IStatus.OK,
                                        Messages.CustomImportWizard_invalidImportDest_message,
                                        null);
                    }
                }
            }
        }

        return status;
    }

    /**
     * Initialise the import wizard.
     */
    private void init() {
        // Get all required properties
        String wizardTitle = getProperty(IPluginData.PROP_WIZARD_NAME);
        String wizardMessage = getProperty(IPluginData.PROP_WIZARD_DESCRIPTION);
        String kinds = getProperty(IPluginData.PROP_SPECIALFOLDER_FILTER);

        // Set wizard title
        if (wizardTitle != null) {
            setWindowTitle(wizardTitle);
        }

        // Set wizard message
        if (wizardMessage != null) {
            setWindowMessage(wizardMessage);
        }

        if (kinds != null) {
            specialFolderKinds =
                    new ArrayList<String>(Arrays.asList(kinds.split(", "))); //$NON-NLS-1$
        }
    }

    @Override
    public String getSystemId() {

        if (systemId == null) {
            // Set system ID for the transformer
            if (bundle != null) {
                String fileName = getProperty(IPluginData.PROP_XSL);

                if (fileName != null) {
                    systemId = bundle.getResource(fileName).toString();
                }
            }
        }

        return systemId;
    }

    /**
     * Get the properties file from the given bundle
     * 
     * @param bundle
     * @param propertiesFile
     * @return
     * @throws IOException
     */
    protected Properties getPluginProperties(Bundle bundle,
            String propertiesFile) throws IOException {
        if (bundle != null && propertiesFile != null) {
            URL url = bundle.getResource(propertiesFile);

            if (url != null) {
                Properties properties = null;
                InputStream inStream = url.openStream();

                if (inStream != null) {
                    properties = new Properties();
                    properties.load(inStream);

                    // Close the stream
                    try {
                        inStream.close();
                    } catch (IOException e) {
                        ; // Do nothing
                    }
                }

                return properties;
            }
        }
        return null;
    }

    /**
     * Get the value of the given <i>key</i> from the plugin properties file.
     * 
     * @param key
     * @return The value of the given <i>key</i>.
     */
    private String getProperty(String key) {
        String value = null;

        if (pluginProperties != null) {
            value = pluginProperties.getProperty(key);
        }

        return value;
    }
}
