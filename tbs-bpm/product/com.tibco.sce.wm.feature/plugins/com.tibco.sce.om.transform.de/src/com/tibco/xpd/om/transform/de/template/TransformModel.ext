extension com::tibco::xpd::om::transform::de::template::Extensions reexport;

//organizationModel
create de::DirectoryType this transform(om::OrgModel s) :
	setName(s.name) ->
	setVersion(s.version) ->
	capability.addAll(s.capabilities.transform()) ->
	privilege.addAll(s.privileges.transform()) ->
	group1.addAll(s.groups.transform()) ->	
	location.addAll(s.locations.transform()) ->
	organization.addAll(s.organizations.transform()) ->
	systemAction.addAll(s.systemActions.transform()) ->
	resourceAttribute.addAll(s.getHumanResourceTypeAttributes().transform()) ->
	metaModel.add(createMetamodel(s.embeddedMetamodel));


cached List[om::AttributeType] getHumanResourceTypeAttributes(om::OrgModel s) :
	s.humanResourceType == null ? {} : s.humanResourceType.attributes;
	
//attribute
create demeta::ParameterDescriptor this transform(om::Attribute s) :
	transformNamedElement(s, this) ->
	setType(s.type.transform()) ->
	setEnumSet((s.type == om::AttributeType::Enum || s.type == om::AttributeType::EnumSet)? s.values.transformToEnumSet(): null);

//attributeType	
cached demeta::ParameterType transform(om::AttributeType s) :
	switch(s) {
		case om::AttributeType::Text     : demeta::ParameterType::String
		case om::AttributeType::Decimal  : demeta::ParameterType::Decimal
		case om::AttributeType::Integer  : demeta::ParameterType::Integer
		case om::AttributeType::Boolean  : demeta::ParameterType::Boolean
		case om::AttributeType::DateTime : demeta::ParameterType::DateTime
		case om::AttributeType::Date     : demeta::ParameterType::Date
		case om::AttributeType::Time 	 : demeta::ParameterType::Time
		case om::AttributeType::Enum     : demeta::ParameterType::Enum
		case om::AttributeType::EnumSet  : demeta::ParameterType::EnumSet
		case om::AttributeType::^Set     : demeta::ParameterType::^Set
		default : demeta::ParameterType::String
	};
	
//allocation methods	
cached de::AllocationMethod transformAllocationMethod(String s) :
	switch(s) {
		case "ANY"      : de::AllocationMethod::ANY
		case "NEXT"     : de::AllocationMethod::NEXT
		default : de::AllocationMethod::PLUGIN
	};

transformToEnumSet(List[om::EnumValue] s) :
	let x = new demeta::EnumSet : x.enumValue.addAll(s.transformEnumValue()) -> x.enumValue.isEmpty ? null : x;  
	
transformToEnumSet(List[String] s) :
	let x = new demeta::EnumSet : x.enumValue.addAll(s.transformEnumValue()) -> x.enumValue.isEmpty ? null : x;  	

transformEnumValue(om::EnumValue s) :
    let e = new demeta::EnumValue : e.setValue(s.value) -> e;
    
transformEnumValue(String s) :
    let e = new demeta::EnumValue : e.setValue(s) -> e;    
    
//capabilities
create de::Capability transform(om::Capability s) :
	transformOrgElement(s, this) ->
	setParameterDescriptor(s.qualifierAttribute.transform());

//privileges
create de::Privilege transform(om::Privilege s) :
	transformOrgElement(s, this) ->
	setParameterDescriptor(s.qualifierAttribute.transform());
	
//groups
create de::Group transform(om::Group s) :
	transformOrgElement(s, this) ->
	groupCapability.addAll(s.capabilitiesAssociations.transform()) ->
	groupPrivilege.addAll(s.privilegeAssociations.transform()) ->
	setAllocMethod(s.allocationMethod.transformAllocationMethod()) ->
	setPlugin(allocMethod == de::AllocationMethod::PLUGIN ? s.allocationMethod : null) ->
	systemAction.addAll(s.systemActions.transform()) ->
	group2.addAll(s.subGroups.transform());

//qualifiedCapability 
// de::QualifiedCapability.qualifier1 is for the attribute (String type) and qualifier is for the nested element. 
create de::QualifiedCapability this transform(om::CapabilityAssociation s) :
	setCapabilityId(s.capability.transform()) ->
	setQualifier1(s.qualifierValue != null ? 
		getQualifierValue(s.qualifierValue) 
		: (s.capability.qualifierAttribute != null ? 
			getAttributeDefaultValue(s.capability.qualifierAttribute) 
			: null)) ->
		qualifier.addAll(s.qualifierValue != null ? 
			getMultiCapabilityQualifierValue(s.qualifierValue) 
				: (s.capability.qualifierAttribute != null ? 
				getMultiCapabilityAttributeDefaultValue(s.capability.qualifierAttribute) 
				: {}));
	
// qualifiedPrivilege
// de::QualifiedPrivilege.qualifier1 is for the attribute (String type) and qualifier is for the nested element. 
create de::QualifiedPrivilege this transform(om::PrivilegeAssociation s) :
	setPrivilegeId(s.privilege.transform()) ->
	setQualifier1(s.qualifierValue != null ? 
		getQualifierValue(s.qualifierValue) 
		: (s.privilege.qualifierAttribute != null ? 
			getAttributeDefaultValue(s.privilege.qualifierAttribute) 
			: null)) ->
		qualifier.addAll(s.qualifierValue != null ? 
			getMultiPrivilegeQualifierValue(s.qualifierValue) 
				: (s.privilege.qualifierAttribute != null ? 
				getMultiPrivilegeAttributeDefaultValue(s.privilege.qualifierAttribute) 
				: {}));


//Privilege multiple qualifier value (EnumSet case) (added later in form of subelements).
//QualifiedPrivilege uses de::QualifierType for subelements.
//Enum values set by user.
List[de::QualifierType] getMultiPrivilegeQualifierValue(om::AttributeValue v) :
		v.type == om::AttributeType::EnumSet ? v.enumSetValues.transformToQualifierType() : 
		(v.type == om::AttributeType::^Set ? v.setValues.transformToQualifierType() : {});
//Default enum set values.
List[de::QualifierType] getMultiPrivilegeAttributeDefaultValue(om::Attribute v) :
	v.type == om::AttributeType::EnumSet ? v.defaultEnumSetValues.transformToQualifierType() : {};

de::QualifierType transformToQualifierType(om::EnumValue v) :
		let e = new de::QualifierType : e.setValue(v.value) -> e;
		
de::QualifierType transformToQualifierType(String str) :
		let e = new de::QualifierType : e.setValue(str) -> e;		
				
//Capability multiple qualifier value (EnumSet case) (added later in form of subelements).
//QualifiedCapability uses de::QualifierType1 for subelements.
//Enum values set by user.
List[de::QualifierType1] getMultiCapabilityQualifierValue(om::AttributeValue v) :
		v.type == om::AttributeType::EnumSet ? v.enumSetValues.transformToQualifierType1() : 
		(v.type == om::AttributeType::^Set ? v.setValues.transformToQualifierType1() : {});
//Default enum set values.
List[de::QualifierType1] getMultiCapabilityAttributeDefaultValue(om::Attribute v) :
	v.type == om::AttributeType::EnumSet ? v.defaultEnumSetValues.transformToQualifierType1() : {};

de::QualifierType1 transformToQualifierType1(om::EnumValue v) :
		let e = new de::QualifierType1 : e.setValue(v.value) -> e;		

de::QualifierType1 transformToQualifierType1(String str) :
		let e = new de::QualifierType1 : e.setValue(str) -> e;		


//Gets attribute's default value in a form of a string.
String getAttributeDefaultValue(om::Attribute v) :
	switch(v.type) {
		case om::AttributeType::Enum : (!v.defaultEnumSetValues.isEmpty ? v.defaultEnumSetValues.first().value : null)		
		case om::AttributeType::EnumSet : null
		default : v.defaultValue
	};
	
//Gets attribute's value in a form of a string.
String getQualifierValue(om::AttributeValue v) :
	switch(v.type) {
		case om::AttributeType::Enum : (!v.enumSetValues.isEmpty ? v.enumSetValues.first().value : null)
		case om::AttributeType::EnumSet : null
		default : (v.value == '' ? null : v.value)
	};
	
//get the attribute value
//transformQualifierValue(om::AttributeValue v, de::QualifiedPrivilege s) :
//	v.type == om::AttributeType::Enum || v.type == om::AttributeType::EnumSet ? (!v.enumSetValues.isEmpty ? s.setQualifier(v.enumSetValues.first().value) : null) : s.setQualifier(v.value);
	
//rewrites NamedElement values to NamedEntity values
transformNamedElement(om::NamedElement s, demeta::NamedEntity d) :
	d.setId(s.id) ->
	d.setName(s.name) -> 
	d.setLabel(s.displayName);

//rewrites OrgElement values to OrgEntity values
transformOrgElement(om::OrgElement s, de::OrgEntity d) :
	transformNamedElement(s, d);
	//move to other OrgRelationship, Resource, ResourceGroup, PositionHeld
	//d.setStartDate(s.startDate.eDateToString()) ->
	//d.setEndDate(s.endDate.eDateToString());
	
//parameter value
create de::Parameter this transform(om::AttributeValue s) :
	setDescriptor(s.attribute.transform()) ->
	setValue(s.value) ->
	setEnumSet((s.type == om::AttributeType::Enum || s.type == om::AttributeType::EnumSet)? s.enumSetValues.transformToEnumSet(): 
	     (s.type == om::AttributeType::^Set ? s.setValues.transformToEnumSet() : null));
	

//organizations
create de::Organization this transform(om::Organization s) :
	transformOrgElement(s, this) ->
	orgUnit.addAll(s.units.transform()) ->
	orgRelationship.addAll(s.orgUnitRelationships.transform()) ->
	setLocationId(s.location.transform()) ->
	parameter.addAll(s.attributeValues.transform()) ->
	setAllocMethod(s.allocationMethod.transformAllocationMethod()) ->
	setPlugin(allocMethod == de::AllocationMethod::PLUGIN ? s.allocationMethod : null) -> 
	setType(transform((om::OrganizationType) s.type));
	
//orgUnits
create de::OrgUnit this transform(om::OrgUnit s) :
	transformOrgElement(s, this) ->
	setLocationId(s.location.transform()) ->
	setFeatureId(s.feature.transform()) ->
	orgPrivilege.addAll(s.privilegeAssociations.transform()) ->
	position.addAll(s.positions.transform()) ->
	setAllocMethod(s.allocationMethod.transformAllocationMethod()) ->
	setPlugin(allocMethod == de::AllocationMethod::PLUGIN ? s.allocationMethod : null) ->
	systemAction.addAll(s.systemActions.transform()) ->
	parameter.addAll(s.attributeValues.transform());

//orgUnitRelationships
create de::OrgRelationship this transform(om::OrgUnitRelationship s) :
	transformOrgElement(s, this) ->
	!s.isHierarchical ? (setStartDate(s.startDate.eDateToString()) ->
	setEndDate(s.endDate.eDateToString())) : null ->
	setFrom(s.from.transform()) ->
	setTo(s.to.transform()) ->
	setHierarchical(s.isHierarchical) ->
	parameter.addAll(s.attributeValues.transform()) ->
	setType(transform((om::OrgUnitRelationshipType) s.type));

	
//positions
create de::Position this transform(om::Position s) :
	transformOrgElement(s, this) ->
	setLocationId(s.location.transform()) ->
	setFeatureId(s.feature.transform()) -> 
	reqCapability.addAll(s.capabilitiesAssociations.transform()) ->
	posPrivilege.addAll(s.privilegeAssociations.transform()) ->
	parameter.addAll(s.attributeValues.transform()) ->
	systemAction.addAll(s.systemActions.transform()) ->
	setAllocMethod(s.allocationMethod.transformAllocationMethod()) ->
	setPlugin(allocMethod == de::AllocationMethod::PLUGIN ? s.allocationMethod : null) ->
	setIdealNumber(s.idealNumber);
	
//systemActions
create de::SystemAction this transform(om::SystemAction s) :
	setComponent(s.component) ->
	setName(s.actionId) ->
	reqPrivilege.addAll(s.privilegeAssociations.transform());

//orgUnitFeatures	
create demeta::OrgUnitFeature this transform(om::OrgUnitFeature s) :	
	transformNamedElement(s, this) ->
	setLowerBound(s.lowerBound) ->
	setUpperBound(s.upperBound) ->
	setContext(s.contextRelationshipType.transform()) ->
	setType((demeta::ConceptNoun) transform(s.featureType));
	
//positionFeatures	
create demeta::MultipleFeature this transform(om::PositionFeature s) :	
	transformNamedElement(s, this) ->
	setLowerBound(s.lowerBound) ->
	setUpperBound(s.upperBound) ->
	setType((demeta::ConceptNoun) transform((om::PositionType) s.featureType));


//organizationTypes	
create demeta::OrganizationType this transform(om::OrganizationType s) :	
	transformNamedElement(s, this) ->
	orgUnitFeature.addAll(s.orgUnitFeatures.transform()) ->
	parameterDescriptor.addAll(s.attributes.transform()) ->
	createMetamodel((om::OrgMetaModel) s.eContainer).organizationType.add(this);

//orgUnitTypes
create demeta::OrgUnitType this transform(om::OrgUnitType s) :	
	transformNamedElement(s, this) ->
	orgUnitFeature.addAll(s.orgUnitFeatures.transform()) ->
	positionFeature.addAll(s.positionFeatures.transform()) ->
	parameterDescriptor.addAll(s.attributes.transform()) ->
	createMetamodel((om::OrgMetaModel) s.eContainer).orgUnitType.add(this);

//orgUnitRelationshipType
create demeta::OrgRelationshipType this transform(om::OrgUnitRelationshipType s) :	
	transformNamedElement(s, this) ->
	setHierarchical(true) ->
	parameterDescriptor.addAll(s.attributes.transform()) ->
	createMetamodel((om::OrgMetaModel) s.eContainer).orgRelationshipType.add(this);
	
//positionType
create demeta::PositionType this transform(om::PositionType s) :	
	transformNamedElement(s, this) ->
	parameterDescriptor.addAll(s.attributes.transform()) ->
	createMetamodel((om::OrgMetaModel) s.eContainer).positionType.add(this);


//locations
create de::Location this transform(om::Location s) :	
	transformOrgElement(s, this) ->
	setLocale(s.locale) ->
	setTimezone(s.timeZone) ->
	parameter.addAll(s.attributeValues.transform()) ->
	setAllocMethod(s.allocationMethod.transformAllocationMethod()) ->
	setPlugin(allocMethod == de::AllocationMethod::PLUGIN ? s.allocationMethod : null) ->
	setType(transform((om::LocationType) s.type));
	
//location type	
create demeta::LocationType this transform(om::LocationType s) :	
	transformNamedElement(s, this) ->
	parameterDescriptor.addAll(s.attributes.transform()) ->
	createMetamodel((om::OrgMetaModel) s.eContainer).locationType.add(this);	
	
	
//meta root
create demeta::MetaModelType createMetamodel(om::OrgMetaModel s) :
	locationType.addAll(s.locationTypes.transform()) ->
	positionType.addAll(s.positionTypes.transform()) ->
	orgUnitType.addAll(s.orgUnitTypes.transform()) ->
	organizationType.addAll(s.organizationTypes.transform()) ->
	orgRelationshipType.addAll(s.orgUnitRelationshipTypes.transform());	
	
//transform any null references
transform(Void s) :	
	null;
	