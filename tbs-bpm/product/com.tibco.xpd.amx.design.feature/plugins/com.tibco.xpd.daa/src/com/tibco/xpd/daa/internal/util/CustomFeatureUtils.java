/*
 * Copyright (c) TIBCO Software Inc 2004, 2011. All rights reserved.
 */
package com.tibco.xpd.daa.internal.util;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.emf.common.util.EList;

import com.tibco.amf.model.productfeature.Feature;
import com.tibco.amf.model.productfeature.IncludedPlugin;
import com.tibco.amf.model.productfeature.ProductFeatureFactory;
import com.tibco.xpd.bom.gen.extensions.BOMGenerator2ExtensionHelper;
import com.tibco.xpd.daa.internal.util.PluginManifestHelper.PluginProjectDetails;


/**
 * Utility class for the custom feature
 * 
 * @author mtorres
 * 
 */
public final class CustomFeatureUtils {


    /**
     * For a given BOM generator extension id & a set of BOM resources, this
     * method returns a Map of plug-in id generated by BOM generator(key) & its
     * version(value)
     * 
     * @param projectBOMResources
     * @param extensionId
     * @return
     */
    public static Map<String, String> getGeneratedEMFProjectIdsWithVersion(
            Set<IResource> projectBOMResources, String extensionId) {
        Map<String, String> generatedEMFProjectIds =
                new HashMap<String, String>();
        for (IResource bomResource : projectBOMResources) {
            if (bomResource != null && bomResource.isAccessible()) {
                Collection<IProject> generatedProjects =
                        BOMGenerator2ExtensionHelper.getInstance()
                                .getGeneratedProjects((IFile) bomResource,
                                        extensionId);
                for (IProject eachProject : generatedProjects) {
                    if (eachProject != null && eachProject.isAccessible()) {
                        PluginProjectDetails pluginProjectDetails =
                                PluginManifestHelper
                                        .getPluginProjectDetails(eachProject);
                        generatedEMFProjectIds.put(pluginProjectDetails
                                .getBundleId(), pluginProjectDetails
                                .getBundleVersion());
                    }
                }
            }
        }
        return generatedEMFProjectIds;
    }
    


    /**
     * creates a IncudedPlugin for passed bundleId & version
     * 
     * @param bundleId
     * @param bundleVersion
     * @return
     */
    public static IncludedPlugin createIncludedPlugin(String bundleId,
            String bundleVersion) {
        IncludedPlugin rb =
                ProductFeatureFactory.eINSTANCE.createIncludedPlugin();
        rb.setId(bundleId);
        rb.setVersion(bundleVersion);
        return rb;
    }
    


    /**
     * Adds all generated EMF projects in Studio Project to the custom feature
     * file generated for the Studio Project
     * 
     * @param customFeature
     * @param generatedPlugins
     */
    public static void addIncludedPlugins(Feature customFeature,
            List<IncludedPlugin> generatedPlugins) {
        if (customFeature != null && generatedPlugins != null
                && !generatedPlugins.isEmpty()) {
            for (IncludedPlugin generatedPlugin : generatedPlugins) {
                boolean generatedPluginMentioned =
                        isGeneratedPluginMentioned(customFeature,
                                generatedPlugin);
                if (!generatedPluginMentioned) {
                    IncludedPlugin includedPlugin =
                        CustomFeatureUtils.createIncludedPlugin(generatedPlugin.getId(),
                                    generatedPlugin.getVersion());
                    customFeature.getPlugins().add(includedPlugin);
                }
            }
        }
    }

    private static boolean isGeneratedPluginMentioned(Feature customFeature,
            IncludedPlugin plugInToInclude) {
        boolean plugInMentioned = false;
        EList<IncludedPlugin> featurePlugins = customFeature.getPlugins();
        for (IncludedPlugin plugin : featurePlugins) {
            if (plugin.getId().equals(plugInToInclude.getId())) {
                plugInMentioned = true;
                break;
            }
        }
        return plugInMentioned;
    }
}