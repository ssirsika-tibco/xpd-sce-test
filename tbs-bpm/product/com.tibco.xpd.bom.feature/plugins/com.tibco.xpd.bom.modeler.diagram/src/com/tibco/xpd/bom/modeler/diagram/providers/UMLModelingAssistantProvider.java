/*
 * Copyright (c) TIBCO Software Inc 2007. All rights reserved.
 */
package com.tibco.xpd.bom.modeler.diagram.providers;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.SelectExistingElementForSourceOperation;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.SelectExistingElementForTargetOperation;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.dialogs.ElementListSelectionDialog;
import org.eclipse.uml2.uml.Classifier;

import com.tibco.xpd.bom.modeler.diagram.edit.parts.AssociationClassEditPart;
import com.tibco.xpd.bom.modeler.diagram.edit.parts.CanvasPackageEditPart;
import com.tibco.xpd.bom.modeler.diagram.edit.parts.ClassEditPart;
import com.tibco.xpd.bom.modeler.diagram.edit.parts.EnumerationEditPart;
import com.tibco.xpd.bom.modeler.diagram.edit.parts.PackagePackageContentsCompartmentEditPart;
import com.tibco.xpd.bom.modeler.diagram.edit.parts.PrimitiveTypeEditPart;
import com.tibco.xpd.bom.modeler.diagram.part.BOMDiagramEditorPlugin;
import com.tibco.xpd.bom.modeler.diagram.part.Messages;
import com.tibco.xpd.bom.resources.ui.util.BomUIUtil;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.util.WorkingCopyUtil;

/**
 * @generated
 */
public class UMLModelingAssistantProvider extends ModelingAssistantProvider {

    /**
     * @generated NOT
     */
    @Override
    public List<?> getTypesForPopupBar(IAdaptable host) {
        IGraphicalEditPart editPart =
                (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);

        List<IElementType> types = new ArrayList<IElementType>();
        // Object obj = editPart.resolveSemanticElement();

        // Need this here as its not generated (a result of not using
        // nested edit parts
        if (editPart instanceof PackagePackageContentsCompartmentEditPart) {
            addPackageElements(types);
        } else {
            types = getTypesForPopupBarGen(host);
        }

        return types;
    }

    /**
     * @generated NOT
     * 
     *            Remove autogenerated AssociationClass entries on main canvas
     */
    public List<IElementType> getTypesForPopupBarGen(IAdaptable host) {
        List<IElementType> types = new ArrayList<IElementType>();
        IGraphicalEditPart editPart =
                (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
        if (editPart instanceof ClassEditPart) {
            types.add(UMLElementTypes.Property_2001);
            types.add(UMLElementTypes.Operation_2002);

        } else if (editPart instanceof EnumerationEditPart) {
            types.add(UMLElementTypes.EnumerationLiteral_2003);

        } else if (editPart instanceof AssociationClassEditPart) {
            types.add(UMLElementTypes.Property_2004);
            types.add(UMLElementTypes.Operation_2005);

        } else if (editPart instanceof CanvasPackageEditPart) {
            addPackageElements(types);
        }
        return types;
    }

    /**
     * Add element types for a package to the given list.
     * 
     * @param types
     */
    private void addPackageElements(List<IElementType> types) {
        if (types != null) {
            types.add(UMLElementTypes.Package_1001);
            types.add(UMLElementTypes.Class_1002);
            types.add(UMLElementTypes.PrimitiveType_1003);
            types.add(UMLElementTypes.Enumeration_1004);
        }
    }

    /**
     * @generated NOT
     */
    @Override
    public List<IElementType> getRelTypesOnSource(IAdaptable source) {
        List<IElementType> types = new ArrayList<IElementType>();
        IGraphicalEditPart sourceEditPart =
                (IGraphicalEditPart) source
                        .getAdapter(IGraphicalEditPart.class);

        if (sourceEditPart instanceof ClassEditPart) {
            types.add(UMLElementTypes.Association_3002);
            types.add(UMLElementTypes.Generalization_3001);
        } else if (sourceEditPart instanceof PrimitiveTypeEditPart) {
            types.add(UMLElementTypes.Generalization_3001);

        } else if (sourceEditPart instanceof EnumerationEditPart) {
            types.add(UMLElementTypes.Generalization_3001);

        }

        return types;
    }

    /**
     * @generated NOT
     */
    @Override
    public List<IElementType> getRelTypesOnTarget(IAdaptable target) {
        List<IElementType> types = new ArrayList<IElementType>();
        IGraphicalEditPart targetEditPart =
                (IGraphicalEditPart) target
                        .getAdapter(IGraphicalEditPart.class);

        if (targetEditPart instanceof ClassEditPart) {
            types.add(UMLElementTypes.Association_3002);
            types.add(UMLElementTypes.Generalization_3001);

        } else if (targetEditPart instanceof PrimitiveTypeEditPart) {
            types.add(UMLElementTypes.Generalization_3001);

        } else if (targetEditPart instanceof EnumerationEditPart) {
            types.add(UMLElementTypes.Generalization_3001);

        }

        return types;
    }

    /**
     * @generated NOT
     */
    @Override
    public List<IElementType> getRelTypesOnSourceAndTarget(IAdaptable source,
            IAdaptable target) {
        List<IElementType> types = new ArrayList<IElementType>();
        IGraphicalEditPart sourceEditPart =
                (IGraphicalEditPart) source
                        .getAdapter(IGraphicalEditPart.class);
        IGraphicalEditPart targetEditPart =
                (IGraphicalEditPart) target
                        .getAdapter(IGraphicalEditPart.class);

        if (sourceEditPart instanceof ClassEditPart) {
            if (targetEditPart instanceof ClassEditPart) {
                types.add(UMLElementTypes.Association_3002);
                types.add(UMLElementTypes.Generalization_3001);
            }
        } else if (sourceEditPart instanceof PrimitiveTypeEditPart) {
            if (targetEditPart instanceof PrimitiveTypeEditPart) {
                types.add(UMLElementTypes.Generalization_3001);
            }
        } else if (sourceEditPart instanceof EnumerationEditPart) {
            if (targetEditPart instanceof EnumerationEditPart) {
                types.add(UMLElementTypes.Generalization_3001);
            } else if (targetEditPart instanceof PrimitiveTypeEditPart) {
                types.add(UMLElementTypes.Generalization_3001);
            }

        }

        return types;
    }

    /**
     * @generated NOT
     */
    @Override
    public List<IElementType> getTypesForSource(IAdaptable target,
            IElementType relationshipType) {
        List<IElementType> types = new ArrayList<IElementType>();
        IGraphicalEditPart targetEditPart =
                (IGraphicalEditPart) target
                        .getAdapter(IGraphicalEditPart.class);

        if (targetEditPart instanceof ClassEditPart) {
            if ((relationshipType == UMLElementTypes.Generalization_3001)
                    || (relationshipType == UMLElementTypes.Association_3002)) {
                IElementType type = UMLElementTypes.Class_1002;
                types.add(type);
            }
        } else if (targetEditPart instanceof PrimitiveTypeEditPart) {
            if (relationshipType == UMLElementTypes.Generalization_3001) {
                types.add(UMLElementTypes.PrimitiveType_1003);
                types.add(UMLElementTypes.Enumeration_1004);
            }
        } else if (targetEditPart instanceof EnumerationEditPart) {
            if (relationshipType == UMLElementTypes.Generalization_3001) {
                types.add(UMLElementTypes.Enumeration_1004);
            }
        }

        return types;
    }

    /**
     * @generated NOT
     */
    @Override
    public List<IElementType> getTypesForTarget(IAdaptable source,
            IElementType relationshipType) {
        List<IElementType> types = new ArrayList<IElementType>();
        IGraphicalEditPart sourceEditPart =
                (IGraphicalEditPart) source
                        .getAdapter(IGraphicalEditPart.class);

        if (sourceEditPart instanceof ClassEditPart) {
            if ((relationshipType == UMLElementTypes.Generalization_3001)
                    || (relationshipType == UMLElementTypes.Association_3002)) {
                types.add(UMLElementTypes.Class_1002);
            }
        } else if (sourceEditPart instanceof PrimitiveTypeEditPart) {
            if (relationshipType == UMLElementTypes.Generalization_3001) {
                types.add(UMLElementTypes.PrimitiveType_1003);
            }
        } else if (sourceEditPart instanceof EnumerationEditPart) {
            if (relationshipType == UMLElementTypes.Generalization_3001) {
                types.add(UMLElementTypes.PrimitiveType_1003);
                types.add(UMLElementTypes.Enumeration_1004);
            }
        }

        return types;
    }

    /**
     * @generated
     */
    @Override
    public EObject selectExistingElementForSource(IAdaptable target,
            IElementType relationshipType) {
        return selectExistingElement(target,
                getTypesForSource(target, relationshipType));
    }

    /**
     * @generated
     */
    @Override
    public EObject selectExistingElementForTarget(IAdaptable source,
            IElementType relationshipType) {
        return selectExistingElement(source,
                getTypesForTarget(source, relationshipType));
    }

    /**
     * @generated NOT
     */
    protected EObject selectExistingElement(IAdaptable host, Collection<?> types) {
        if (types.isEmpty()) {
            return null;
        }
        IGraphicalEditPart editPart =
                (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
        if (editPart == null) {
            return null;
        }
        Diagram diagram = (Diagram) editPart.getRoot().getContents().getModel();
        Set<EObject> elements = new HashSet<EObject>();
        for (TreeIterator<EObject> it = diagram.getElement().eAllContents(); it
                .hasNext();) {
            EObject element = it.next();
            if (isApplicableElement(element, types)) {
                elements.add(element);
            }
        }
        if (elements.isEmpty()) {
            return null;
        }

        // To our own BOM Picker we need to pass in the context i.e. selected
        // element
        editPart.resolveSemanticElement();
        return selectElement(editPart.resolveSemanticElement(),
                elements.toArray(new EObject[elements.size()]));
    }

    /**
     * @generated
     */
    protected boolean isApplicableElement(EObject element, Collection<?> types) {
        IElementType type =
                ElementTypeRegistry.getInstance().getElementType(element);
        return types.contains(type);
    }

    protected Classifier selectType(Shell shell, EObject element) {
        return BomUIUtil.getSuperclassFromPicker(shell, element);
    }

    /**
     * @generated
     */
    protected EObject selectElement(EObject[] elements) {
        Shell shell = Display.getCurrent().getActiveShell();
        ILabelProvider labelProvider =
                new AdapterFactoryLabelProvider(BOMDiagramEditorPlugin
                        .getInstance().getItemProvidersAdapterFactory());
        ElementListSelectionDialog dialog =
                new ElementListSelectionDialog(shell, labelProvider);
        dialog.setMessage(Messages.UMLModelingAssistantProviderMessage);
        dialog.setTitle(Messages.UMLModelingAssistantProviderTitle);
        dialog.setMultipleSelection(false);
        dialog.setElements(elements);
        EObject selected = null;
        if (dialog.open() == Window.OK) {
            selected = (EObject) dialog.getFirstResult();
        }
        return selected;
    }

    /**
     * @generated NOT
     * 
     *            Overload of the generated method so that we can specify a
     *            context (i.e. the host element) for the picker
     * 
     * @param host
     * @param elements
     * @return
     */
    protected EObject selectElement(EObject host, EObject[] elements) {
        Shell shell = Display.getCurrent().getActiveShell();

        WorkingCopy wc = WorkingCopyUtil.getWorkingCopyFor(elements[0]);
        IResource resourceToLookUp = wc.getEclipseResources().get(0);
        IResource[] queryResources = new IResource[] { resourceToLookUp };

        Classifier cf =
                BomUIUtil.getTypeFromPicker(shell, host, queryResources);

        return cf;
    }

    @Override
    public boolean provides(IOperation operation) {
        // Disable the "Existing Element" option on the pop-up.
        if (operation instanceof SelectExistingElementForSourceOperation) {
            return false;
        } else if (operation instanceof SelectExistingElementForTargetOperation) {
            return false;
        }

        return super.provides(operation);
    }

}
