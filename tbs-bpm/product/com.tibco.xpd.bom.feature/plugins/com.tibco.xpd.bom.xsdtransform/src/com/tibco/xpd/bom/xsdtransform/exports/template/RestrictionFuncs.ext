import xmlSchema;
import type;
import uml;
import xsd;
import com::tibco::xpd::bom::xsdtransform::exports::template;

extension org::openarchitectureware::xsd::lib::qname;
extension org::openarchitectureware::xsd::lib::map;
extension com::tibco::xpd::bom::xsdtransform::exports::template::Extensions reexport;
extension com::tibco::xpd::bom::xsdtransform::exports::template::HelperFuncs reexport;

cached setRestrictions(ExportTransformationData data, Property property, Stereotype stereoType, RestrictionType1 restrictionType, Attribute attribute) :	
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :		
	let type = (
		PrimitiveType.isInstance(property.type) ? getBomPrimitiveType(property.type) : property.type
	) :
	setEnumLiteralsProperty(data, property, restrictionType) ->
	isStandardPrimitive(type) ? (
		switch(type.name){
			case "Text": (				
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "text") ->
				setMaxLengthProperty(property, stereoType, restrictionType, "text") ->
				setPatternProperty(property, stereoType, restrictionType, "text")
			)
			case "Decimal": (
				let subType = getStereotypeValue(property, appliedRestrictedTypeStereotype, "decimalSubType") :
							
				subType == null ? (
					isFloatingPointDecimal(property.type) == true ? null : (
						setTotalDigitsProperty(property, stereoType, restrictionType, "decimal") ->
				    	setFractionDigitsProperty(property, stereoType, restrictionType, "decimal")				    	
					)
				) : (
					subType.name == "floatingPoint" ? null : (
						setTotalDigitsProperty(property, stereoType, restrictionType, "decimal") ->
				    	setFractionDigitsProperty(property, stereoType, restrictionType, "decimal") ->
				    	setDecimalRestrictionPatternProperty(property, stereoType, restrictionType)
					)
				) ->	
				
			    setDefaultValueProperty(property, stereoType, restrictionType, attribute, "decimal") ->
			    			    
			    //check to see if min exclusive XSD Stereotype is set and if so this overides any BOM inclusive value
			    isBOMMinInclusiveProperty(property, stereoType, restrictionType, "decimal") && isXSDMinExclusiveProperty(property) ? setXSDMinExclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->			    
			    isBOMMinInclusiveProperty(property, stereoType, restrictionType, "decimal") && !isXSDMinExclusiveProperty(property) ? setMinInclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->
			    isBOMMinExclusiveProperty(property, stereoType, restrictionType, "decimal") && !isXSDMinExclusiveProperty(property) ? setMinExclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->
			    !isBOMMinInclusiveProperty(property, stereoType, restrictionType, "decimal") && isXSDMinExclusiveProperty(property) ? setXSDMinExclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->
			    isXSDMinExclusiveProperty(property) && isXSDMinInclusiveProperty(property) ? restrictionType.setMinInclusive({}) : null ->

			    isBOMMaxInclusiveProperty(property, stereoType, restrictionType, "decimal") && isXSDMaxExclusiveProperty(property) ? setXSDMaxExclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->
			    isBOMMaxInclusiveProperty(property, stereoType, restrictionType, "decimal") && !isXSDMaxExclusiveProperty(property) ? setMaxInclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->
			    isBOMMaxExclusiveProperty(property, stereoType, restrictionType, "decimal") && !isXSDMaxExclusiveProperty(property) ? setMaxExclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->
			    !isBOMMaxInclusiveProperty(property, stereoType, restrictionType, "decimal") && isXSDMaxExclusiveProperty(property) ? setXSDMaxExclusiveProperty(property, stereoType, restrictionType, "decimal") : null ->
			    isXSDMaxExclusiveProperty(property) && isXSDMaxInclusiveProperty(property) ? restrictionType.setMaxInclusive({}) : null ->
			    
			    setXSDPatternValueProperty(property, restrictionType)			    		    			
				
			)	
			case "Integer": (
				let subType = getStereotypeValue(property, appliedRestrictedTypeStereotype, "integerSubType") :
			
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "integer") ->
				
				//check to see if min exclusive XSD Stereotype is set and if so this overides any BOM inclusive value
				traceMe("111 " + (isBOMMinInclusiveProperty(property, stereoType, restrictionType, "integer") && isXSDMinExclusiveProperty(property))) ->
				traceMe("222 " + (isBOMMinInclusiveProperty(property, stereoType, restrictionType, "integer") && !isXSDMinExclusiveProperty(property))) ->
				traceMe("333 " + (!isBOMMinInclusiveProperty(property, stereoType, restrictionType, "integer") && isXSDMinExclusiveProperty(property))) ->
				isBOMMinInclusiveProperty(property, stereoType, restrictionType, "integer") && isXSDMinExclusiveProperty(property) ? setXSDMinExclusiveProperty(property, stereoType, restrictionType, "integer") : null ->
			    isBOMMinInclusiveProperty(property, stereoType, restrictionType, "integer") && !isXSDMinExclusiveProperty(property) ? setMinInclusiveProperty(property, stereoType, restrictionType, "integer") : null ->
			    !isBOMMinInclusiveProperty(property, stereoType, restrictionType, "integer") && isXSDMinExclusiveProperty(property) ? setXSDMinExclusiveProperty(property, stereoType, restrictionType, "integer") : null ->
			    
			    isBOMMaxInclusiveProperty(property, stereoType, restrictionType, "integer") && isXSDMaxExclusiveProperty(property) ? setXSDMaxExclusiveProperty(property, stereoType, restrictionType, "integer") : null ->
			    isBOMMaxInclusiveProperty(property, stereoType, restrictionType, "integer") && !isXSDMaxExclusiveProperty(property) ? setMaxInclusiveProperty(property, stereoType, restrictionType, "integer") : null ->
			    !isBOMMaxInclusiveProperty(property, stereoType, restrictionType, "integer") && isXSDMaxExclusiveProperty(property) ? setXSDMaxExclusiveProperty(property, stereoType, restrictionType, "integer") : null ->
				
				subType == null ? (
					isSignedInteger(type) == true ? null : setTotalDigitsProperty(property, stereoType, restrictionType, "integer")
				) : (			
					subType.name == "signedInteger" ? null : setTotalDigitsProperty(property, stereoType, restrictionType, "integer")
				) ->				
				
				setXSDPatternValueProperty(property, restrictionType)
			)
			case "Boolean": (
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "boolean")
			)
			case "Time": (
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "time") ->
				setXSDPatternValueProperty(property, restrictionType)
			)
			case "Date": (
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "date") ->
				setXSDPatternValueProperty(property, restrictionType)
			)
			case "DateTime": (
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "dateTime") ->
				setXSDPatternValueProperty(property, restrictionType)
			)
			case "DateTimeTZ": (
				let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "dateTimeTZ")	->			
				patternType.setValue(".+T.+(Z|[+-].+)") ->
				restrictionType.setPattern({patternType})					
			)
			case "ID": (
				let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :						
				patternType.setValue("[\\i-[:]][\\c-[:]]*") ->
				restrictionType.setPattern({patternType})					
			)
			case "URI": (
				setDefaultValueProperty(property, stereoType, restrictionType, attribute, "uri")			
			)
			default: null	
		}
	) : null;	

setEnumLiteralsProperty(ExportTransformationData data, Property property, RestrictionType1 restrictionType) :
	let appliedPropertyStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedProperty").first() :	
	let appliedPrimitiveTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedPrimitiveType").first() :	
	
	appliedPropertyStereotype == null ? null : (
			// XPD-2569: earlier ecore:name was being added by looking at the stereotype of the property,
			// which has name from original xsd schema but not the BOM name 
			// "xsdEnumLiterals" stereotype is set only when the enums are nested. 
			// so we need not do the below in all cases but only those cases when this stereotype value is set 
			let tempEnumLiterals = getStereotypeValue(property, appliedPropertyStereotype, "xsdEnumLiterals") :
			tempEnumLiterals == null ? null : (
				// XPD-2569: get enumeration if the property refers to enumeration
				let enumeration = _getEnumerationFromProperty(property) :
				enumeration != null ? 
				(
					enumeration.ownedLiteral.collect(enumLit|
						(						
							let fixedFacet = new NoFixedFacet :
							let appliedStereotype = enumLit.getAppliedStereotypes().select(e|e.name == "XsdBasedEnumerationLiteral").first() :
							let enumLiteralValue = getStereotypeValue(enumLit, appliedStereotype, "xsdValue") :
							fixedFacet.setValue(enumLiteralValue) ->
							// XPD-2569: adding ecore:name 
							addFeatureMapEntry(fixedFacet.anyAttribute, enumLit.name, "name")  ->
							restrictionType.enumeration.add(fixedFacet)
						)
					) 
				) : (
					null
				)->			 		 
				appliedPrimitiveTypeStereotype == null ? null : (
				 	let type = getPackagableElementTypeName(data, property, "") :
				 	type != "" ? restrictionType.setBase(createQName(type)) : null
				)
			)
	);
	
setLengthProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let numFacet = (restrictionType.length.first() == null ? new NumFacet : restrictionType.length.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Length") :
	let lengthValue = getStereotypeValue(property, appliedRestrictionStereotype, "xsdLengthValue") :
	lengthValue == null || lengthValue.trim().length == 0 ? (
		numFacet.value == null ? (
			appliedXSDBasedElementStereotype == null ? (
				hasPropertyValue == false ? (
					let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Length")).first() :
					numFacet.setValue(defaultProperty.getDefault()) ->
					defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setLength({numFacet})					
				) : (
					numFacet.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Length")) -> 
					restrictionType.setLength({numFacet})
					
				)
			) : null
		) : null
	) : (
		numFacet.setValue(lengthValue) -> 
		restrictionType.setLength({numFacet})				
	);
	
setMaxLengthProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let numFacet = (restrictionType.maxLength.first() == null ? new NumFacet : restrictionType.maxLength.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Length") :
	let lengthValue = getStereotypeValue(property, appliedRestrictionStereotype, "xsdMaxLengthValue") :
	traceMe("setMaxLengthProperty " + property.name+ " hasPropertyValue "+hasPropertyValue) ->
	lengthValue == null || lengthValue.trim().length == 0 ? ( 
		numFacet.value == null ? (		
			appliedXSDBasedElementStereotype == null ? (
				hasPropertyValue == false ? (				
					let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Length")).first() :
					numFacet.setValue(defaultProperty.getDefault()) -> 
					defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
						numFacet.value.toString() != "-1" ? restrictionType.setMaxLength({numFacet}) : null
					)								
				) : (
					appliedRestrictionStereotype == null ? (
						numFacet.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Length")) -> 
						numFacet.value.toString() != "-1" ? restrictionType.setMaxLength({numFacet}) : null			
					) : null
				)
			) : null
		) : null
	) : (
		numFacet.setValue(lengthValue) -> 
		restrictionType.setMaxLength({numFacet})		
	);
	
setDecimalRestrictionPatternProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType) :
	let totalDigits = restrictionType.totalDigits.first() :
	let fractionDigits = restrictionType.fractionDigits.first()  :	
	totalDigits.value != null && fractionDigits.value != null && totalDigits.value != "-1" && fractionDigits.value != "-1" ? (
		 let x = totalDigits.value.asInteger() - fractionDigits.value.asInteger() - 1 :
		 let y =  fractionDigits.value :
		 let tmpPattern = (
		 	let fullPattern = "[+-]?([1-9][0-9]{0,"+ x +"}|0)(\\.[0-9]{0," + y + "})?" :
		 	let shortPattern = "[+-]?0(\\.[0-9]{0," + totalDigits.value.asInteger() + "})?" :
		 	totalDigits.value.asInteger() == fractionDigits.value.asInteger() ? shortPattern : fullPattern
		 ) :
		 let patternType = new PatternType :
		 patternType.setValue(tmpPattern) ->		 
		 restrictionType.setPattern({patternType})		 
	) : null;
	
	
setTotalDigitsProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let totalDigitsType = (restrictionType.totalDigits.first() == null ? new TotalDigitsType : restrictionType.totalDigits.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Length") :
	totalDigitsType.value == null ? (		
		appliedXSDBasedElementStereotype == null ? (	
			hasPropertyValue == false ? (
				let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Length")).first() :
				totalDigitsType.setValue(defaultProperty.getDefault()) -> 
				defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
					totalDigitsType.value.toString() != "-1" ? restrictionType.setTotalDigits({totalDigitsType}) : null
				)			
			) : (
				totalDigitsType.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Length")) -> 
				totalDigitsType.value.toString() != "-1" ? restrictionType.setTotalDigits({totalDigitsType}) : null		
			)
		) : null
	) : null;
	
setPatternProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "PatternValue") :	
	patternType.value == null ? (
		appliedXSDBasedElementStereotype == null ? (
			hasPropertyValue == false ? (
				let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "PatternValue")).first() :
				patternType.setValue(defaultProperty.getDefault()) -> 
				defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setPattern({patternType})				
			) : (
				patternType.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "PatternValue")) -> 
				restrictionType.setPattern({patternType})
			)
		) : (
			let value = getValue(property, appliedRestrictionStereotype, "xsdPatternValue") :
			value != null && value.trim().length > 0 ? (
				patternType.setValue(value) -> 
				restrictionType.setPattern({patternType})
			) : null
		)
	) : null ->
	stripKnownTemplatePatterns(restrictionType);
	
setXSDPatternValueProperty(Property property, RestrictionType1 restrictionType) :	
	let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :	
	appliedXSDBasedElementStereotype == null ? null : (
		let value = getStereotypeValue(property, appliedRestrictionStereotype, "xsdPatternValue") :
		value == null ? null : (			
			patternType.setValue(value) -> 
			restrictionType.setPattern({patternType})
		)			
	) ->
	stripKnownTemplatePatterns(restrictionType);	
	
setFractionDigitsProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let numFacet = (restrictionType.fractionDigits.first() == null ? new NumFacet : restrictionType.fractionDigits.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Places") :
	numFacet.value == null ? (
		appliedXSDBasedElementStereotype == null ? (
			hasPropertyValue == false ? (
				let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Places")).first() :
				numFacet.setValue(defaultProperty.getDefault()) -> 
				defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
					numFacet.value.toString() != "-1" ? restrictionType.setFractionDigits({numFacet}) : null
				)							
			) : (
				numFacet.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Places")) -> 
				numFacet.value.toString() != "-1" ? restrictionType.setFractionDigits({numFacet}) : null
			)
		) : null
	) : null;
	
setMinExclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :	
	let facet = (restrictionType.minExclusive.first() == null ? new Facet : restrictionType.minExclusive.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Lower") :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : ( 
		facet.value == null ? (
			hasPropertyValue == false ? (
			//	let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Lower")).first() :
			//	facet.setValue(defaultProperty.getDefault()) -> 
			//	defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMinExclusive({facet})
			null
			) : (
				facet.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Lower")) -> 
				restrictionType.setMinExclusive({facet})
			)
		) : null
	);
	
setXSDMinExclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let facet = (restrictionType.minExclusive.first() == null ? new Facet : restrictionType.minExclusive.first()) :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :	
	facet.value == null ? (
		appliedRestrictionStereotype == null ? null : (
			let value = getStereotypeValue(property, appliedRestrictionStereotype, "xsdMinExclusiveValue") :
			value == null ? null : (
				facet.setValue(value) -> 
				restrictionType.setMinExclusive({facet})
			)			
		)		
	) : null;	

setXSDMaxExclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let facet = (restrictionType.maxExclusive.first() == null ? new Facet : restrictionType.maxExclusive.first()) :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :	
	facet.value == null ? (
		appliedRestrictionStereotype == null ? null : (
			let value = getStereotypeValue(property, appliedRestrictionStereotype, "xsdMaxExclusiveValue") :
			value == null ? null : (
				facet.setValue(value) -> 
				restrictionType.setMaxExclusive({facet})
			)			
		)		
	) : null;	

setMaxExclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let facet = (restrictionType.maxExclusive.first() == null ? new Facet : restrictionType.maxExclusive.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Upper") :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : (
		facet.value == null ? (
			hasPropertyValue == false ? (
				//let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Upper")).first() :
				//facet.setValue(defaultProperty.getDefault()) -> 
				//defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMaxExclusive({facet})
				null
			) : (
				facet.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Upper")) -> 
				restrictionType.setMaxExclusive({facet})
			)
		) : null
	);
	
setMinInclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let facet = (restrictionType.minInclusive.first() == null ? new Facet : restrictionType.minInclusive.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Lower") :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : (
		facet.value == null ? (
			hasPropertyValue == false ? (
			//	let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Lower")).first() :
			//	facet.setValue(defaultProperty.getDefault()) ->		
			//	defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMinInclusive({facet})
				null
			) : (		 
				facet.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Lower")) ->			
				restrictionType.setMinInclusive({facet})
			)
		) : null
	) ->
	stripKnownTemplateMinInclusives(restrictionType);
	
setMaxInclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let facet = (restrictionType.maxInclusive.first() == null ? new Facet : restrictionType.maxInclusive.first()) :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "Upper") :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : (
		facet.value == null ? (
			hasPropertyValue == false ? (
			//	let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Upper")).first() :
			//	facet.setValue(defaultProperty.getDefault()) -> 
			//	defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMaxInclusive({facet})
				null
			) : (
				facet.setValue(getValue(property, appliedRestrictedTypeStereotype, typePrefix + "Upper")) ->			
				restrictionType.setMaxInclusive({facet})
			)
		) : null
	) ->
	stripKnownTemplateMaxInclusives(restrictionType);
	
boolean isBOMMinInclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "LowerInclusive") :	
	hasPropertyValue == true ? (
		getValue(property, appliedRestrictedTypeStereotype, typePrefix + "LowerInclusive")
	) : true;
	
boolean isBOMMaxInclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "UpperInclusive") :
	hasPropertyValue == true ? (
		getValue(property, appliedRestrictedTypeStereotype, typePrefix + "UpperInclusive")
	) : true;
	
boolean isBOMMinExclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :	
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let lowerInc = getValue(property, appliedRestrictedTypeStereotype, typePrefix + "LowerInclusive") :
	lowerInc == false ? true : false;	
	
boolean isBOMMaxExclusiveProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :	
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let upperInc = getValue(property, appliedRestrictedTypeStereotype, typePrefix + "UpperInclusive") :
	upperInc == false ? true : false;	
	
boolean isXSDMinExclusiveProperty(Property property) :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :	
	appliedRestrictionStereotype == null ? false : (		
		let minExclusiveValue = getStereotypeValue(property, appliedRestrictionStereotype, "xsdMinExclusiveValue") :		
		minExclusiveValue == null || minExclusiveValue.trim().length == 0 ? false : true		
	);
	
boolean isXSDMaxExclusiveProperty(Property property) :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedRestrictionStereotype == null ? false : (		
		let maxExclusiveValue = getStereotypeValue(property, appliedRestrictionStereotype, "xsdMaxExclusiveValue") :
		maxExclusiveValue == null || maxExclusiveValue.trim().length == 0 ? false : true		
	);
	
boolean isXSDMinInclusiveProperty(Property property) :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :	
	appliedRestrictionStereotype == null ? false : (		
		let minInclusiveValue = getStereotypeValue(property, appliedRestrictionStereotype, "xsdMinInclusiveValue") :		
		minInclusiveValue == null || minInclusiveValue.trim().length == 0 ? false : true		
	);
	
boolean isXSDMaxInclusiveProperty(Property property) :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedRestrictionStereotype == null ? false : (		
		let maxInclusiveValue = getStereotypeValue(property, appliedRestrictionStereotype, "xsdMaxInclusiveValue") :
		maxInclusiveValue == null || maxInclusiveValue.trim().length == 0 ? false : true		
	);
	
setDefaultValueProperty(Property property, Stereotype stereoType, RestrictionType1 restrictionType, Attribute attribute, String typePrefix) :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let facet = new Facet :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "DefaultValue") :	
	appliedXSDBasedElementStereotype == null ? (	
		hasPropertyValue == false ? (
			let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "DefaultValue")).first() :		
			defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
				attribute.setDefault(defaultProperty.getDefault()) ->
				attribute.setUse(UseType::optional)	
			)
		) : (
			let defaultVal = getValue(property, appliedRestrictedTypeStereotype, typePrefix + "DefaultValue") :
			attribute.setDefault((""+defaultVal)) ->		
			attribute.setUse(UseType::optional)
		)
	) : null;

cached setRestrictions(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType) :	
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let type = getBomPrimitiveType(primitiveType) :	
	isStandardPrimitive(type) ? (
		switch(type.name){
			case "Text": (						
				setMaxLength(primitiveType, stereoType, restrictionType, "text") ->
				setPattern(primitiveType, stereoType, restrictionType, "text")
			)
			case "Decimal": (					
				isFloatingPointDecimal(primitiveType) == true ? null : (
					setTotalDigits(primitiveType, stereoType, restrictionType, "decimal") ->
				    setFractionDigits(primitiveType, stereoType, restrictionType, "decimal") ->
				    setDecimalRestrictionPattern(primitiveType, stereoType, restrictionType)
				) ->		
				
				//check to see if min exclusive XSD Stereotype is set and if so this overides any BOM inclusive value
				isBOMMinInclusive(primitiveType, stereoType, restrictionType, "decimal") && isXSDMinExclusive(primitiveType) ? setXSDMinExclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    isBOMMinInclusive(primitiveType, stereoType, restrictionType, "decimal") && !isXSDMinExclusive(primitiveType) ? setMinInclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    isBOMMinExclusive(primitiveType, stereoType, restrictionType, "decimal") && !isXSDMinExclusive(primitiveType) ? setMinExclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    !isBOMMinInclusive(primitiveType, stereoType, restrictionType, "decimal") && isXSDMinExclusive(primitiveType) ? setXSDMinExclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    isXSDMinExclusive(primitiveType) && isXSDMinInclusive(primitiveType) ? restrictionType.setMinInclusive({}) : null ->
			    
			    isBOMMaxInclusive(primitiveType, stereoType, restrictionType, "decimal") && isXSDMaxExclusive(primitiveType) ? setXSDMaxExclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    isBOMMaxInclusive(primitiveType, stereoType, restrictionType, "decimal") && !isXSDMaxExclusive(primitiveType) ? setMaxInclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    isBOMMaxExclusive(primitiveType, stereoType, restrictionType, "decimal") && !isXSDMaxExclusive(primitiveType) ? setMaxExclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    !isBOMMaxInclusive(primitiveType, stereoType, restrictionType, "decimal") && isXSDMaxExclusive(primitiveType) ? setXSDMaxExclusive(primitiveType, stereoType, restrictionType, "decimal") : null ->
			    isXSDMaxExclusive(primitiveType) && isXSDMaxInclusive(primitiveType) ? restrictionType.setMaxInclusive({}) : null
					
			)	
			case "Integer": (
				isSignedInteger(primitiveType) == true ? null : (
					setTotalDigits(primitiveType, stereoType, restrictionType, "integer")	
				) ->
				
				//check to see if min exclusive XSD Stereotype is set and if so this overides any BOM inclusive value
				traceMe("111 prim " + (isBOMMinInclusive(primitiveType, stereoType, restrictionType, "integer") && isXSDMinExclusive(primitiveType))) ->
				traceMe("222 prim " + (isBOMMinInclusive(primitiveType, stereoType, restrictionType, "integer") && !isXSDMinExclusive(primitiveType))) ->
				traceMe("333 prim " + (!isBOMMinInclusive(primitiveType, stereoType, restrictionType, "integer") && isXSDMinExclusive(primitiveType))) ->
				isBOMMinInclusive(primitiveType, stereoType, restrictionType, "integer") && isXSDMinExclusive(primitiveType) ? setXSDMinExclusive(primitiveType, stereoType, restrictionType, "integer") : null ->
			    isBOMMinInclusive(primitiveType, stereoType, restrictionType, "integer") && !isXSDMinExclusive(primitiveType) ? setMinInclusive(primitiveType, stereoType, restrictionType, "integer") : null ->
			    !isBOMMinInclusive(primitiveType, stereoType, restrictionType, "integer") && isXSDMinExclusive(primitiveType) ? setXSDMinExclusive(primitiveType, stereoType, restrictionType, "integer") : null ->
			    
			    isBOMMaxInclusive(primitiveType, stereoType, restrictionType, "integer") && isXSDMaxExclusive(primitiveType) ? setXSDMaxExclusive(primitiveType, stereoType, restrictionType, "integer") : null ->
			    isBOMMaxInclusive(primitiveType, stereoType, restrictionType, "integer") && !isXSDMaxExclusive(primitiveType) ? setMaxInclusive(primitiveType, stereoType, restrictionType, "integer") : null ->
			    !isBOMMaxInclusive(primitiveType, stereoType, restrictionType, "integer") && isXSDMaxExclusive(primitiveType) ? setXSDMaxExclusive(primitiveType, stereoType, restrictionType, "integer") : null
				
			)
			case "Time": (				
				setXSDPatternValue(primitiveType, restrictionType)
			)
			case "Date": (				
				setXSDPatternValue(primitiveType, restrictionType)
			)
			case "DateTime": (				
				setXSDPatternValue(primitiveType, restrictionType)
			)			
			case "DateTimeTZ": (
				let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :						
				patternType.setValue(".+T.+(Z|[+-].+)") ->			
				restrictionType.setPattern({patternType})					
			)	
			case "ID" : (
				let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :						
				patternType.setValue("[\\i-[:]][\\c-[:]]*") ->			
				restrictionType.setPattern({patternType})			
			)
			default: null		
		}
	) : null;	

setLength(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let numFacet = (restrictionType.length.first() == null ? new NumFacet : restrictionType.length.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Length") :
	let lengthValue = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdLengthValue") :	
	lengthValue == null || lengthValue.trim().length == 0 ? ( 
		numFacet.value == null ? (
			appliedXSDBasedElementStereotype == null ? (
				hasPropertyValue == false ? (
					let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Length")).first() :
					numFacet.setValue(defaultProperty.getDefault()) -> 
					defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setLength({numFacet})				
				) : (
					numFacet.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Length")) -> 
					restrictionType.setLength({numFacet})
				)
			) : null
		) : null
	) : (
		numFacet.setValue(lengthValue) -> 
		restrictionType.setLength({numFacet})
	);	
	
setMaxLength(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let numFacet = (restrictionType.maxLength.first() == null ? new NumFacet : restrictionType.maxLength.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Length") :
	let lengthValue = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdMaxLengthValue") :	
	lengthValue == null || lengthValue.trim().length == 0 ? ( 
		numFacet.value == null ? (			
			appliedXSDBasedElementStereotype == null ? (
				hasPropertyValue == false ? (
					let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Length")).first() :
					numFacet.setValue(defaultProperty.getDefault()) -> 
					defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
						numFacet.value.toString() != "-1" ? restrictionType.setMaxLength({numFacet}) : null				
					)					
				) : (
					appliedRestrictionStereotype == null ? (
						numFacet.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Length")) -> 
						numFacet.value.toString() != "-1" ? restrictionType.setMaxLength({numFacet}) : null
					) : null			
				)
			) : null
		) : null
	) : (
		numFacet.setValue(lengthValue) -> 
		restrictionType.setMaxLength({numFacet})
	);
	
setDecimalRestrictionPattern(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType) :
	let totalDigits = restrictionType.totalDigits.first() :
	let fractionDigits = restrictionType.fractionDigits.first()  :	
	totalDigits.value != null && fractionDigits.value != null && totalDigits.value != "-1" && fractionDigits.value != "-1" ? (
		 let x = totalDigits.value.asInteger() - fractionDigits.value.asInteger() - 1:
		 let y =  fractionDigits.value :
		 let tmpPattern = (
		 	let fullPattern = "[+-]?([1-9][0-9]{0,"+ x +"}|0)(\\.[0-9]{0," + y + "})?" :
		 	let shortPattern = "[+-]?0(\\.[0-9]{0," + totalDigits.value.asInteger() + "})?" :
		 	totalDigits.value.asInteger() == fractionDigits.value.asInteger() ? shortPattern : fullPattern
		 ) :
		 let patternType = new PatternType :
		 patternType.setValue(tmpPattern) ->		 
		 restrictionType.setPattern({patternType})		 
	) : null;
	
setTotalDigits(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let totalDigitsType = (restrictionType.totalDigits.first() == null ? new TotalDigitsType : restrictionType.totalDigits.first()) :	
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Length") :
	totalDigitsType.value == null ? (		
		appliedXSDBasedElementStereotype == null ? (
			hasPropertyValue == false ? (
				let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Length")).first() :
				totalDigitsType.setValue(defaultProperty.getDefault()) -> 
				defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
					totalDigitsType.value.toString() != "-1" ? restrictionType.setTotalDigits({totalDigitsType}) : null
				)				
			) : (
				totalDigitsType.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Length")) -> 
				totalDigitsType.value.toString() != "-1" ? restrictionType.setTotalDigits({totalDigitsType}) : null
			)
		) : null
	) : null;
	
setPattern(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :	
	let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "PatternValue") :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :	
	patternType.value == null ? (		
		appliedXSDBasedElementStereotype == null ? (
			hasPropertyValue == false ? (
				let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "PatternValue")).first() :
				patternType.setValue(defaultProperty.getDefault()) -> 
				defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setPattern({patternType})			
			) : (
				patternType.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "PatternValue")) -> 
				restrictionType.setPattern({patternType})
			)
		) : (
			let value = getValue(primitiveType, appliedRestrictionStereotype, "xsdPatternValue") :
			value != null && value.trim().length > 0 ? (
				patternType.setValue(value) -> 
				restrictionType.setPattern({patternType})
			) : null
		)
	) : null ->
	stripKnownTemplatePatterns(restrictionType);		
	
setXSDPatternValue(DataType primitiveType, RestrictionType1 restrictionType) :	
	let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :	
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :	
	appliedXSDBasedElementStereotype == null ? null : (
		let value = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdPatternValue") :
		value == null ? null : (			
			patternType.setValue(value) -> 
			restrictionType.setPattern({patternType})
		)			
	) ->
	stripKnownTemplatePatterns(restrictionType);
	
setFractionDigits(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :	
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let numFacet = (restrictionType.fractionDigits.first() == null ? new NumFacet : restrictionType.fractionDigits.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Places") :
	numFacet.value == null ? (
		appliedXSDBasedElementStereotype == null ? (
			hasPropertyValue == false ? (
				let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Places")).first() :
				numFacet.setValue(defaultProperty.getDefault()) -> 
				defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
					numFacet.value.toString() != "-1" ? restrictionType.setFractionDigits({numFacet}) : null				
				)				
			) : (
				numFacet.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Places")) -> 
				numFacet.value.toString() != "-1" ? restrictionType.setFractionDigits({numFacet}) : null
			)
		) : null
	) : null;			
	
setMinExclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let facet = (restrictionType.minExclusive.first() == null ? new Facet : restrictionType.minExclusive.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Lower") : 
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : (
		facet.value == null ? (
			hasPropertyValue == false ? (
				//let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Lower")).first() :
				//facet.setValue(defaultProperty.getDefault()) -> 
				//defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMinExclusive({facet})
				null
			) : (
				facet.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Lower")) -> 
				restrictionType.setMinExclusive({facet})
			)
		) : null
	);	

setMaxExclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let facet = (restrictionType.maxExclusive.first() == null ? new Facet : restrictionType.maxExclusive.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Upper") :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : (
		facet.value == null ? (
			hasPropertyValue == false ? (
				//let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Upper")).first() :
				//facet.setValue(defaultProperty.getDefault()) -> 
				//defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMaxExclusive({facet})
				null
			) : (
				facet.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Upper")) -> 
				restrictionType.setMaxExclusive({facet})
			)
		) : null
	);		
	
setXSDMinExclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let facet = (restrictionType.minExclusive.first() == null ? new Facet : restrictionType.minExclusive.first()) :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :	
	facet.value == null ? (
		appliedRestrictionStereotype == null ? null : (
			let value = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdMinExclusiveValue") :
			value == null ? null : (
				facet.setValue(value) -> 
				restrictionType.setMinExclusive({facet})
			)			
		)		
	) : null;	

setXSDMaxExclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let facet = (restrictionType.maxExclusive.first() == null ? new Facet : restrictionType.maxExclusive.first()) :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :	
	facet.value == null ? (
		appliedRestrictionStereotype == null ? null : (
			let value = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdMaxExclusiveValue") :
			value == null ? null : (
				facet.setValue(value) -> 
				restrictionType.setMaxExclusive({facet})
			)			
		)		
	) : null;	
	
setMinInclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let facet = (restrictionType.minInclusive.first() == null ? new Facet : restrictionType.minInclusive.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Lower") :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : (
		facet.value == null ? (		
			hasPropertyValue == false ? (
				//let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Lower")).first() :
				//facet.setValue(defaultProperty.getDefault()) -> 
				//defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMinInclusive({facet})
				null
			) : (
				facet.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Lower")) -> 
				restrictionType.setMinInclusive({facet})
			)
		) : null
	) ->
	stripKnownTemplateMinInclusives(restrictionType);	
	
setMaxInclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let facet = (restrictionType.maxInclusive.first() == null ? new Facet : restrictionType.maxInclusive.first()) :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Upper") :
	let appliedXSDBasedElementStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedXSDBasedElementStereotype != null && appliedRestrictionStereotype == null ? null : (
		facet.value == null ? (		
			hasPropertyValue == false ? (
				//let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "Upper")).first() :
				//facet.setValue(defaultProperty.getDefault()) -> 
				//defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : restrictionType.setMaxInclusive({facet})
				null
			) : (
				facet.setValue(getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "Upper")) -> 
				restrictionType.setMaxInclusive({facet})
			)
		) : null
	) ->
	stripKnownTemplateMaxInclusives(restrictionType);	
	
boolean isBOMMinInclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "LowerInclusive") :	
	hasPropertyValue == true ? (		
		getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "LowerInclusive")
	) : true;
	
boolean isBOMMaxInclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let hasPropertyValue = hasValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "UpperInclusive") :	
	hasPropertyValue == true ? (		
		getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "UpperInclusive")
	) : true;
	
boolean isBOMMinExclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let lowerInc = getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "LowerInclusive") :
	lowerInc == false ? true : false;
	
boolean isBOMMaxExclusive(DataType primitiveType, Stereotype stereoType, RestrictionType1 restrictionType, String typePrefix) :
	let appliedRestrictedTypeStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let upperInc = getValue(primitiveType, appliedRestrictedTypeStereotype, typePrefix + "UpperInclusive") :
	upperInc == false ? true : false;
	
boolean isXSDMinExclusive(DataType primitiveType) :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedRestrictionStereotype == null ? false : (	
		let minExclusiveValue = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdMinExclusiveValue") :
		minExclusiveValue == null || minExclusiveValue.trim().length == 0 ? false : true
		
	);
	
boolean isXSDMaxExclusive(DataType primitiveType) :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedRestrictionStereotype == null ? false : (		
		let maxExclusiveValue = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdMaxExclusiveValue") :
		maxExclusiveValue == null || maxExclusiveValue.trim().length == 0 ? false : true		
	);
	
boolean isXSDMinInclusive(DataType primitiveType) :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedRestrictionStereotype == null ? false : (	
		let minInclusiveValue = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdMinInclusiveValue") :
		minInclusiveValue == null || minInclusiveValue.trim().length == 0 ? false : true
		
	);
	
boolean isXSDMaxInclusive(DataType primitiveType) :
	let appliedRestrictionStereotype = primitiveType.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	appliedRestrictionStereotype == null ? false : (		
		let maxInclusiveValue = getStereotypeValue(primitiveType, appliedRestrictionStereotype, "xsdMaxInclusiveValue") :
		maxInclusiveValue == null || maxInclusiveValue.trim().length == 0 ? false : true		
	);
	
setElementRestrictions(Property property, Stereotype stereoType, RestrictionType1 restrictionType, Element element) :	
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let type = (
		PrimitiveType.isInstance(property.type) ? getBomPrimitiveType(property.type) : property.type
	) :
	isStandardPrimitive(type) ? (
		switch(type.name){
			case "Text": (	
				setElementDefaultValue(property, stereoType, restrictionType, element, "text")
			)	
			case "Decimal": (
				setElementDefaultValue(property, stereoType, restrictionType, element, "decimal")		    
			)	
			case "Integer": (
				setElementDefaultValue(property, stereoType, restrictionType, element, "integer")
			)
			case "Boolean": (
				setElementDefaultValue(property, stereoType, restrictionType, element, "boolean")
			)
			case "Time": (
				setElementDefaultValue(property, stereoType, restrictionType, element, "time")
			)
			case "Date": (
				setElementDefaultValue(property, stereoType, restrictionType, element, "date")
			)
			case "DateTime": (
				setElementDefaultValue(property, stereoType, restrictionType, element, "dateTime")
			)
			case "DateTimeTZ": (
				let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :
				setElementDefaultValue(property, stereoType, restrictionType, element, "dateTimeTZ") ->
				patternType.setValue(".+T.+(Z|[+-].+)") ->
				restrictionType.setPattern({patternType})
			)
			case "ID": (
				let patternType = (restrictionType.pattern.first() == null ? new PatternType : restrictionType.pattern.first()) :						
				patternType.setValue("[\\i-[:]][\\c-[:]]*") ->
				restrictionType.setPattern({patternType})					
			)
			case "URI": (
				setElementDefaultValue(property, stereoType, restrictionType, element, "uri")
			)
			default: null	
		}
	) : null;	
	
setElementDefaultValue(Property property, Stereotype stereoType, RestrictionType1 restrictionType, Element element, String typePrefix) :
	let facet = new Facet :
	let appliedRestrictedTypeStereotype = property.getAppliedStereotypes().select(e|e.name == "RestrictedType").first() :
	let appliedXSDBasedElementStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedElement").first() :	
	let appliedRestrictionStereotype = property.getAppliedStereotypes().select(e|e.name == "XsdBasedRestriction").first() :
	let hasPropertyValue = hasValue(property, appliedRestrictedTypeStereotype, typePrefix + "DefaultValue") :	
	appliedXSDBasedElementStereotype == null ? (
		hasPropertyValue == false ? (
			let defaultProperty = stereoType.eAllContents.typeSelect(Property).select(e|e.name==(typePrefix + "DefaultValue")).first() :		
			defaultProperty.getDefault() == null || defaultProperty.getDefault().length == 0 ? null : (
				element.setDefault(defaultProperty.getDefault())
			)			
		) : (
			let defaultVal = "" + getValue(property, appliedRestrictedTypeStereotype, typePrefix + "DefaultValue") :
			defaultVal == null || defaultVal.length == 0 ? null : (
				element.setDefault(defaultVal)
			)		
		)
	) : null;