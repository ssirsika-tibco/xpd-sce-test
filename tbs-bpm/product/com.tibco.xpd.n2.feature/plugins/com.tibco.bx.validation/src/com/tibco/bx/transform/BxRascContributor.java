/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.bx.transform;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl;
import org.osgi.framework.Version;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bx.core.model.BxGlobalSignalModel;
import com.tibco.bx.core.model.GlobalSignalDataType;
import com.tibco.bx.core.model.GlobalSignalDefinition;
import com.tibco.bx.core.model.GlobalSignalParameter;
import com.tibco.bx.core.model.GlobalSignalType;
import com.tibco.bx.core.model.ModelFactory;
import com.tibco.bx.validation.internal.Messages;
import com.tibco.bx.xpdl2bpel.util.XPDLUtils;
import com.tibco.xpd.globalSignalDefinition.GlobalSignal;
import com.tibco.xpd.globalSignalDefinition.GlobalSignalDefinitions;
import com.tibco.xpd.globalSignalDefinition.PayloadDataField;
import com.tibco.xpd.globalSignalDefinition.util.GlobalSignalUtil;
import com.tibco.xpd.globalSignalDefinition.util.GsdConstants;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.rasc.core.RascWriter;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.projectconfig.ProjectDetails;
import com.tibco.xpd.resources.util.ProjectUtil;
import com.tibco.xpd.resources.util.SpecialFolderUtil;
import com.tibco.xpd.resources.util.WorkingCopyUtil;
import com.tibco.xpd.xpdl2.BasicType;
import com.tibco.xpd.xpdl2.BasicTypeType;
import com.tibco.xpd.xpdl2.DataType;
import com.tibco.xpd.xpdl2.DeclaredType;
import com.tibco.xpd.xpdl2.ExternalReference;
import com.tibco.xpd.xpdl2.Member;
import com.tibco.xpd.xpdl2.Package;
import com.tibco.xpd.xpdl2.RecordType;
import com.tibco.xpd.xpdl2.TypeDeclaration;
import com.tibco.xpd.xpdl2.util.Xpdl2ModelUtil;

/**
 *
 *
 * @author pwatson
 * @since 5 Jul 2019
 */
public class BxRascContributor implements RascContributor {
    /**
     * The unique identifier for this RascContribution implementation.
     */
    private static String ID = "com.tibco.bx.transform.contributor"; //$NON-NLS-1$

    /**
     * The MicroServices to which the Page-Flow artifacts generated by this
     * contributor will be delivered.
     */
    private static final MicroService[] GSD_DESTINATION_SERVICES = { MicroService.BP };

    private static final String ARTIFACT_NAME = "globalSignal.gsd"; //$NON-NLS-1$

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#getId()
     */
    @Override
    public String getId() {
        return BxRascContributor.ID;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#hasContributionsFor(org.eclipse.core.resources.IProject)
     */
    @Override
    public boolean hasContributionsFor(IProject aProject) {
        List<IResource> gsdResources = SpecialFolderUtil.getAllDeepResourcesInSpecialFolderOfKind(aProject,
                GsdConstants.GSD_SPECIAL_FOLDER_KIND,
                GsdConstants.GSD_FILE_EXTENSION,
                false);

        // Proceed only if the project has any gsd resources.
        if ((gsdResources == null) || (gsdResources.isEmpty())) {
            return false;
        }

        ProjectDetails details = ProjectUtil.getProjectDetails(aProject);
        if (details == null) {
            return false;
        }

        String projectVersion = details.getVersion();
        if ((projectVersion == null) || (projectVersion.isEmpty())) {
            return false;
        }

        return true;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#process(org.eclipse.core.resources.IProject,
     *      com.tibco.xpd.rasc.core.RascContext,
     *      org.eclipse.core.runtime.IProgressMonitor,
     *      com.tibco.xpd.rasc.core.RascWriter)
     */
    @Override
    public void process(IProject aProject, RascContext aContext, IProgressMonitor aProgressMonitor, RascWriter aWriter)
            throws Exception {
        List<IResource> gsdResources = SpecialFolderUtil.getAllDeepResourcesInSpecialFolderOfKind(aProject,
                GsdConstants.GSD_SPECIAL_FOLDER_KIND,
                GsdConstants.GSD_FILE_EXTENSION,
                false);

        // Proceed only if the project has any gsd resources.
        if ((gsdResources == null) || (gsdResources.isEmpty())) {
            return;
        }

        ProjectDetails details = ProjectUtil.getProjectDetails(aProject);
        if (details == null) {
            return;
        }

        String projectVersion = details.getVersion();
        if ((projectVersion == null) || (projectVersion.isEmpty())) {
            return;
        }

        if (aProgressMonitor.isCanceled()) {
            return;
        }

        aProgressMonitor.beginTask(Messages.BxRascContributor_creatingGsdComponents, 1);

        Collection<GlobalSignalDefinitions> gsds = getSignalDefinitions(gsdResources);
        Collection<GlobalSignalDefinition> newSignals = convertSignalDefinitions(gsds);

        BxGlobalSignalModel model = ModelFactory.eINSTANCE.createBxGlobalSignalModel();
        model.setName(details.getId());
        model.setVersion(String.valueOf(new Version(projectVersion).getMajor()));
        model.getGlobalSignalDefinitions().addAll(newSignals);

        OutputStream output = aWriter
                .addContent(BxRascContributor.ARTIFACT_NAME,
                        BxRascContributor.ARTIFACT_NAME,
                        BxRascContributor.ARTIFACT_NAME,
                        BxRascContributor.GSD_DESTINATION_SERVICES);
        try {
            writeModel(model, output);
        } finally {
            output.close();
        }

        aProgressMonitor.worked(1);
    }

    private Collection<GlobalSignalDefinitions> getSignalDefinitions(List<IResource> gsdResources) {
        List<GlobalSignalDefinitions> result = new ArrayList<GlobalSignalDefinitions>();

        for (IResource iResource : gsdResources) {
            WorkingCopy workingCopy = WorkingCopyUtil.getWorkingCopy(iResource);
            if ((workingCopy != null) && (workingCopy.getRootElement() instanceof GlobalSignalDefinitions)) {
                // add the working copy root element to the list
                result.add((GlobalSignalDefinitions) workingCopy.getRootElement());
            }
        }

        return result;
    }

    /*
     * GlobalSignalDefinition name = <gsd folder relative path>#<signalName>
     */
    private Collection<GlobalSignalDefinition> convertSignalDefinitions(
            Collection<GlobalSignalDefinitions> aDefinitions) {
        Collection<GlobalSignalDefinition> result = new ArrayList<GlobalSignalDefinition>();

        for (GlobalSignalDefinitions globalSignalDefinitions : aDefinitions) {
            for (GlobalSignal globalSignal : globalSignalDefinitions.getGlobalSignals()) {
                GlobalSignalDefinition signal = ModelFactory.eINSTANCE.createGlobalSignalDefinition();
                String qualifiedName = GlobalSignalUtil.getGlobalSignalQualifiedName(globalSignal);
                qualifiedName = qualifiedName.substring(qualifiedName.indexOf('/') + 1);
                signal.setSignalName(qualifiedName);
                signal.setSignalTimeout(globalSignal.getCorrelationTimeout() == null ? 0
                        : globalSignal.getCorrelationTimeout().longValue());

                Package pckg = Xpdl2ModelUtil.getPackage(globalSignal);
                for (PayloadDataField dataField : globalSignal.getPayloadDataFields()) {
                    signal.getSignalParameters().add(convertSignalParameter(pckg, dataField));
                }

                result.add(signal);
            }
        }
        return result;
    }

    private GlobalSignalParameter convertSignalParameter(Package pckg, PayloadDataField dataField) {
        GlobalSignalParameter result = ModelFactory.eINSTANCE.createGlobalSignalParameter();
        result.setParameterName(dataField.getName());
        result.setMandatory(dataField.isMandatory());
        result.setCorrelation(dataField.isCorrelation());
        result.setParameterType(convertSignalDataType(pckg, dataField.getDataType(), dataField.isIsArray()));

        return result;
    }

    private GlobalSignalDataType convertSignalDataType(Package aPackage, DataType aDataType, boolean aIsArray) {
        if (aDataType instanceof DeclaredType) {
            String typeId = ((DeclaredType) aDataType).getTypeDeclarationId();
            if (aPackage != null && typeId != null) {
                TypeDeclaration typeDecl = aPackage.getTypeDeclaration(typeId);
                if (typeDecl != null) {
                    if (typeDecl.getBasicType() != null) {
                        return convertSignalDataType(aPackage, typeDecl.getBasicType(), aIsArray);

                    } else if (typeDecl.getExternalReference() != null) {
                        return convertSignalDataType(aPackage, typeDecl.getExternalReference(), aIsArray);
                    }
                }
            }

            return null;
        }

        GlobalSignalDataType result = ModelFactory.eINSTANCE.createGlobalSignalDataType();
        result.setIsArray(aIsArray);

        if (aDataType instanceof BasicType) {
            result.setDataType(convertBasicType((BasicType) aDataType));

        } else if (aDataType instanceof RecordType) {
            EList<Member> memberList = ((RecordType) aDataType).getMember();
            Member member = memberList.get(0);
            ExternalReference dataTypeExternalReference = null;
            if (null != member.getExternalReference()) {
                dataTypeExternalReference = member.getExternalReference();
            }

            result.setClassName(XPDLUtils.getBomClassName(dataTypeExternalReference));
            result.setDataType(GlobalSignalType.CASE_REFERENCE);

        } else if (aDataType instanceof ExternalReference) {
            result.setClassName(XPDLUtils.getBomClassName((ExternalReference) aDataType));
            result.setDataType(GlobalSignalType.BOM);
        }

        return result;
    }

    private GlobalSignalType convertBasicType(BasicType aBasicType) {
        BasicTypeType basicTypeType = aBasicType.getType();
        if (basicTypeType != null) {
            switch (basicTypeType.getValue()) {
            case BasicTypeType.BOOLEAN:
                return GlobalSignalType.BOOLEAN;

            case BasicTypeType.DATETIME:
                return GlobalSignalType.DATE_TIME;

            case BasicTypeType.DATE:
                return GlobalSignalType.DATE;

            case BasicTypeType.TIME:
                return GlobalSignalType.TIME;

            case BasicTypeType.FLOAT:
                return GlobalSignalType.FLOAT;

            case BasicTypeType.INTEGER:
                return GlobalSignalType.INTEGER;

            case BasicTypeType.STRING:
            case BasicTypeType.PERFORMER:
                return GlobalSignalType.STRING;
            }
        }

        return null;
    }

    /**
     * Serializes the given BxGlobalSignalModel to the given OutputStream.
     * 
     * @param aModel
     *            the model to be serialized.
     * @param aOuput
     *            the output stream to which the model is to be serialized.
     * @throws IOException
     */
    private void writeModel(BxGlobalSignalModel aModel, OutputStream aOuput) throws IOException {
        XMLResourceImpl resource = new XMLResourceImpl();
        resource.getContents().add(aModel);
        resource.getDefaultSaveOptions().put(XMLResource.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$

        resource.save(aOuput, null);
    }
}
