/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.xpd.n2.cdm.rasc;

import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceVisitor;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubMonitor;
import org.eclipse.uml2.uml.Model;

import com.tibco.bpm.da.dm.api.DataModel;
import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.xpd.bom.resources.BOMResourcesPlugin;
import com.tibco.xpd.bom.resources.wc.BOMWorkingCopy;
import com.tibco.xpd.n2.cdm.internal.Messages;
import com.tibco.xpd.n2.cdm.transform.BomTransformer;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.rasc.core.RascWriter;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.projectconfig.SpecialFolder;
import com.tibco.xpd.resources.util.SpecialFolderUtil;
import com.tibco.xpd.resources.util.WorkingCopyUtil;

/**
 * The RascContributor implementation to add the Case Data Models (CDMs)
 * (generated from BOMs) to the RASC.
 *
 * @author jarciuch
 * @since 25 Mar 2019
 */
public class CdmRascContributor implements RascContributor {

    /**
     * The MicroServices to which the artifacts generated by this contributor
     * will be delivered.
     */
    private static final MicroService[] DESTINATION_SERVICES =
            { MicroService.CM };

    /**
     * The transformer to transform the studio BOM to the RASC Case Data Model.
     */
    private static final BomTransformer TRANSFORMER = new BomTransformer();

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#getId()
     */
    @Override
    public String getId() {
        return "com.tibco.xpd.n2.cdm.rasc.contributor"; //$NON-NLS-1$
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#hasContributionsFor(org.eclipse.core.resources.IProject)
     */
    @Override
    public boolean hasContributionsFor(IProject aProject) {
        try {
            return !getBomRascDescriptors(aProject).isEmpty();
        } catch (CoreException e) {
            return false;
        }
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#process(org.eclipse.core.resources.IProject,
     *      org.eclipse.core.runtime.IProgressMonitor,
     *      com.tibco.xpd.rasc.core.RascWriter)
     */
    @Override
    public void process(IProject aProject, IProgressMonitor aProgressMonitor,
            RascWriter aWriter) throws Exception {

        List<IFile> bomFiles =
                getBomRascDescriptors(aProject);
        if (bomFiles.isEmpty()) {
            return;
        }

        // Double the steps number as we need one for transformation and one for
        // packaging to RASC.
        SubMonitor monitor = SubMonitor.convert(aProgressMonitor,
                Messages.CdmRascContributor_progress_message,
                bomFiles.size() * 2);

        for (IFile bomFile : bomFiles) {
            Model bomModel = getBomModel(bomFile);
            if (bomModel != null) {
                // has the job been cancelled by the user
                if (monitor.isCanceled()) {
                    return;
                }
                // Transform BOM -> CDM
                DataModel cdmModel = TRANSFORMER.transformBomModel(bomModel);
                monitor.worked(1);

                // has the job been cancelled by the user
                if (monitor.isCanceled()) {
                    return;
                }
                if (cdmModel != null) {
                    // create a named artifact in the RASC - targeted at
                    // micro-services
                    try (OutputStream output =
                            aWriter.addContent(getRascPath(bomModel),
                                    DESTINATION_SERVICES)) {
                        String cdmModelString = cdmModel.serialize();
                        // output the CDM to the RASC artifact
                        output.write(cdmModelString
                                .getBytes(StandardCharsets.UTF_8));
                    }

                }
                monitor.worked(1);

            } else {
                monitor.setCanceled(true);
                throw new RuntimeException(String.format(
                        Messages.CdmRascContributor_cantLoad_message,
                        bomFile.getFullPath()));
            }
        }

    }

    /**
     * Searches the given project for eligible BOMs and return list
     * {@link IFile}. If no BOMs can be found the result will be
     * <code>an empty list</code>.
     * 
     * @param aProject
     *            the project to be searched.
     * @return the list of {@link IFile} for project BOMs eligible to be added
     *         to RASC.
     * @throws CoreException
     */
    private List<IFile> getBomRascDescriptors(IProject aProject)
            throws CoreException {
        if (aProject == null) {
            return Collections.emptyList();
        }

        // look for all BOM special folders
        List<SpecialFolder> sFolders =
                SpecialFolderUtil.getAllSpecialFoldersOfKind(aProject,
                        BOMResourcesPlugin.BOM_SPECIAL_FOLDER_KIND);
        if (sFolders == null) {
            return Collections.emptyList();
        }

        List<IFile> bomFiles = new ArrayList<>();
        for (SpecialFolder sFolder : sFolders) {
            if (sFolder.getFolder() != null
                    && sFolder.getFolder().isAccessible()) {
                // Visit all 'files' within the folder.
                sFolder.getFolder().accept(new IResourceVisitor() {
                    @Override
                    public boolean visit(IResource resource)
                            throws CoreException {
                        // if this is a folder - recurse into it
                        if (resource instanceof IFolder) {
                            return true; // step into the folder
                        }

                        // if it looks like a BOM file
                        if (resource instanceof IFile
                                && BOMResourcesPlugin.BOM_FILE_EXTENSION
                                        .equalsIgnoreCase(
                                                resource.getFileExtension())) {
                            bomFiles.add((IFile) resource);

                        }
                        return false;
                    }
                });
            }
        }
        return bomFiles;
    }

    /**
     * Gets the BOM root model for the provided .bom file.
     * 
     * @return {@link Model} for the provided BOM file (or <code>null</code> if
     *         the model can't be loaded.
     */
    private Model getBomModel(IFile bomFile) {
        WorkingCopy bomWorkingCopy = WorkingCopyUtil.getWorkingCopy(bomFile);
        // Obtain BOM Model
        if (bomWorkingCopy instanceof BOMWorkingCopy
                && ((BOMWorkingCopy) bomWorkingCopy)
                        .getRootElement() instanceof Model
                && ((BOMWorkingCopy) bomWorkingCopy).getRootElement()
                        .eResource() != null) {
            return (Model) ((BOMWorkingCopy) bomWorkingCopy).getRootElement();
        }
        return null;
    }

    /**
     * Returns rasc resource path for a BOM model.
     * 
     * @return the entry name in the RASC for the BOM.
     */
    public String getRascPath(Model bomModel) {
        if (bomModel != null) {
            return bomModel.getName() + ".dm"; //$NON-NLS-1$
        }
        return null;
    }
}
