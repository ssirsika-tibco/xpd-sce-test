#Log class
_label_CDSJavaScript__Log =JavaScript Log Object\n\nLog Object:\n\nClass that allows the log of messages
_label_CDSJavaScript__Log__write =JavaScript write() Method\n\nDefinition and Usage:\n\nThe write() method outputs the given text\n\nSyntax:\n\Log.write(text)\n@param text: Required. The text

#Logger class
_label_CDSJavaScript__Logger =JavaScript Logger Object\n\nLogger Object:\nClass that provides enhanced logging capabilities
_label_CDSJavaScript__Logger__fatal =JavaScript fatal() method\n\nDefinition and Usage:\nThe fatal() method logs the given messages at the fatal logging level.\n\nSyntax:\nLogger.fatal(message);\n\n@param message String
_label_CDSJavaScript__Logger__error =JavaScript error() method\n\nDefinition and Usage:\nThe error() method logs the given messages at the error logging level.\n\nSyntax:\nLogger.error(message);\n\n@param message String
_label_CDSJavaScript__Logger__warn =JavaScript warn() method\n\nDefinition and Usage:\nThe warn() method logs the given messages at the warn logging level.\n\nSyntax:\nLogger.warn(message);\n\n@param message String
_label_CDSJavaScript__Logger__info =JavaScript info() method\n\nDefinition and Usage:\nThe info() method logs the given messages at the info logging level.\n\nSyntax:\nLogger.info(message);\n\n@param message String
_label_CDSJavaScript__Logger__debug =JavaScript debug() method\n\nDefinition and Usage:\nThe debug() method logs the given messages at the debug logging level.\n\nSyntax:\nLogger.debug(message);\n\n@param message String
_label_CDSJavaScript__Logger__trace =JavaScript trace() method\n\nDefinition and Usage:\nThe trace() method logs the given messages at the trace logging level.\n\nSyntax:\nLogger.trace(message);\n\n@param message String
_label_CDSJavaScript__Logger__isFatalEnabled =JavaScript isFatalEnabled() method\n\nDefinition and Usage:\nChecks whether the Fatal logging level is enabled.\nIt returns true if the logging level is enabled, and false otherwise.\n\nSyntax:\nLogger.isFatalEnabled();\n\n@return Boolean
_label_CDSJavaScript__Logger__isErrorEnabled =JavaScript isErrorEnabled() method\n\nDefinition and Usage:\nChecks whether the Error logging level is enabled.\nIt returns true if the logging level is enabled, and false otherwise.\n\nSyntax:\nLogger.isErrorEnabled();\n\n@return Boolean
_label_CDSJavaScript__Logger__isWarnEnabled =JavaScript isWarnEnabled() method\n\nDefinition and Usage:\nChecks whether the Warn logging level is enabled.\nIt returns true if the logging level is enabled, and false otherwise.\n\nSyntax:\nLogger.isWarnEnabled();\n\n@return Boolean
_label_CDSJavaScript__Logger__isInfoEnabled =JavaScript isInfoEnabled() method\n\nDefinition and Usage:\nChecks whether the Info logging level is enabled.\nIt returns true if the logging level is enabled, and false otherwise.\n\nSyntax:\nLogger.isInfoEnabled();\n\n@return Boolean
_label_CDSJavaScript__Logger__isDebugEnabled=JavaScript isDebugEnabled() method\n\nDefinition and Usage:\nChecks whether the Debug logging level is enabled.\nIt returns true if the logging level is enabled, and false otherwise.\n\nSyntax:\nLogger.isDebugEnabled();\n\n@return Boolean
_label_CDSJavaScript__Logger__isTraceEnabled =JavaScript isTraceEnabled() method\n\nDefinition and Usage:\nChecks whether the Trace logging level is enabled.\nIt returns true if the logging level is enabled, and false otherwise.\n\nSyntax:\nLogger.isTraceEnabled();\n\n@return Boolean

#CaseData class
_label_CDSJavaScript__CaseData =JavaScript CaseData Object\n\nCaseData Object:\n\nClass for finding, reading and navigating\nthrough case data
_label_CDSJavaScript__CaseData__findAll =CaseData findAll() Method\n\nDefinition and Usage:\n\nThe findAll() method returns case references\nfor the given case type and version.\n\nSyntax:\n\bpm.caseData.findAll(caseType,fromIndex,pageSize)\n@return String[] case references\n@param caseType:String Required. The fully qualified case type\n(<package>.<class> e.g. "com.mydata.CaseClass")\n@param fromIndex:Number Required. The first item to return (0-based)\n@param pageSize:Number Required. The number of items to return
_label_CDSJavaScript__CaseData__findByCaseIdentifier =CaseData findByCaseIdentifier() Method\n\nDefinition and Usage:\n\nThe findByCaseIdentifier() method returns a case reference\nfor the given case identifier and type.\n\nSyntax:\n\bpm.caseData.findByCaseIdentifier(cid,caseType)\n@return String Case reference\n@param cid:String Required. The case identifier\n@param caseType:String Required. The fully qualified case type\n(<package>.<class> e.g. "com.mydata.CaseClass")
_label_CDSJavaScript__CaseData__findByCriteria =CaseData findByCriteria() Method\nDefinition and Usage:\nThe findByCriteria() method returns a list of case references matching\na DQL query string.\n\nSyntax:\nbpm.caseData.findByCriteria(dqlQuery, caseType, fromIndex, pageSize)\n\nDQL Query String Syntax:\n- You can match case searchable attributes (including the case-state\n   and case identifier attributes) against a value in the query.\n- Only the "=" operator is currently supported.\n- Multiple comparisons can be made using the "and" keyword.\n- Text comparison data must be surrounded by single quotes (add\n   these when concatenating data field values into the query).\n- Single quotes in string values must be escaped.\n- Other data types do not need to be quoted.\n\nDQL Query String Parameter Examples:\n- "name = 'Mc\'Donuts' and age = 18"\n- "caseId = '" + data.CaseId + "'");\n- "started = " +data.StartDateTime + " and "age = " + data.Age;\n\n@return String[] case references\n\n@param dqlQuery  String Required. The DQL search string\n@param caseType  String Required. The fully qualified case type\n                                                     (e.g. "com.mydata.CaseClass")\n@param fromIndex Number Required. The first item to return (0-based)\n@param pageSize  Number Required. The number of items to return
_label_CDSJavaScript__CaseData__findBySimpleSearch =CaseData findBySimpleSearch() Method\n\nDefinition and Usage:\n\nThe findBySimpleSearch() method returns a list of case\nreferences matching the search criteria.\n\nSyntax:\n\bpm.caseData.findBySimpleSearch(searchString,caseType,fromIndex,pageSize)\n@return String[] case references\n@param searchString:String Required. The search string\n@param caseType:String Required. The fully qualified case type\n(<package>.<class> e.g. "com.mydata.CaseClass")\n@param fromIndex:Number Required. The first item to return (0-based)\n@param pageSize:Number Required. The number of items to return
_label_CDSJavaScript__CaseData__read =CaseData read() Method\n\nDefinition and Usage:\n\nThe read() method returns the case object\nfor the given case reference.\n\nSyntax:\n\bpm.caseData.read(caseRef)\n@return Object\n@param caseRef:String Required. The case reference
_label_CDSJavaScript__CaseData__readAll =CaseData readAll() Method\n\nDefinition and Usage:\n\nThe readAll() method returns a list of case objects\nfor the given case references.\n\nSyntax:\n\bpm.caseData.readAll(caseRefs)\n@return Object[]\n@param caseRefs:String[] Required. The case references
_label_CDSJavaScript__CaseData__navigateAll =CaseData navigateAll() Method\n\nDefinition and Usage:\n\nThe navigateAll() method returns a list of case references\nlinked to the supplied case.\n\nSyntax:\n\bpm.caseData.navigateAll(caseRef,linkName,fromIndex,pageSize)\n@return String[] case references\n@param caseRef:String Required. The case reference to search from\n@param linkName:String Required. The field name linking to the cases to return\n@param fromIndex:Number Required. The first item to return (0-based)\n@param pageSize:Number Required. The number of items to return
_label_CDSJavaScript__CaseData__navigateByCriteria =CaseData navigateByCriteria() Method\nDefinition and Usage:\nThe navigateByCriteria() method returns a list of case references\nlinked to the supplied case that match the DQL query string.\n\nSyntax:\nbpm.caseData.navigateByCriteria(caseRef,linkName,dqlQuery,fromIndex,pageSize)\n\nDQL Query String Syntax:\n- You can match case searchable attributes (including the case-state\n   and case identifier attributes) against a value in the query.\n- Only the "=" operator is currently supported.\n- Multiple comparisons can be made using the "and" keyword.\n- Text comparison data must be surrounded by single quotes (add\n   these when concatenating data field values into the query).\n- Single quotes in string values must be escaped.\n- Other data types do not need to be quoted.\n\nDQL Query String Parameter Examples:\n- "name = 'Mc\'Donuts' and age = 18"\n- "caseId = '" + data.CaseId + "'");\n- "started = " +data.StartDateTime + " and "age = " + data.Age;\n\n@return String[] case references\n\n@param caseRef    String Required. The case reference to search from\n@param linkName   String Required. The field name linking to the cases to return\n@param dqlQuery   String Required. The DQL search string\n@param fromIndex  Number Required. The first item to return (0-based)\n@param pageSize   Number Required. The number of items to return
_label_CDSJavaScript__CaseData__navigateBySimpleSearch =CaseData navigateBySimpleSearch() Method\n\nDefinition and Usage:\n\nThe navigateBySimpleSearch() method returns a list of case references\nlinked to the supplied case matching the search.\n\nSyntax:\n\bpm.caseData.navigateBySimpleSearch(caseRef,linkName,searchString,fromIndex,pageSize)\n@return String[] case references\n@param caseRef:String Required. The case reference to search from\n@param linkName:String Required.  The field name linking to the cases to return\n@param searchString:String Required. The search string\n@param fromIndex:Number Required. The first item to return (0-based)\n@param pageSize:Number Required. The number of items to return

_label_CDSJavaScript__ScriptUtil__copy =ScriptUtil copy() Method\n\nDefinition and Usage:\n\nThe copy() method returns a copy of the Object\npassed as a parameter.\n\nSyntax:\n\bpm.scriptUtil.copy(value)\n@return Object copy of Object\n@param value:Object Required. The Object to copy
_label_CDSJavaScript__ScriptUtil__copyAll =ScriptUtil copyAll() Method\n\nDefinition and Usage:\n\nThe copyAll() method returns a copy of the Array\n of Objects passed as a parameter.\n\nSyntax:\n\bpm.scriptUtil.copyAll(valueArray)\n@return Object copy of Object Array\n@param valueArray:Object[] Required. The Object Array to copy
_label_CDSJavaScript__ScriptUtil__stringify =ScriptUtil stringify() Method\n\nDefinition and Usage:\nThe stringify() method returns the JSON string representation of the given object, such as a BOM Class.\n\nSyntax:\nbpm.scriptUtil.stringify(value);\n\n@return JSON string representation of the given value\n@param value:Object Required. An object such as a BOM class.
_label_CDSJavaScript__ScriptUtil__parseData =ScriptUtil parseData() Method\n\nDefinition and Usage:\n\nThe parseData() method parses the given JSON string and constructs an instance \nof the specified BOM Class type and returns an object of that type.\n\nSyntax:\nbpm.scriptUtil.parseData(jsonString, fullyQualifiedBOMClassName)\n@return Object BPM class object of the given BOM Class type.\n\n@param jsonString:String Required. Any valid JSON string that consistent with the \nBOM Class type specified by the fullyQualifiedBOMClassName parameter.\n\n@param caseType:String Required. String constant as fully qualified BOM Class type \nname in the form "<BOM package name>.<BOM class name>".


