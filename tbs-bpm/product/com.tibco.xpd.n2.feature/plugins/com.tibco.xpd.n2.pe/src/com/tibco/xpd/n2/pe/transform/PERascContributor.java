/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.xpd.n2.pe.transform;

import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.util.List;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceVisitor;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.SubMonitor;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.xpd.analyst.resources.xpdl2.Xpdl2ResourcesPlugin;
import com.tibco.xpd.n2.bpel.builder.BPELOnDemandBuilder;
import com.tibco.xpd.n2.bpel.utils.BPELN2Utils;
import com.tibco.xpd.n2.daa.utils.N2PENamingUtils;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.rasc.core.RascWriter;
import com.tibco.xpd.resources.logger.Logger;
import com.tibco.xpd.resources.util.SpecialFolderUtil;

/**
 * An implementation of RascContributor to add Process Engine and Page Flow BPEL
 * files in the RASC artifacts.
 *
 * @author pwatson
 * @since 19 Mar 2019
 */
public class PERascContributor implements RascContributor {
    /**
     * The unique identifier for this RascContribution implementation.
     */
    private static String ID =
            "com.tibco.xpd.n2.pe.transform.pe.contributor"; //$NON-NLS-1$

    private static final String LOG_BUILD_FAILED = "Project build failed ."; //$NON-NLS-1$

    /**
     * The MicroServices to which the Process Engine artifacts generated by this
     * contributor will be delivered.
     */
    public static final MicroService[] BP_DESTINATION_SERVICES =
            { MicroService.BP };

    /**
     * The MicroServices to which the Page-Flow artifacts generated by this
     * contributor will be delivered.
     */
    public static final MicroService[] PF_DESTINATION_SERVICES =
            { MicroService.WR };

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#getId()
     */
    public String getId() {
        return PERascContributor.ID;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#hasContributionsFor(org.eclipse.core.resources.IProject)
     */
    public boolean hasContributionsFor(IProject aProject) {
        List<IResource> xpdlResources = SpecialFolderUtil
                .getAllDeepResourcesInSpecialFolderOfKind(aProject,
                        N2PENamingUtils.PROCESS_SPECIALFOLDER_KIND,
                        N2PENamingUtils.XPDL_FILE_EXTENSION,
                        false);
        return (xpdlResources != null) && (!xpdlResources.isEmpty());
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#process(org.eclipse.core.resources.IProject,
     *      org.eclipse.core.runtime.IProgressMonitor,
     *      com.tibco.xpd.rasc.core.RascWriter)
     */
    public void process(IProject aProject, IProgressMonitor aProgressMonitor,
            final RascWriter aWriter) throws Exception {
        // refresh the generated BPEL files for the given project
        BPELOnDemandBuilder bpelBuilder = new BPELOnDemandBuilder(aProject);
        IStatus status = bpelBuilder.buildProject(aProgressMonitor);
        if (!status.isOK()) {
            Logger logger = Xpdl2ResourcesPlugin.getDefault().getLogger();
            logger.info(PERascContributor.LOG_BUILD_FAILED);
            logger.log(status);
            return;
        }

        SubMonitor monitor = SubMonitor
                .convert(aProgressMonitor,
                        Messages.PERascContributor_AddingRuntimeProcesses,
                        1);
        try {
            IFolder rootFolder =
                    aProject.getFolder(BPELN2Utils.BPEL_ROOT_OUTPUTFOLDER_NAME);
            if (!rootFolder.exists()) {
                return;
            }

            // recurse over the BPEL files and add them to the RascWriter
            rootFolder.accept(new BpelCopier(aWriter));
        } finally {
            monitor.done();
        }
    }

    /**
     * An implementation of IResourceVisitor to recurse over the content of a
     * visited IFolder looking for BPEL files. For each BPEL file encountered it
     * will copy it to the given RascWriter with the destination MicroServices
     * determined by the location of the BPEL file.
     */
    private static class BpelCopier implements IResourceVisitor {
        private RascWriter writer;

        public BpelCopier(RascWriter aWriter) {
            writer = aWriter;
        }

        /**
         * Visits each node in a resource tree, looking for BPEL files and
         * copying them to the RascWriter.
         * 
         * @see org.eclipse.core.resources.IResourceVisitor#visit(org.eclipse.core.resources.IResource)
         */
        public boolean visit(IResource resource) throws CoreException {
            // if this is a folder - recurse into it
            if (resource instanceof IFolder) {
                return true; // step into the folder
            }

            // if this looks like a BPEL file
            if (BPELN2Utils.BPEL_FILE_EXTENSION
                    .equals(resource.getFileExtension())) {
                // determine its recipient MicroServices
                MicroService[] destinations = getDestinations(resource);
                if (destinations == null) {
                    return false; // ignore this file
                }

                // find the real location of the BPEL file
                URI uri = resource.getLocationURI();
                if (uri == null) {
                    return false; // ignore this file
                }

                try {
                    // copy the BPEL file to the RASC
                    InputStream input =
                            new BufferedInputStream(uri.toURL().openStream());
                    try {
                        // create a RASC artifact with the BPEL file name
                        OutputStream output = writer
                                .addContent(resource.getName(), destinations);
                        try {
                            int len;
                            byte[] buffer = new byte[1024];
                            while ((len = input.read(buffer)) > 0) {
                                output.write(buffer, 0, len);
                            }
                        } finally {
                            output.close();
                        }
                    } finally {
                        input.close();
                    }
                } catch (Exception e) {
                    IStatus status = new Status(Status.ERROR,
                            "PE RASC Contributor Plug-in", //$NON-NLS-1$
                            e.getMessage(), e);
                    throw new CoreException(status);
                }
            }

            return false; // don't recurse into this resource
        }

        /**
         * Determines the MicroServices to which the given resource is to be
         * delivered. If the response is <code>null</code>, the resource will
         * not be included in the RASC artifacts.
         * 
         * @param aResource
         *            the resource that is to be delivered to the MicroServices.
         * @return the list of MicroService destinations. May be
         *         <code>null</code>.
         */
        private MicroService[] getDestinations(IResource aResource) {
            if (BPELN2Utils.BP_OUTPUTFOLDER_NAME.equals(aResource.getName())) {
                return PERascContributor.BP_DESTINATION_SERVICES;
            }
            if (BPELN2Utils.PF_OUTPUTFOLDER_NAME.equals(aResource.getName())) {
                return PERascContributor.PF_DESTINATION_SERVICES;
            }
            IContainer parent = aResource.getParent();
            return (parent == null) ? null : getDestinations(parent);
        }
    }
}
