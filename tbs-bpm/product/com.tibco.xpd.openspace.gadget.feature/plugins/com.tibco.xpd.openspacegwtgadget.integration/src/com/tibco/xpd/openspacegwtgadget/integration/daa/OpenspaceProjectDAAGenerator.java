/*
 * Copyright (c) TIBCO Software Inc 2004, 2013. All rights reserved.
 */

package com.tibco.xpd.openspacegwtgadget.integration.daa;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.MultiStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.ISchedulingRule;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;

import com.tibco.amf.model.daaspec.DistributedApplicationArchiveDescriptor;
import com.tibco.amf.sca.componenttype.ComponentTypeActivator;
import com.tibco.amf.sca.componenttype.ComponentTypeService;
import com.tibco.amf.sca.componenttype.CompositeModelBuilder;
import com.tibco.amf.sca.model.componenttype.Requirements;
import com.tibco.amf.sca.model.composite.Component;
import com.tibco.amf.sca.model.composite.Composite;
import com.tibco.amf.sca.model.implementationtype.webapp.WebAppImplementation;
import com.tibco.amf.sca.model.requirements.ApplicationRequirements;
import com.tibco.amf.sca.model.requirements.ComponentRequirements;
import com.tibco.amf.sca.model.requirements.RequirementsFactory;
import com.tibco.amf.tools.composite.resources.internal.codegen.OsgiManifestHeaders;
import com.tibco.amf.tools.packager.IPackagerService;
import com.tibco.amf.tools.packager.PackagerPlugin;
import com.tibco.xpd.daa.CompositeContributor;
import com.tibco.xpd.daa.internal.BaseProjectDAAGenerator;
import com.tibco.xpd.daa.internal.util.CompositeContributorsExtensionManager;
import com.tibco.xpd.daa.internal.util.DAANamingUtils;
import com.tibco.xpd.daa.internal.util.PluginManifestHelper;
import com.tibco.xpd.openspacegwtgadget.integration.OpenspaceGadgetPlugin;
import com.tibco.xpd.openspacegwtgadget.integration.core.OpenspaceGadgetNature;
import com.tibco.xpd.openspacegwtgadget.integration.internal.Messages;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.XpdResourcesPlugin;
import com.tibco.xpd.resources.logger.Logger;
import com.tibco.xpd.resources.util.SubProgressMonitorEx;
import com.tibco.xpd.resources.util.UnprotectedWriteOperation;
import com.tibco.xpd.resources.util.WorkingCopyUtil;
import com.tibco.xpd.ui.util.NameUtil;

/**
 * DAA generator for openspace gadget development projects.
 * 
 * @author aallway
 * @since 25 Jan 2013
 */
public class OpenspaceProjectDAAGenerator extends BaseProjectDAAGenerator {

    private static final Logger LOG = OpenspaceGadgetPlugin.getDefault()
            .getLogger();

    /**
     * Openspace Gadget Dev project DAA composite contribution context.
     */
    public static final String OPENSPACE_DAA_COMPOSITE_CONTRIBUTION_CONTEXT =
            "com.tibco.xpd.openspace.gadget.daa"; //$NON-NLS-1$

    /**
     * @see com.tibco.xpd.daa.internal.BaseProjectDAAGenerator#getModuleOutputFolder(org.eclipse.core.resources.IProject,
     *      boolean)
     * 
     * @param project
     * @param create
     * @return
     */
    @Override
    public IFolder getModuleOutputFolder(IProject project, boolean create) {
        return OpenspaceGadgetNature.getOpenspaceDAAStagingFolder(project,
                create);
    }

    /**
     * @see com.tibco.xpd.daa.internal.BaseProjectDAAGenerator#getCompositeContributorContext()
     * 
     * @return
     */
    @Override
    public String getCompositeContributorContext() {
        return OPENSPACE_DAA_COMPOSITE_CONTRIBUTION_CONTEXT;
    }

    /**
     * @see com.tibco.xpd.daa.internal.BaseProjectDAAGenerator#generateDAA(org.eclipse.core.resources.IProject,
     *      org.eclipse.core.runtime.IProgressMonitor, boolean)
     * 
     * @param project
     * @param monitor
     * @param replaceWithTS
     * @return
     */
    @Override
    public IStatus generateDAA(IProject project, IProgressMonitor monitor,
            boolean replaceWithTS) {
        try {
            monitor.beginTask(String
                    .format(Messages.OpenspaceProjectDAAGenerator_GneratingDAA_status_message,
                            project.getName()),
                    2);

            String timeStamp = DAANamingUtils.getAutogeneratedQualifier();

            /*
             * Get-n-create the DAA staging folder.
             */
            IFolder daaStagingFolder = getModuleOutputFolder(project, true);

            String compositeFileName = getCompositeFileName(project);

            Composite[] compositeArray = new Composite[1];

            /*
             * Create the COmposite file (that describes the project
             * application.
             */
            IStatus status =
                    buildComposite(project,
                            daaStagingFolder,
                            compositeFileName,
                            compositeArray,
                            timeStamp,
                            replaceWithTS,
                            SubProgressMonitorEx
                                    .createNestedSubProgressMonitor(monitor, 1));

            if (status.getSeverity() > IStatus.WARNING) {
                MultiStatus compositeBuildStatus =
                        new MultiStatus(
                                OpenspaceGadgetPlugin.PLUGIN_ID,
                                0,
                                String.format(Messages.OpenspaceProjectDAAGenerator_CompositeGenSkipped_message,
                                        project.getName()), null);
                compositeBuildStatus.add(status);
                return compositeBuildStatus;
            }

            if (compositeArray[0] != null) {
                /*
                 * Build DAA from the composite.
                 */
                IFile compositeResource =
                        WorkingCopyUtil.getFile(compositeArray[0]);

                XpdResourcesPlugin.getDefault()
                        .getWorkingCopy(compositeResource).reLoad();

                IStatus daaBuildStatus =
                        buildDAA(project,
                                compositeArray[0],
                                compositeResource,
                                daaStagingFolder,
                                timeStamp,
                                SubProgressMonitorEx
                                        .createNestedSubProgressMonitor(monitor,
                                                1));

                if (status.getSeverity() > IStatus.OK) {
                    List<IStatus> children = new ArrayList<IStatus>();
                    children.add(status);

                    if (daaBuildStatus.getSeverity() > IStatus.OK) {
                        children.add(daaBuildStatus);
                    }
                    return new MultiStatus(
                            OpenspaceGadgetPlugin.PLUGIN_ID,
                            0,
                            children.toArray(new IStatus[children.size()]),
                            String.format(Messages.OpenspaceProjectDAAGenerator_ProblemsGeneratingDAA_message,
                                    project.getName()), null);
                }

                return daaBuildStatus;

            } else {
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        String.format(Messages.OpenspaceProjectDAAGenerator_CompositeGenerationFailed_message,
                                project.getName()));
            }

        } finally {
            monitor.done();
        }
    }

    /**
     * @param project
     * @param compositeOutputFolder
     * @param compositeFileName
     * @param createCompositeArray
     *            1 element array for return of the generated composite model.
     * @param timeStamp
     * @param replaceWithTS
     * @param monitor
     * 
     * @return Status + new composite in createdCompositeArray[0]
     */
    private IStatus buildComposite(final IProject project,
            IFolder compositeOutputFolder, String compositeFileName,
            Composite[] createdCompositeArray, String timeStamp,
            boolean replaceWithTS, IProgressMonitor monitor) {
        try {
            final List<CompositeContributor> compositeContributors =
                    CompositeContributorsExtensionManager
                            .getInstance()
                            .getCompositeContributors(getCompositeContributorContext());

            monitor.beginTask(Messages.OpenspaceProjectDAAGenerator_BuildingComponentModel_status_message,
                    6);

            /*
             * Allow each contributor to validate project from it's point of
             * view before composite creation.
             */
            IStatus status =
                    performCompositeContributionValidations(project,
                            compositeContributors,
                            SubProgressMonitorEx
                                    .createNestedSubProgressMonitor(monitor, 1));

            if (monitor.isCanceled()) {
                return Status.CANCEL_STATUS;
            }

            if (status.getSeverity() > IStatus.WARNING) {
                return status;
            }

            /*
             * Create the composite model.
             */
            IPath compositeFilePath =
                    compositeOutputFolder.getFullPath()
                            .append(compositeFileName);

            final URI compositeLocation =
                    URI.createPlatformResourceURI(compositeFilePath.toString(),
                            true);

            final Composite composite = createCompositeModel(compositeLocation);

            if (monitor.isCanceled()) {
                return Status.CANCEL_STATUS;
            }

            monitor.worked(1);

            /*
             * Perform any last minute configuration of the composite before it
             * is saved.
             */
            status =
                    performInitialCompositeConfiguration(project,
                            composite,
                            timeStamp,
                            replaceWithTS,
                            SubProgressMonitorEx
                                    .createNestedSubProgressMonitor(monitor, 1));

            if (monitor.isCanceled()) {
                return Status.CANCEL_STATUS;
            } else if (status.getSeverity() > IStatus.WARNING) {
                return status;
            }

            /*
             * Contribute (and configure) components.
             */
            status =
                    performCompositeContributions(project,
                            compositeContributors,
                            compositeOutputFolder,
                            compositeLocation,
                            composite,
                            timeStamp,
                            SubProgressMonitorEx
                                    .createNestedSubProgressMonitor(monitor, 1));

            if (monitor.isCanceled()) {
                return Status.CANCEL_STATUS;

            } else if (status.getSeverity() > IStatus.WARNING) {
                return status;

            } else if (composite.getComponents().isEmpty()) {
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        Messages.OpenspaceProjectDAAGenerator_GeneratedCompositeEmpty_message);
            }

            /*
             * Perform any last minute configuration of the composite before it
             * is saved.
             */
            status =
                    performFinalCompositeConfiguration(project,
                            composite,
                            SubProgressMonitorEx
                                    .createNestedSubProgressMonitor(monitor, 1));

            if (monitor.isCanceled()) {
                return Status.CANCEL_STATUS;
            } else if (status.getSeverity() > IStatus.WARNING) {
                return status;
            }

            /*
             * Save the composite.
             */
            status =
                    performSaveComposite(project,
                            composite,
                            SubProgressMonitorEx
                                    .createNestedSubProgressMonitor(monitor, 1));

            if (monitor.isCanceled()) {
                return Status.CANCEL_STATUS;
            } else if (status.getSeverity() > IStatus.WARNING) {
                return status;
            }

            createdCompositeArray[0] = composite;
            return status;

        } finally {
            monitor.done();
        }
    }

    /**
     * Allow each contributor to validate project from it's point of view before
     * composite creation.
     * 
     * @param project
     * @param compositeContributors
     * @param monitor
     * 
     * @return status
     */
    protected IStatus performCompositeContributionValidations(IProject project,
            final List<CompositeContributor> compositeContributors,
            IProgressMonitor monitor) {
        try {
            monitor.beginTask(Messages.OpenspaceProjectDAAGenerator_ComponentValidation_status_message,
                    compositeContributors.size());

            MultiStatus status =
                    new MultiStatus(
                            OpenspaceGadgetPlugin.PLUGIN_ID,
                            IStatus.OK,
                            Messages.OpenspaceProjectDAAGenerator_ProblemsCreatingComposite_message,
                            null);

            for (CompositeContributor contributor : compositeContributors) {
                IStatus s =
                        contributor.validate(project, SubProgressMonitorEx
                                .createNestedSubProgressMonitor(monitor, 1));

                if (s.getSeverity() == IStatus.CANCEL) {
                    monitor.setCanceled(true);
                    return s;
                }

                if (s.getSeverity() > IStatus.OK) {
                    status.add(s);
                }
            }

            return status;

        } finally {
            monitor.done();
        }
    }

    /**
     * Perform initial configuration of the composite before componenets etc are
     * added.
     * 
     * @param project
     * @param composite
     * @param timeStamp
     * @param replaceWithTS
     * @param monitor
     * 
     * @return Status
     */
    protected IStatus performInitialCompositeConfiguration(
            final IProject project, final Composite composite,
            String timeStamp, boolean replaceWithTS, IProgressMonitor monitor) {
        try {
            monitor.beginTask("Initial Configuration", 1); //$NON-NLS-1$

            /*
             * We will Set the composite models version number from the java
             * project version number.
             */
            final String manifestVersionNumber =
                    getManifestVersionNumber(project, timeStamp, replaceWithTS);

            if (manifestVersionNumber == null) {
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        Messages.OpenspaceProjectDAAGenerator_CouldNotAccestManifest_message);

            }

            TransactionalEditingDomain editingDomain =
                    TransactionUtil.getEditingDomain(composite);

            /*
             * Any post-component-contribution modifications to policy set.
             */
            UnprotectedWriteOperation compositeAdditionalOp =
                    new UnprotectedWriteOperation(editingDomain) {
                        @SuppressWarnings("unchecked")
                        @Override
                        protected Object doExecute() {
                            /*
                             * We will Set the composite models version number
                             * from the java project version number.
                             */
                            composite.setVersion(manifestVersionNumber);

                            composite
                                    .setTargetNamespace(String
                                            .format("http://tibco.openspace.gadget/%1$s", //$NON-NLS-1$
                                                    getProjectPsuedonym(project)
                                                            .toLowerCase()));

                            composite.setName(String
                                    .format("%1$s_GadgetComposite", //$NON-NLS-1$
                                            getProjectPsuedonym(project)));

                            return Status.OK_STATUS;
                        }

                    };

            IStatus status = (IStatus) compositeAdditionalOp.execute();

            monitor.worked(1);

            return status;

        } finally {
            monitor.done();
        }

    }

    /**
     * Perform any last minute configuration of the composite before it is
     * saved.
     * 
     * @param project
     * @param composite
     * @param monitor
     * 
     * @return Status
     */
    protected IStatus performFinalCompositeConfiguration(
            final IProject project, final Composite composite,
            final IProgressMonitor monitor) {
        try {
            monitor.beginTask("Final Configuration", 1); //$NON-NLS-1$

            IStatus status = Status.OK_STATUS;

            /*
             * Any post-component-contribution modifications
             */
            UnprotectedWriteOperation compositeAdditionalOp =
                    new UnprotectedWriteOperation(
                            TransactionUtil.getEditingDomain(composite)) {
                        @SuppressWarnings("unchecked")
                        @Override
                        protected Object doExecute() {

                            /**
                             * The static resource we add to the web-app-update
                             * element in WebApp component's extensions is not
                             * picked up by the WebApp ComponentTypeResolver and
                             * therefore is not added as an IncludedResource to
                             * the requirements file when DAA is created.
                             * 
                             * In order to work around this we will create a
                             * component.override.requirements file with the
                             * extra IncludedResource in, and this is used by
                             * the DAA generation API in preference to the one
                             * it generates by default.
                             */
                            return createComponentOverrideRequirements(project,
                                    composite,
                                    SubProgressMonitorEx
                                            .createNestedSubProgressMonitor(monitor,
                                                    1));

                        }

                    };

            status = (IStatus) compositeAdditionalOp.execute();

            return status;

        } finally {
            monitor.done();
        }
    }

    /**
     * Create a component.override.requirements file with the extra
     * IncludedResource for gadget resources folder we name in the
     * web-app-update extension in our WebApp component, this is used by the DAA
     * generation API in preference to the one it generates by default.
     * 
     * @param project
     *            * @param composite
     * @param monitor
     * 
     * @return Status
     */
    private IStatus createComponentOverrideRequirements(IProject project,
            final Composite composite, IProgressMonitor monitor) {
        try {
            monitor.beginTask(Messages.OpenspaceProjectDAAGenerator_CreatingRequirements_status_message,
                    2);

            /*
             * Create the default requirements that DAA generator would create
             * if left to it's own devices.
             */
            ComponentTypeService componentTypeService =
                    ComponentTypeActivator.getDefault()
                            .getComponentTypeService();

            Component openspaceGadgetComponent = null;

            if (!composite.getComponents().isEmpty()) {
                openspaceGadgetComponent = composite.getComponents().get(0);
            }

            if (openspaceGadgetComponent == null
                    || !(openspaceGadgetComponent.getImplementation() instanceof WebAppImplementation)) {
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        String.format("Component missing or unexpected type int generated composite for project '%1$s'", //$NON-NLS-1$
                                project));
            }

            Requirements baseRequirements =
                    componentTypeService
                            .getComponentRequirements(openspaceGadgetComponent
                                    .getImplementation());

            if ((baseRequirements == null)) {
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        String.format("Failed to generate component requirements (or got unexpected requirement type) for project '%1$s'", //$NON-NLS-1$
                                project.getName()));
            }

            /*
             * Add the gadget resources folder as an included resource and
             * serialise.
             */
            baseRequirements
                    .getIncludedResources()
                    .add(OpenspaceProjectCompositeContributor.getGadgetResourceFolderName(project));

            /*
             * Wrap up the base Requirements in a COmponentRequirements object
             * otherwise DAA generator will ignore the override completely
             * (com.tibco
             * .amf.sca.componenttype.internal.GenericITUtil.getRequirements())
             */
            ComponentRequirements componentRequirements =
                    RequirementsFactory.eINSTANCE.createComponentRequirements();
            componentRequirements.setComponent(openspaceGadgetComponent);
            componentRequirements.getRequiredCapabilities()
                    .addAll(EcoreUtil.copyAll(baseRequirements
                            .getRequiredCapabilities()));
            componentRequirements.getIncludedResources()
                    .addAll(baseRequirements.getIncludedResources());
            componentRequirements.getPackageImports()
                    .addAll(EcoreUtil.copyAll(baseRequirements
                            .getPackageImports()));
            componentRequirements.getRequiredBundles()
                    .addAll(EcoreUtil.copyAll(baseRequirements
                            .getRequiredBundles()));
            componentRequirements.getProvidedCapabilities()
                    .addAll(EcoreUtil.copyAll(baseRequirements
                            .getProvidedCapabilities()));
            componentRequirements.getFeatureDependencies()
                    .addAll(EcoreUtil.copyAll(baseRequirements
                            .getFeatureDependencies()));
            componentRequirements.getCapabilityPropagations()
                    .addAll(EcoreUtil.copyAll(baseRequirements
                            .getCapabilityPropagations()));
            componentRequirements.getDeploymentConstraints()
                    .addAll(EcoreUtil.copyAll(baseRequirements
                            .getDeploymentConstraints()));
            componentRequirements.getApplicationLoggers()
                    .addAll(baseRequirements.getApplicationLoggers());
            componentRequirements.getNodeLoggers()
                    .addAll(baseRequirements.getNodeLoggers());

            /*
             * Component requirements lives in applicaitonRequirements element
             * (that's the root element expected in the override requirements
             * file.
             */
            ApplicationRequirements applicationRequirements =
                    RequirementsFactory.eINSTANCE
                            .createApplicationRequirements();
            applicationRequirements.getRequirements()
                    .add(componentRequirements);

            monitor.worked(1);

            /*
             * File URI of requirements override file is original +
             * .override.requirements
             */
            URI uri = composite.eResource().getURI();
            uri = uri.trimFileExtension();
            uri = uri.appendFileExtension("override.requirements"); //$NON-NLS-1$

            try {
                TransactionalEditingDomain editingDomain =
                        XpdResourcesPlugin.getDefault().getEditingDomain();

                Resource requirementsResource =
                        editingDomain.getResourceSet().createResource(uri);
                requirementsResource.getContents().add(applicationRequirements);

                requirementsResource.save(null);

            } catch (Exception e) {
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        String.format(Messages.OpenspaceProjectDAAGenerator_ErrorSavingRequirements_message,
                                uri.toFileString(),
                                project.getName()), e);

            }

            monitor.worked(1);

            return Status.OK_STATUS;

        } finally {
            monitor.done();
        }
    }

    /**
     * Execute all the composite contributions.
     * 
     * @param project
     * @param compositeContributors
     * @param compositeOutputFolder
     * @param compositeLocation
     * @param composite
     * @param timeStamp
     * @param monitor
     * 
     * @return Status
     */
    protected IStatus performCompositeContributions(IProject project,
            final List<CompositeContributor> compositeContributors,
            IFolder compositeOutputFolder, final URI compositeLocation,
            final Composite composite, String timeStamp,
            IProgressMonitor monitor) {

        try {
            monitor.beginTask("", compositeContributors.size()); //$NON-NLS-1$

            for (CompositeContributor contributor : compositeContributors) {
                if (monitor.isCanceled()) {
                    return Status.CANCEL_STATUS;
                }

                IStatus s =
                        contributor
                                .contributeToComposite(project,
                                        compositeOutputFolder,
                                        composite,
                                        compositeLocation,
                                        timeStamp,
                                        true,
                                        null,
                                        SubProgressMonitorEx
                                                .createNestedSubProgressMonitor(monitor,
                                                        1));
                if (s.getSeverity() == IStatus.CANCEL) {
                    monitor.setCanceled(true);
                    return s;
                }

                if (s.getSeverity() > IStatus.WARNING) {
                    return s;
                }
            }

            return Status.OK_STATUS;

        } finally {
            monitor.done();
        }
    }

    /**
     * Save the composite to disk.
     * 
     * @param project
     * @param composite
     * @param monitor
     * 
     * @return Status
     */
    protected IStatus performSaveComposite(final IProject project,
            final Composite composite, IProgressMonitor monitor) {
        try {
            monitor.beginTask(Messages.OpenspaceProjectDAAGenerator_Saving_status_message,
                    1);

            // Saving composite.
            UnprotectedWriteOperation setContentsOp =
                    new UnprotectedWriteOperation(
                            TransactionUtil.getEditingDomain(composite)) {
                        @Override
                        protected Object doExecute() {
                            try {
                                composite.eResource().save(null);

                                LOG.debug(String.format //
                                        ("Composite " + "'%s' saved.", // //$NON-NLS-1$ //$NON-NLS-2$
                                                composite.eResource().getURI()
                                                        .toString()));
                            } catch (IOException ioex) {
                                LOG.error(ioex);
                                return new Status(
                                        IStatus.ERROR,
                                        OpenspaceGadgetPlugin.PLUGIN_ID,
                                        String.format(Messages.OpenspaceProjectDAAGenerator_FailedSavingComposite_message,
                                                composite.eResource().getURI()
                                                        .toString(),
                                                project.getName()));
                            }
                            return Status.OK_STATUS;
                        }
                    };

            IStatus status = (IStatus) setContentsOp.execute();
            monitor.worked(1);

            if (status.isOK()) {
                IFile file = WorkingCopyUtil.getFile(composite);
                if (file != null) {
                    try {
                        file.refreshLocal(1, null);
                    } catch (CoreException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    WorkingCopy wc =
                            WorkingCopyUtil.getWorkingCopyFor(composite);

                    System.out.println(wc);
                }

            }

            return status;

        } finally {
            monitor.done();
        }
    }

    /**
     * @param project
     * @param timeStamp
     * @param replaceWithTS
     * 
     * @return Gadget Project version number from MANIFEST file or
     *         <code>null</code> if cannot access.
     */
    @SuppressWarnings("restriction")
    private String getManifestVersionNumber(IProject project, String timeStamp,
            boolean replaceWithTS) {
        Manifest manifest = PluginManifestHelper.getManifest(project);

        if (manifest != null) {
            Attributes attributes = manifest.getMainAttributes();

            if (attributes != null) {
                String bundleVersion =
                        attributes.getValue(OsgiManifestHeaders.BUNDLE_VERSION);

                if (replaceWithTS) {
                    return PluginManifestHelper
                            .getUpdatedBundleVersion(bundleVersion, timeStamp);
                } else {
                    return bundleVersion;
                }

            }
        }
        return null;
    }

    /**
     * @param compositeLocation
     * @return composite
     */
    private Composite createCompositeModel(final URI compositeLocation) {
        final ComponentTypeActivator cts = ComponentTypeActivator.getDefault();
        final CompositeModelBuilder mb = cts.getModelBuilder();

        final Composite composite = mb.createComposite(compositeLocation);
        return composite;
    }

    /**
     * @param project
     * @return The composite file name for the openspace gadget project.
     */
    private String getCompositeFileName(IProject project) {
        String nmToken = getProjectPsuedonym(project);

        return nmToken.toLowerCase() + ".composite"; //$NON-NLS-1$
    }

    /**
     * @param project
     * @return The pseudonym for the project (to be used for composite/daa file
     *         naming.
     */
    private String getProjectPsuedonym(IProject project) {
        String nmToken = NameUtil.getInternalName(project.getName(), false);
        return nmToken;
    }

    /**
     * Build the DAA.
     * 
     * @param project
     * @param composite
     * @param compositeFile
     * @param daaStagingFolder
     * @param timeStamp
     * @param createNestedSubProgressMonitor
     * 
     * @return status
     */
    private IStatus buildDAA(IProject project, Composite composite,
            IFile compositeFile, IFolder daaStagingFolder, String timeStamp,
            IProgressMonitor monitor) {
        try {
            monitor.beginTask("", 2); //$NON-NLS-1$

            if (containsDaaErrors(project)) {
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        String.format(Messages.OpenspaceProjectDAAGenerator_ProjectHasProblems_message,
                                project.getName()));
            }

            IPackagerService packagerService =
                    PackagerPlugin.getDefault().getPackagerService();

            IFile[] modelFiles = new IFile[] { compositeFile };

            DistributedApplicationArchiveDescriptor generateDaaDescriptor;
            try {

                /**
                 * Create the DAA packaging descriptor
                 */
                generateDaaDescriptor =
                        packagerService
                                .generateDaaDescriptor(modelFiles,
                                        false,
                                        new String[0],
                                        SubProgressMonitorEx
                                                .createNestedSubProgressMonitor(monitor,
                                                        1));

                generateDaaDescriptor.setQualifier(timeStamp);

                String daaFileName =
                        getProjectPsuedonym(project)
                                + "." + DAANamingUtils.DAA_FILE_EXTENSION; //$NON-NLS-1$
                IPath daaFilePath =
                        daaStagingFolder.getFullPath().append(daaFileName);

                generateDaaDescriptor.setDaaSaveLocationInWorkspace(daaFilePath
                        .toPortableString());

                Map optionsMap = new HashMap();
                optionsMap.put(IPackagerService.PLUGIN_BUILD_SCHEDULING_RULE,
                        new MutexRule());
                optionsMap.put(IPackagerService.WAIT_FOR_AUTOBUILD_JOBS,
                        Boolean.FALSE);

                /*
                 * Generate the DAA
                 */
                IStatus status =
                        packagerService.generateDaa(generateDaaDescriptor,
                                optionsMap,
                                SubProgressMonitorEx
                                        .createSubTaskProgressMonitor(monitor,
                                                1));

                if (!status.isOK()) {
                    if (status.getException() != null) {
                        LOG.error(status.getException(),
                                "DAA Packaging exception:\n" //$NON-NLS-1$
                                        + status.getMessage());
                    } else {
                        LOG.error("DAA Packaging Failed in plugin:\n" //$NON-NLS-1$
                                + status.getMessage());
                    }

                    return new Status(
                            IStatus.ERROR,
                            OpenspaceGadgetPlugin.PLUGIN_ID,
                            String.format(Messages.OpenspaceProjectDAAGenerator_DAAPackagingFailed_message,
                                    project.getName()));
                }

                IFile daaFile =
                        project.getWorkspace().getRoot().getFile(daaFilePath);
                if (daaFile != null && daaFile.exists()) {
                    daaFile.setDerived(true);
                }

                /*
                 * Done!
                 */

                return status;

            } catch (CoreException e) {
                LOG.error(e);
                return new Status(
                        IStatus.ERROR,
                        OpenspaceGadgetPlugin.PLUGIN_ID,
                        String.format(Messages.OpenspaceProjectDAAGenerator_DAAPackagingFailed_message,
                                project.getName()));
            }

        } finally {
            monitor.done();
        }
    }

    /**
     * @param project
     * 
     * @return true if there are post-composite-creation project errors
     *         preventing generation of DAA
     */
    private boolean containsDaaErrors(IProject project) {
        return false;
    }

    /**
     * Exclusive mutext rule for daa packaging (ensures what ever rule it is
     * applied to can only be done one a t a time I guess (I copied this from n2
     * daa building).
     * 
     * 
     * @author aallway
     * @since 31 Jan 2013
     */
    private static class MutexRule implements ISchedulingRule {
        @Override
        public boolean isConflicting(ISchedulingRule rule) {
            return rule == this;
        }

        @Override
        public boolean contains(ISchedulingRule rule) {
            return rule == this;
        }
    }
}
