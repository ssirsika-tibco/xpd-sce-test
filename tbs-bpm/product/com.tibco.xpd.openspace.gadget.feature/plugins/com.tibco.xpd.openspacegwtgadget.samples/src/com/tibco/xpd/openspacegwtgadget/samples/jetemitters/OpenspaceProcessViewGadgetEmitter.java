package com.tibco.xpd.openspacegwtgadget.samples.jetemitters;

import java.util.Map;

public class OpenspaceProcessViewGadgetEmitter
{
  protected static String nl;
  public static synchronized OpenspaceProcessViewGadgetEmitter create(String lineSeparator)
  {
    nl = lineSeparator;
    OpenspaceProcessViewGadgetEmitter result = new OpenspaceProcessViewGadgetEmitter();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = " ";
  protected final String TEXT_2 = NL + "package ";
  protected final String TEXT_3 = ".client;" + NL + "" + NL + "/** " + NL + "The Sample Gadget example is supplied \"as is\" with no warranties. The code in ";
  protected final String TEXT_4 = " is intended" + NL + "as a simple illustration of the concepts and techniques needed to develop a custom gadget application." + NL + "It is not intended as a basis for production-ready code and should not be used as such. " + NL + "Any references to any third party software in the code is not under our control and we can offer no warranties" + NL + "*/" + NL + "import java.util.ArrayList;" + NL + "import java.util.HashSet;" + NL + "" + NL + "import com.google.gwt.core.client.Callback;" + NL + "import com.google.gwt.core.client.JavaScriptObject;" + NL + "import com.google.gwt.core.client.ScriptInjector;" + NL + "import com.google.gwt.core.client.ScriptInjector.FromUrl;" + NL + "import com.google.gwt.event.dom.client.ClickEvent;" + NL + "import com.google.gwt.event.dom.client.ClickHandler;" + NL + "import com.google.gwt.gadgets.client.Gadget;" + NL + "import com.google.gwt.gadgets.client.UserPreferences;" + NL + "import com.google.gwt.i18n.client.DateTimeFormat;" + NL + "import com.google.gwt.user.client.Window;" + NL + "import com.google.gwt.user.client.rpc.AsyncCallback;" + NL + "import com.google.gwt.user.client.ui.Button;" + NL + "import com.google.gwt.user.client.ui.FlexTable;" + NL + "import com.google.gwt.user.client.ui.Frame;" + NL + "import com.google.gwt.user.client.ui.HorizontalPanel;" + NL + "import com.google.gwt.user.client.ui.Label;" + NL + "import com.google.gwt.user.client.ui.RootLayoutPanel;" + NL + "import com.google.gwt.user.client.ui.ScrollPanel;" + NL + "import com.google.gwt.user.client.ui.TabPanel;" + NL + "import com.google.gwt.user.client.ui.TextArea;" + NL + "import com.google.gwt.user.client.ui.Tree;" + NL + "import com.google.gwt.user.client.ui.TreeItem;" + NL + "import com.google.gwt.user.client.ui.VerticalPanel;" + NL + "import com.tibco.bpm.web.client.model.managedevents.LocaleChangedEvent;" + NL + "import com.tibco.bpm.web.client.model.managedevents.LocaleChangedEventHandler;" + NL + "import com.tibco.bpm.web.client.model.managedevents.LoginEvent;" + NL + "import com.tibco.bpm.web.client.model.managedevents.LoginEventHandler;" + NL + "import com.tibco.bpm.web.client.model.pagebus.hub.ManagedEvent;" + NL + "import com.tibco.bpm.web.client.model.pagebus.hub.ManagedEventClient;" + NL + "import com.tibco.bpm.web.client.model.types.ManagedId;" + NL + "import com.tibco.bpm.web.client.model.types.OrgModelEntity;" + NL + "import com.tibco.bpm.web.client.model.types.WorkItem;" + NL + "import com.tibco.bpm.web.client.model.types.WorkListItem;" + NL + "import com.tibco.bpm.web.client.services.actions.orgmodel.OpenOrgModel;" + NL + "import com.tibco.bpm.web.client.services.results.OrgModelEntityResult;" + NL + "import com.tibco.bpm.web.client.services.utils.BPMWebClientService;" + NL + "import com.tibco.openspace.basegadget.client.ClientConstants;" + NL + "import com.tibco.openspace.basegadget.client.FormRenderer;" + NL + "import com.tibco.openspace.basegadget.client.Logger;" + NL + "import com.tibco.openspace.basegadget.client.OSSTyles;" + NL + "" + NL + "/**" + NL + " * Openspace Gadget: ";
  protected final String TEXT_5 = NL + " *" + NL + " * Entry point classes define <code>onModuleLoad()</code>." + NL + " *" + NL + " * Extra Properties (from AdditionalWizardPage contribution):  " + NL + " *     From Text Control On Extra Property Page:         ";
  protected final String TEXT_6 = NL + " *     From Radio Btn Choice On 2nd Extra Property Page: ";
  protected final String TEXT_7 = NL + " */";
  protected final String TEXT_8 = NL + "@com.google.gwt.gadgets.client.Gadget.ModulePrefs(title = \"";
  protected final String TEXT_9 = "\", description = \"OpenspaceWork Process View Gadget Example\", author = \"Tibco Software\", author_email = \"openspace@tibco.com\")" + NL + "@com.google.gwt.gadgets.client.Gadget.UseLongManifestName(false)" + NL + "@com.google.gwt.gadgets.client.Gadget.AllowHtmlQuirksMode(false)" + NL + "public class ";
  protected final String TEXT_10 = " extends Gadget<UserPreferences> " + NL + "{" + NL + "" + NL + "\tprivate TestGadgetManagedEventClient\ttestGadgetManagedEventClient;" + NL + "" + NL + "\t/**" + NL + "\t * The message displayed to the user when the server cannot be reached or" + NL + "\t * returns an error." + NL + "\t */" + NL + "\tprivate FlexTable\t\t\t\t\t\tworkList\t\t\t= null;" + NL + "" + NL + "\tprivate VerticalPanel\t\t\t\t\tformPanel\t\t\t= null;" + NL + "" + NL + "\tprivate ArrayList<WorkListItem>\t\t\tcurrentResult\t\t= null;" + NL + "" + NL + "\tprivate int\t\t\t\t\t\t\t\tlastSelectedRow\t\t= 0;" + NL + "" + NL + "\tprivate Tree\t\t\t\t\t\t\torgModelTree\t\t= new Tree();" + NL + "" + NL + "\tprivate WorkItem\t\t\t\t\t\topenItem\t\t\t= null;" + NL + "" + NL + "\tprivate TabPanel\t\t\t\t\t\ttabs;" + NL + "" + NL + "\tprivate TextArea\t\t\t\t\t\ttextArea;" + NL + "" + NL + "\tprivate Label\t\t\t\t\t\t\tlastUpdatedLabel;" + NL + "" + NL + "\tprivate Label\t\t\t\t\t\t\tframeLabel;" + NL + "" + NL + "\tprivate Frame\t\t\t\t\t\t\tframe;" + NL + "" + NL + "\tprivate String\t\t\t\t\t\t\tuserId\t\t\t\t= ClientConstants.USER_ID;" + NL + "" + NL + "\tprivate DateTimeFormat\t\t\t\t\tdateTimeFormat\t\t= DateTimeFormat.getFormat(\"yyyyMMdd:HH:mm:ss\");" + NL + "" + NL + "\t/**@GVS " + NL + "\t * currently setting the location of the bpm from the launch gadget page URL" + NL + "\t */" + NL + "\tprotected static final String\t\t\tSERVICE_LOCATION\t= Window.Location.getProtocol() + \"//\"" + NL + "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ Window.Location.getHost() + \"/\"" + NL + "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ ClientConstants.BPM_CONTEXT;" + NL + "" + NL + "\tprivate FormRenderer\t\t\t\t\trenderer;" + NL + "" + NL + "\t//\tprotected static final String\t\t\tPAGEBUS_JS_LOCATION\t= \"http://127.0.0.1:9090/testgadget/testgadget/PageBus.js\";" + NL + "\t" + NL + "\t" + NL + "\t/**This should be the location of the pagebus js file which will be from the same location where test gadget xml is loaded.Ensure that the path" + NL + "\t * is appropriately set, otherwise gadget fails to load*/" + NL + "" + NL + "\tprotected static final String\t\t\tPAGEBUS_JS_LOCATION\t= Window.Location.getProtocol() + \"//\"" + NL + "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ Window.Location.getHost()" + NL + "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+\"/openspace\"" + NL + "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"/sample/PageBus.js\";" + NL + "" + NL + "\tprotected static final String\t\t\tFILE_LAST_UPDATED\t= \"20121116:2030\";" + NL + "" + NL + "\tprivate HashSet<String>\t\t\t\t\tlocalFiredEventKeys\t= new HashSet<String>();" + NL + "" + NL + "\t// Set the location of the AMX BPM server." + NL + "\t// This location is used for all subsequent Action calls executed by BPMWebClientService" + NL + "\tprivate void setServiceLocation()" + NL + "\t{" + NL + "\t\tBPMWebClientService.setServiceLocation(SERVICE_LOCATION);" + NL + "\t}" + NL + "" + NL + "\tpublic void init(UserPreferences up)" + NL + "\t{" + NL + "\t\t/**@GVS Currently this is limitation of dynamically inserting script url of forms cache using DHTML" + NL + "\t\t\t\tit has to be statically inserted into the gadget xml with the absolute url" + NL + "\t\t*/" + NL + "" + NL + "\t\tsetServiceLocation();" + NL + "\t\tloadPageBus();" + NL + "\t}" + NL + "" + NL + "\t/*" + NL + "\t * =====================================================" + NL + "\t * METHOD : loadPageBus" + NL + "\t * =====================================================" + NL + "\t */" + NL + "\t/**" + NL + "\t * The PageBus.js file must be loaded and injected because it cannot be" + NL + "\t * loaded via the TestGadget.gwt.xml module script tag:" + NL + "\t * <p/>" + NL + "\t * <code>" + NL + "\t *     &lt;script src=\"PageBus.js\" /&gt;" + NL + "\t * <code/>" + NL + "\t * <p/>" + NL + "\t * The Cross-Site-Iframe linker does not support &lt;script&gt; tags in the gwt.xml files." + NL + "\t */" + NL + "\tprivate void loadPageBus()" + NL + "\t{" + NL + "\t\tFromUrl fromUrl = ScriptInjector.fromUrl(PAGEBUS_JS_LOCATION);" + NL + "\t\tfromUrl.setCallback(new Callback<Void, Exception>()" + NL + "\t\t{" + NL + "\t\t\tpublic void onFailure(Exception reason)" + NL + "\t\t\t{" + NL + "\t\t\t\tWindow.alert(\"Script load failed for: \" + PAGEBUS_JS_LOCATION);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic void onSuccess(Void result)" + NL + "\t\t\t{" + NL + "\t\t\t\tbuildLayout();" + NL + "\t\t\t\t// Check for URL param nohub and load as ManagedEventClient if absent." + NL + "\t\t\t\tif (testForOpenAjax())" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tif (!Window.Location.getHref().contains(\"nohub\"))" + NL + "\t\t\t\t\t{" + NL + "\t\t\t\t\t\t//Window.alert(\"About to connect the iframe.\");" + NL + "\t\t\t\t\t\ttestGadgetManagedEventClient = new TestGadgetManagedEventClient(\"test\");" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t}" + NL + "\t\t\t\telse" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tWindow.alert(\"ManagedEventClient cannot load because $wnd.OpenAjax is undefined.\");" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "" + NL + "\t\t// If setWindow is not called with the correct $wnd returned from the" + NL + "\t\t// getReferencedWindow() JSNI method below then the PageBus code is" + NL + "\t\t// not injected on the correct window and the subsequent" + NL + "\t\t// ManagedEventClient calls will fail with $wnd.OpenAjax is undefined." + NL + "" + NL + "\t\tfromUrl.setWindow(getReferencedWindow());" + NL + "\t\tfromUrl.inject();" + NL + "\t}" + NL + "" + NL + "\t/*" + NL + "\t * =====================================================" + NL + "\t * METHOD : getReferencedWindow" + NL + "\t * =====================================================" + NL + "\t */" + NL + "\t/**" + NL + "\t * Returns the correctly referenced nested frame window that the GWT compiled" + NL + "\t * script runs in.  See the GWT document at:" + NL + "\t * <p/>" + NL + "\t *     https://developers.google.com/web-toolkit/doc/latest/DevGuideCodingBasicsJSNI" + NL + "\t * <p/>" + NL + "\t *   When accessing the browser's window and document objects from JSNI, you must " + NL + "\t *   reference them as $wnd and $doc, respectively. Your compiled script runs in a" + NL + "\t *   nested frame, and $wnd and $doc are automatically initialized to correctly refer" + NL + "\t *   to the host page's window and document." + NL + "\t *   " + NL + "\t * @return The correctly referenced nested frame window." + NL + "\t */" + NL + "\tpublic native JavaScriptObject getReferencedWindow()" + NL + "\t/*-{" + NL + "\t\treturn $wnd;" + NL + "\t}-*/;" + NL + "" + NL + "\t/*" + NL + "\t * =====================================================" + NL + "\t * METHOD : testForOpenAjax" + NL + "\t * =====================================================" + NL + "\t */" + NL + "\t/**" + NL + "\t * Test that the PageBus.js file has been loaded by verifying that the" + NL + "\t * $wnd.OpenAjax property is initialized." + NL + "\t *" + NL + "\t * @return true if $wnd.OpenAjax is not undefined." + NL + "\t */" + NL + "\tpublic native boolean testForOpenAjax()" + NL + "\t/*-{" + NL + "\t\treturn $wnd.OpenAjax != undefined;" + NL + "\t}-*/;" + NL + "" + NL + "\t/**" + NL + "\t * @GVS" + NL + "\t * This layout is currently built using GWT standard widgets through the code,we can always use UI binder as the layout strategy" + NL + "\t */" + NL + "\tprivate void buildLayout()" + NL + "\t{" + NL + "\t\ttabs = new TabPanel();" + NL + "\t\ttabs.setStyleName(OSSTyles.OSP_TABPANEL);" + NL + "\t\tVerticalPanel workListPanel = new VerticalPanel();" + NL + "" + NL + "\t\tworkListPanel.setStyleName(OSSTyles.OSP_WORKLISTPANEL);" + NL + "\t\tVerticalPanel orgModelPanel = new VerticalPanel();" + NL + "\t\torgModelPanel.setStyleName(OSSTyles.OSP_ORG_MODEL_PANEL);" + NL + "\t\tVerticalPanel messagePanel = new VerticalPanel();" + NL + "\t\tVerticalPanel actionPanel = new VerticalPanel();" + NL + "" + NL + "\t\tScrollPanel workListScrollPanel = new ScrollPanel(workListPanel);" + NL + "" + NL + "\t\ttabs.add(workListScrollPanel, ClientConstants.WORK_LIST);" + NL + "\t\ttabs.add(orgModelPanel, ClientConstants.ORG_MODEL);" + NL + "\t\ttabs.add(messagePanel, ClientConstants.MESSAGES);" + NL + "\t\ttabs.add(actionPanel, ClientConstants.ACTIONS);" + NL + "" + NL + "\t\ttextArea = new TextArea();" + NL + "\t\ttextArea.setHeight(\"430px\");" + NL + "\t\ttextArea.setWidth(\"100%\");" + NL + "\t\tmessagePanel.add(textArea);" + NL + "" + NL + "\t\tframeLabel = new Label();" + NL + "\t\tframeLabel.setStyleName(OSSTyles.OSP_TABPANEL);" + NL + "\t\tlastUpdatedLabel = new Label(\"Last Updated: \" + FILE_LAST_UPDATED);" + NL + "\t\tframe = new Frame();" + NL + "\t\tframe.setHeight(\"390px\");" + NL + "\t\tframe.setWidth(\"100%\");" + NL + "\t\tactionPanel.add(lastUpdatedLabel);" + NL + "\t\tactionPanel.add(frameLabel);" + NL + "\t\tactionPanel.add(frame);" + NL + "" + NL + "\t\tRootLayoutPanel.get().add(tabs);" + NL + "\t\tRootLayoutPanel.get().setStyleName(OSSTyles.OSP_CONTAINER);" + NL + "" + NL + "\t\tHorizontalPanel orgButtonPanel = new HorizontalPanel();" + NL + "\t\tButton getOrgModel = new Button(ClientConstants.GET_ORG_MODEL);" + NL + "\t\torgButtonPanel.add(getOrgModel);" + NL + "\t\torgButtonPanel.setStyleName(OSSTyles.OSP_ORGMODEL_TOOLBAR);" + NL + "\t\torgModelTree = new Tree();" + NL + "" + NL + "\t\torgModelPanel.add(orgButtonPanel);" + NL + "\t\torgModelPanel.add(orgModelTree);" + NL + "" + NL + "\t\tgetOrgModel.addClickHandler(new ClickHandler()" + NL + "\t\t{" + NL + "\t\t\t@Override" + NL + "\t\t\tpublic void onClick(ClickEvent event)" + NL + "\t\t\t{" + NL + "\t\t\t\tgetOrgModel();" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "" + NL + "\t\tworkList = new FlexTable();" + NL + "\t\tformPanel = new VerticalPanel();" + NL + "\t\tformPanel.getElement().setId(\"form-container\");" + NL + "\t\tformPanel.setWidth(\"100%\");" + NL + "\t\tformPanel.setHeight(\"100px\");" + NL + "\t\tworkList.setStyleName(OSSTyles.OSP_DATATABLE);" + NL + "\t\tButton getWorkList = new Button(ClientConstants.GET_WORK_LIST);" + NL + "\t\tButton open = new Button(ClientConstants.OPEN_BUTTON);" + NL + "\t\tButton close = new Button(ClientConstants.CLOSE_BUTTON);" + NL + "\t\tButton complete = new Button(ClientConstants.COMPLETE_BUTTON);" + NL + "\t\tButton cancel = new Button(ClientConstants.CANCEL_BUTTON);" + NL + "\t\tButton pend = new Button(ClientConstants.PEND_BUTTON);" + NL + "\t\tButton allocate = new Button(ClientConstants.ALLOCATE_BUTTON);" + NL + "\t\tButton reoffer = new Button(ClientConstants.REOFFER_BUTTON);" + NL + "" + NL + "\t\t" + NL + "" + NL + "\t\torgModelTree.setStyleName(OSSTyles.OSP_TREE);" + NL + "\t}" + NL + "" + NL + "" + NL + "" + NL + "\tprivate void getOrgModel()" + NL + "\t{" + NL + "\t\tBPMWebClientService.getInstance().execute(new OpenOrgModel(-1, false)," + NL + "\t\t\t\tnew AsyncCallback<OrgModelEntityResult>()" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t@Override" + NL + "\t\t\t\t\tpublic void onFailure(Throwable caught)" + NL + "\t\t\t\t\t{" + NL + "\t\t\t\t\t\tLogger.error(\"Error: \" + caught.getMessage());" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t@Override" + NL + "\t\t\t\t\tpublic void onSuccess(OrgModelEntityResult result)" + NL + "\t\t\t\t\t{" + NL + "\t\t\t\t\t\torgModelTree.clear();" + NL + "\t\t\t\t\t\tif (result != null && result.getEntities() != null)" + NL + "\t\t\t\t\t\t{" + NL + "\t\t\t\t\t\t\tfor (OrgModelEntity entity : result.getEntities())" + NL + "\t\t\t\t\t\t\t{" + NL + "\t\t\t\t\t\t\t\tTreeItem item = new TreeItem(entity.getName());" + NL + "\t\t\t\t\t\t\t\taddChildren(item, entity.getChildren());" + NL + "" + NL + "\t\t\t\t\t\t\t\torgModelTree.addItem(item);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\tprivate void addChildren(TreeItem item, ArrayList<OrgModelEntity> children)" + NL + "\t{" + NL + "\t\tif (children != null)" + NL + "\t\t{" + NL + "\t\t\tfor (OrgModelEntity child : children)" + NL + "\t\t\t{" + NL + "\t\t\t\tTreeItem childItem = item.addItem(child.getName());" + NL + "\t\t\t\tif (child.getChildren() != null)" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\taddChildren(childItem, child.getChildren());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\tprivate ManagedId toManagedObject(WorkListItem item)" + NL + "\t{" + NL + "\t\tManagedId id = new ManagedId();" + NL + "\t\tid.setId(item.getId());" + NL + "\t\tid.setVersion(item.getVersion());" + NL + "\t\treturn id;" + NL + "\t}" + NL + "" + NL + "\tprivate ManagedId toManagedObject(WorkItem item)" + NL + "\t{" + NL + "\t\tManagedId id = new ManagedId();" + NL + "\t\tid.setId(item.getId());" + NL + "\t\tid.setVersion(item.getVersion());" + NL + "\t\treturn id;" + NL + "\t}" + NL + "" + NL + "\tprivate class TestGadgetManagedEventClient extends ManagedEventClient" + NL + "\t{" + NL + "" + NL + "\t\tpublic TestGadgetManagedEventClient(String clientName)" + NL + "\t\t{" + NL + "\t\t\tsuper(clientName);" + NL + "\t\t}" + NL + "" + NL + "\t\t@Override" + NL + "\t\tpublic void addEvents()" + NL + "\t\t{" + NL + "\t\t\tHashSet<ManagedEvent< ? >> managedEvents = new HashSet<ManagedEvent< ? >>();" + NL + "" + NL + "\t\t\t// Create ManageEvent for the Openspace fired event." + NL + "\t\t\tmanagedEvents.add((ManagedEvent< ? >) LoginEvent.create());" + NL + "\t\t\tmanagedEvents.add((ManagedEvent< ? >) LocaleChangedEvent.create());" + NL + "" + NL + "\t\t\tfor (ManagedEvent< ? > event : managedEvents)" + NL + "\t\t\t{" + NL + "\t\t\t\tevent.setCacheEnabled(true);" + NL + "\t\t\t\taddEvent(event);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t}" + NL + "" + NL + "\t\t@Override" + NL + "\t\tpublic void addHandlers()" + NL + "\t\t{" + NL + "\t\t\t// Add a handler for the TestGadget fired ManagedEvent." + NL + "" + NL + "\t\t\t" + NL + "\t\t\t// Add a handler for the Openspace fired ManagedEvent." + NL + "" + NL + "\t\t\taddHandler(LoginEvent.TYPE, new LoginEventHandler()" + NL + "\t\t\t{" + NL + "\t\t\t\t@Override" + NL + "\t\t\t\tpublic void onLoginEvent(LoginEvent event)" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tlogMessage(\"LoginEvent received from Openspace with user: \" + event.getUsername());" + NL + "\t\t\t\t\tsetUserId(event.getUsername());" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\taddHandler(LocaleChangedEvent.TYPE, new LocaleChangedEventHandler()" + NL + "\t\t\t{" + NL + "\t\t\t\t@Override" + NL + "\t\t\t\tpublic void onLocaleChangedEvent(LocaleChangedEvent event)" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tlogMessage(\"LocaleChangedEvent received from Openspace with locale: \" + event.getLocale());" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t}" + NL + "" + NL + "\t\t@Override" + NL + "\t\tpublic void addSubscribers()" + NL + "\t\t{" + NL + "\t\t\t// Subscribers could be added here if there was a need to receive" + NL + "\t\t\t// PageBus messages directly from the PageBus." + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "" + NL + "\tprivate String getUserId()" + NL + "\t{" + NL + "\t\treturn userId;" + NL + "\t}" + NL + "" + NL + "\tprivate void setUserId(String userId)" + NL + "\t{" + NL + "\t\tthis.userId = userId;" + NL + "\t}" + NL + "" + NL + "\tprivate void logMessage(String message)" + NL + "\t{" + NL + "\t\ttextArea.setText(message + \"\\n------------------------------\\n\" + textArea.getText());" + NL + "\t}" + NL + "" + NL + "" + NL + "}";
  protected final String TEXT_11 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    /* 
     * The argument parameter passed to the generate() method will be a 
     * Map<String,String> with (at least) the properties "sampleName", "sampleLabel" and "packageName"
     * And any additional properties you add to map via AdditionalWizardPage contributions.
     */ 
    stringBuffer.append(TEXT_1);
     Map<String,String> variableProperties = (Map<String,String>)argument; 
    /* Make package the one that is selected by user in Create Sample Wizard */ 
    stringBuffer.append(TEXT_2);
    stringBuffer.append(variableProperties.get("packageName"));
    stringBuffer.append(TEXT_3);
    stringBuffer.append(variableProperties.get("sampleName"));
    stringBuffer.append(TEXT_4);
    stringBuffer.append(variableProperties.get("sampleLabel"));
    stringBuffer.append(TEXT_5);
    stringBuffer.append(variableProperties.get("extraProperty"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(variableProperties.get("radioProperty"));
    stringBuffer.append(TEXT_7);
    /* Make Sample Name the one that is selected by user in Create Sample Wizard */ 
    stringBuffer.append(TEXT_8);
    stringBuffer.append(variableProperties.get("sampleName"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(variableProperties.get("sampleName"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    return stringBuffer.toString();
  }
}
