import xpdl2;
import xpdExtension;

extension org::openarchitectureware::util::stdlib::cloning;
extension com::tibco::xpd::process::om::template::Extensions reexport;
	
String getFileName(DocumentRoot  dR) :
	""+ dR.package.name + ".xpdl";
	
// create a PackageType for every Process
List[DocumentRoot] transform(DocumentRoot d) :
	let modelCollection = {} :
	let package = d.package :
	modelCollection.addAll(getPackages(package)) ->
	(
		let docList = addPackagesToDocRoot(modelCollection) :
		docList
	) ;

addPackagesToDocRoot(Collection modelCollection) :
	let docList = {} :
	docList.addAll(modelCollection.typeSelect(Package).collect(e| createDocRoot(e))) ->
	docList;
	
create DocumentRoot createDocRoot(Package pkg) :
	this.setPackage(pkg);
	
	
List[Package] getPackages(Package package) :
//For each package, look through the all the processes, and for each process, call createPackage, and "collect" returns it into a collection.
	let packages = {} :	
	packages.addAll(package.eAllContents.typeSelect(Process).collect(e | createPackage(package, e))) ->
	packages;
	
Package createPackage(Package package, Process process) : 
	let r = new Package :
	let tempList = {process} :
	setName(r, process.name) ->	 
	r.setPackageHeader((PackageHeader)clone((Object)package.packageHeader)) ->	
	r.setPools(createPools(package, process)) ->
	r.setArtifacts(getArtifactsForProcess(package, process)) ->
	r.setAssociations(getAssocForProc(package, process)) ->
	r.setMessageFlows(getMessageFlows(package, process)) ->	
	r.setConformanceClass((ConformanceClass)clone((Object)package.conformanceClass)) ->
	r.setExtendedAttributes((List[ExtendedAttribute])clone((Object)package.extendedAttributes)) ->
	r.setExternalPackages((List[ExternalPackage])clone((Object)package.externalPackages)) ->
	r.setDataFields((List[DataField])clone((Object)package.dataFields)) ->
	r.setProcesses(tempList) ->
	r;
	
List[Artifact] getArtifactsForProcess(Package package, Process process) :
    let arSet = package.eAllContents.typeSelect(Artifact).collect(e| doesArtifactBelongToProcess(package, process, e)).select(e | e != null) :
    arSet;
    
Artifact doesArtifactBelongToProcess(Package package, Process process, Artifact artifact) :
	let nodeGraphicsInfo = artifact.eAllContents.typeSelect(NodeGraphicsInfo).select(e | e.toolId == "XPD.Fragment_ParentProcess_GraphicInfo").first() :
	nodeGraphicsInfo.laneId == process.id ? 
		(
			checkForLanes(package, process,artifact) ->
			artifact
		) : null;	
		
List[Association] getAssocForProc(Package package, Process process) :
    let associationsList = {} :
    associationsList.addAll(package.eAllContents.typeSelect(Association).collect(e | doesAssociationBelongToProcess(package, process, e)).select( f | f != null)) ->
    associationsList;
    
Association doesAssociationBelongToProcess(Package package, Process process, Association assoc) :
    let objId = assoc.source :
    let assocTypeSrc = checkAssoc(package, process, assoc, objId) :
    assocTypeSrc != null ? assocTypeSrc :
        (
            let tgtId = assoc.target :
            let assocTypeTgt = checkAssoc(package, process, assoc, tgtId) :
            assocTypeTgt
        );
        
Association checkAssoc(Package package, Process process, Association assoc, String objId) :
    let proc = package.eAllContents.typeSelect(Process).select(e|e.id == objId).first() :
    let activity = package.eAllContents.typeSelect(Activity).select(e|e.id == objId).first() :
    let artifact = package.eAllContents.typeSelect(Artifact).select(e|e.id == objId).first() :
    let lane = package.eAllContents.typeSelect(Lane).select(e|e.id == objId).first() :
    let pool = package.eAllContents.typeSelect(Pool).select(e|e.id == objId).first() :
    let trans = package.eAllContents.typeSelect(Transition).select(e|e.id == objId).first() :
    (
        proc != null ? (proc.id == process.id ? assoc : null ): 
        (
            activity != null ?	(getProcFromActivity(package, process, activity).id == process.id ? assoc : null ):
            (
                lane!= null ? (getProcFromLane(package, lane).id == process.id ? assoc : null) :
                (
                    pool != null? (getProcFromPool(package, pool).id == process.id ? assoc : null) :
                    (
                        artifact != null ? (getProcFromArtifact(package, process, artifact).id == process.id ? assoc : null) :
                        ( 
                        	trans != null ? (getProcFromTransition(package, process, trans).id == process.id ? assoc : null) : null
                         )
                    )
                )   
            )
        )
    );
    
Process getProcFromActivity(Package package, Process process, Activity activity) :
    let procId = activity.eContainer.id :
    let proc = package.eAllContents.typeSelect(Process).select(e| e.id == procId).first() :
    proc != null ? proc : 
        (
            let procId1 = activity.eContainer.eContainer.eContainer.id :
            let proc1 = package.eAllContents.typeSelect(Process).select(e| e.id == procId1).first() :
            proc1
        );
        
Process getProcFromTransition(Package package, Process process, Transition trans) :
    let procId = trans.eContainer.id :
    let proc = package.eAllContents.typeSelect(Process).select(e| e.id == procId).first() :
    proc != null ? proc : 
        (
            let procId1 = trans.eContainer.eContainer.id :
            let proc1 = package.eAllContents.typeSelect(Process).select(e | e.id == procId1).first() :
            proc1
        );

        
Process getProcFromArtifact(Package package, Process process, Artifact artifact) :
    let ngi = artifact.eAllContents.typeSelect(NodeGraphicsInfo).select(e| e != null).first() :
    let laneId = ngi.laneId :
    let actSetId = process.eAllContents.typeSelect(ActivitySet).select(e | e.id == laneId).first() :
    actSetId != null ? process : 
        (
            let lane = package.eAllContents.typeSelect(Lane).select(e | e.id == laneId).first() :
            lane != null ? getProcFromLane(package, lane) : null
        ); 

Process getProcFromLane(Package package, Lane lane) :
    let pool = lane.eContainer :
    getProcFromPool(package, pool);

Process getProcFromPool(Package package, Pool pool) :
    let procId = pool.processId :
    package.eAllContents.typeSelect(Process).select(e | e.id == procId);

checkForLanes(Package package, Process process, Artifact artifact) :
	let nodeGraphicsInfo = artifact.eAllContents.typeSelect(NodeGraphicsInfo).select(e | e.toolId != "XPD.Fragment_ParentProcess_GraphicInfo").first() :
	let nodeGraphicsInfoToBeRemoved = artifact.eAllContents.typeSelect(NodeGraphicsInfo).select(e | e.toolId == "XPD.Fragment_ParentProcess_GraphicInfo").first() :
	let laneIdToVerify = nodeGraphicsInfo.laneId :
	let lane = package.eAllContents.typeSelect(Lane).select(e | e.id == laneIdToVerify).first() :
	
	//delete the nodeGraphicsInfo with XPD.FragmentParentProcess_GraphicInfo
	artifact.eAllContents.remove(nodeGraphicsInfoToBeRemoved) ->
	(lane != null) ?
		(
			//do nothing
			traceMe("Lane##" + lane)
		):
		(
			//1. change the laneId to a lane that is relevant to the process
			//2. delete the nodeGraphicsInfo with XPD.FragmentParentProcess_GraphicInfo
			let aSet = process.eAllContents.typeSelect(ActivitySet).select(e | e.id == laneIdToVerify).first() :
			aSet != null ? 
				(
					traceMe("ActivitySet##" + aSet.id)
				) : (
						let pool = package.eAllContents.typeSelect(Pool).select(e | e.process == process.id).first() :
						let lane = pool.eAllContents.typeSelect(Lane).select(e | e != null).first() :
						lane.id != null ? setNodeGraphicsInfoLaneId(nodeGraphicsInfo, lane.id) : setNodeGraphicsInfoLaneId(nodeGraphicsInfo, "_Fragment_Dummy_Lane_")   
					) 
		);
	
List[Pool] createPools(Package pkg, Process proc) :
    let poolList = pkg.eAllContents.typeSelect(Pool).select( e | e.processId == proc.id) :
    ((poolList.size > 0) ? poolList : createPool(pkg, proc));
    
List[Pool] createPool(Package pkg, Process process) :
	let pools = {} :	
    let pool = createPoolInstances(pkg, process) :
    pools.add(pool) ->
	setPoolId(pool, "_Fragment_Dummy_Pool_") ->
    resetLaneIds(process) ->
    pools;

resetLaneIds(Process process):	
    process.eAllContents.typeSelect(Activity).select(e | resetLaneId(e));
    
resetLaneId(Activity a) :
    a.eAllContents.typeSelect(NodeGraphicsInfo).collect(e| setDummyLaneId(e));
    
setDummyLaneId(NodeGraphicsInfo n) :
	setNodeGraphicsInfoLaneId(n, "_Fragment_Dummy_Lane_");
    
create Pool createPoolInstances(Package pkg, Process process) :
    let lanes = {} :
    let lane = new Lane :
    let nodeGraphInfos = {} :
    let nGInfo = new NodeGraphicsInfo :
    let graphicalNodes = {} :
    nodeGraphInfos.add(nGInfo) ->
    setName(lane, "Lane") ->
    setLaneId(lane, "_Fragment_Dummy_Lane_") ->
    lane.setNodeGraphicsInfos(nodeGraphInfos) ->
    graphicalNodes.addAll(getArtifactsForProcess(pkg, process)) ->
    graphicalNodes.addAll(process.eAllContents.typeSelect(Activity)) ->
    setLaneHeight(graphicalNodes, lane) ->
    lanes.add(lane) ->
    setName(this, "Pool") ->
    this.setLanes(lanes) ->
	setProcessId(this, process.id) ;
    
List[MessageFlow] getMessageFlows(Package package, Process process) :
    let messageFlowList = {} :
    messageFlowList.addAll(package.eAllContents.typeSelect(MessageFlow).collect(e | doesMessageFlowBelongToProc(package, process, e)).select(f | f != null)) ->
    messageFlowList;
    
MessageFlow doesMessageFlowBelongToProc(Package package, Process process, MessageFlow msgFlow) :
    let objId = msgFlow.source :
    let msgFlowSrc = checkMsgFlow(package, process, msgFlow, objId) :
    msgFlowSrc != null ? msgFlowSrc :
        (
            let tgtId = msgFlow.target :
            let msgFlowTgt = checkMsgFlow(package, process, msgFlow, tgtId) :
            msgFlowTgt
            
        );
    
MessageFlow checkMsgFlow(Package package, Process process, MessageFlow msgFlow, String objId) :
    let activity = package.eAllContents.typeSelect(Activity).select(e|e.id == objId).first() :
    (
        objId != null ? (getProcFromActivity(package, process, activity).id == process.id ? msgFlowType : null) :
            (
                let pool = package.eAllContents.typeSelect(Pool).select(e|e.id == objId).first() :
                pool != null ? (getProcFromPool(package, pool).id == process.id ? msgFlowType : null) : null
            )
    );
