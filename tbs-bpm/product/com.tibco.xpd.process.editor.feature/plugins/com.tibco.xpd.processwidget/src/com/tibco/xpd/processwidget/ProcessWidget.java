package com.tibco.xpd.processwidget;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.Preferences;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.gef.GraphicalViewer;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.ui.IWorkbenchSite;

import com.tibco.xpd.analyst.resources.xpdl2.processeditorconfiguration.ActivityIconProviderDescriptor;
import com.tibco.xpd.analyst.resources.xpdl2.processeditorconfiguration.ProcessEditorObjectType;
import com.tibco.xpd.processwidget.figures.ProcessFigure.DiagramViewType;
import com.tibco.xpd.processwidget.policies.EditPolicyEnablementProvider;
import com.tibco.xpd.processwidget.process.progression.EditPartHighlighter;
import com.tibco.xpd.processwidget.viewer.NavigationListener;

/**
 * Process Editor Widget <br>
 * This graphical editor provide graphical editin capability to EMF model, the
 * model have to provide implementation of ProcessAtapters that map actual model
 * to graphical elements <br>
 * <ol>
 * Usage:
 * <li>create an instance (TODO)
 * <li>configure with EditingDomain {@see #setEditingDomain}
 * <li>configure with AdapterFactory for ProcessAdapters {@see
 * #setAdapterFactory}
 * <li><i>(optional)</i> configure wit Site {@see #setSite}
 * <li>create control {@see #createControl}
 * </ol>
 * 
 * @author wzurek
 */
public interface ProcessWidget extends ISelectionProvider, IAdaptable {

    /**
     * Instead of attempting to abstract many many things in the process widget
     * for the differences between BPMN Process editing and Task Library
     * editing, the knowledge of the different types will be built into the
     * process widget and it can then be switched to behave in different ways.
     * 
     * @author aallway
     * @since 3.2
     */
    public enum ProcessWidgetType {
        BPMN_PROCESS, TASK_LIBRARY, PAGEFLOW_PROCESS, BUSINESS_SERVICE, CASE_SERVICE, DECISION_FLOW, SERVICE_PROCESS;
    }

    public class ObjectPositionInfo {
        public String objId;

        public String objName;

        public Rectangle bounds;
    }

    /**
     * @return The process widget type
     */
    ProcessWidgetType getProcessWidgetType();

    /**
     * Diagram view tye
     */
    DiagramViewType getDiagramViewType();

    /**
     * Set editing domain to use in the widget
     * 
     * @param editingDomain
     */
    void setEditingDomain(EditingDomain editingDomain);

    /**
     * Set preference store
     * 
     * @param preferences
     */
    void setPreferences(Preferences preferences);

    /**
     * Set adapter factory that can produce adapters expected by the widget.
     * (@see ProcessWidgetConstants#ADAPTER_TYPE)<br>
     * Note: the adapter factory, and expected adapters are different then
     * ItemProviders generated by EMF
     * 
     * @param adapterFactory
     */
    void setAdapterFactory(AdapterFactory adapterFactory);

    /**
     * Returns root control of the widget. Null if widget has not been created
     * 
     * @return root control of the widget
     */
    Control getControl();

    /**
     * Set site for widget. Widget will register actions there.
     * 
     * @param site
     */
    void setSite(IWorkbenchSite site);

    /**
     * Get site for widget.
     * 
     * @return site
     */
    IWorkbenchSite getSite();

    /**
     * Create Image of process displayed in the Widget, the method has to be
     * invoked from UI thread. The client is responsible for disposing the
     * image.
     * 
     * @return Image of the process
     */
    Image createProcessImage();

    Image createProcessImageEx() throws HadToShrinkImageException;

    /**
     * Create and return a list of object Id's and their absolute diagram
     * rectangles.
     * 
     * @return list of object position info.
     */
    Collection<ObjectPositionInfo> getObjectPositionInfo();

    /**
     * Create all controls and viewers. This method require that adapter factory
     * and editing domain is alredy provided.
     * 
     * @param parent
     */
    void createControl(Composite parent);

    /**
     * Set input for the viewer - the root model element
     * 
     * @param input
     */
    void setInput(EObject input);

    /**
     * Direct access to graphical viewer
     * 
     * @return
     */
    GraphicalViewer getGraphicalViewer();

    /**
     * Add new navigation listener
     * 
     * @param navigationListener
     */
    void addNavigationListener(NavigationListener navigationListener);

    /**
     * Remove navigation listener
     * 
     * @param navigationListener
     */
    void removeNavigationListener(NavigationListener navigationListener);

    /**
     * Navigate to this object, it ask registered navigation listeners or locate
     * the object on the diagram
     * 
     * @param object
     *            that should be revealed
     */
    void navigateTo(Object object);

    /**
     * Show printer pages margins on the layer on top of the diagram. Set null
     * to hide this layer
     * 
     * @param screenPageSize
     *            Size in (unzoomed)screen pixels of 1 (unzoomed) print page
     * @param fitType
     *            One of {@link ProcessWidgetContants}.PRINT_FIT_ values.
     * @param printZoom
     *            Print zoom level (i.e. the zoom from the setup dialog.
     */
    void updatePrintMargins(Dimension screenPageSize, int fitType,
            double printZoom);

    /**
     * Show the print margin (pagination display.
     */
    void showPrintMargins();

    /**
     * Hide the on screen pagination print margins.
     * 
     */
    void hidePrintMargins();

    /**
     * @see #showPrintMargins(Dimension)
     * @return true if diagam is showing pages margins
     */
    boolean isShowingPrintMargins();

    /**
     * Return action with given ID, returns null when not found.
     * 
     * @param id
     * @return
     */
    IAction getAction(String id);

    /**
     * Return Widget's Input
     * 
     * @see #setInput(EObject)
     */
    EObject getInput();

    /**
     * For editor to call and set the editPolicyEnablkementProvider
     * 
     * @param editPolicyEnablementProvider
     */
    void setEditPolicyEnablementProvider(
            EditPolicyEnablementProvider editPolicyEnablementProvider);

    /**
     * Get the edit policy enablement provider that editor has set on the
     * widget.
     * 
     * @return
     */
    EditPolicyEnablementProvider getEditPolicyEnablementProvider();

    /** XPD-1140: Allow tag process editor figure as readonly. */
    boolean isReadOnly();

    public abstract EditPartHighlighter getReferenceHighlighter();

    public abstract void setReferenceHighlighter(
            EditPartHighlighter referenceHighlighter);

    /**
     * @return The list of excluded object types currently contributed to
     *         processEditorCOnfiguration extension point for this process.
     */
    public Set<ProcessEditorObjectType> getExcludedObjectTypes();

    /**
     * @return The list of ActivityIconProviders currently contributed to
     *         processEditorCOnfiguration extension point for this process.
     */
    public List<ActivityIconProviderDescriptor> getActivityIconProviders();
}