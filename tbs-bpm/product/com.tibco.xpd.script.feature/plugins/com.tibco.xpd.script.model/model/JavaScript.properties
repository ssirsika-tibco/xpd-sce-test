#Math class
_label_JavaScript__Math=JavaScript Math Object\n\nMath Object:\n\nThe class Math contains methods for performing \nbasic numeric operations.\n\nMath is not a constructor.\n\nAll properties/methods of Math can be called by using \nMath as an object, without creating it.\n\nSyntax:\n\nvar x = Math.PI; // Returns PI\nvar y = Math.sqrt(16); // Returns the square root of 16
_label_JavaScript__Math__PI=JavaScript PI Property\n\nDefinition and Usage:\n\nThe PI property returns the ratio of a circle's area\n to the square of its radius, approximately 3.14159.\n\nSyntax:\n\nMath.PI\n@return Float
_label_JavaScript__Math__E=JavaScript E Property\n\nDefinition and Usage:\n\nThe E property returns the Euler's number and \nthe base of natural logarithms, approximately 2.718.\n\nSyntax:\n\nMath.E\n@return Float
_label_JavaScript__Math__LN2 =JavaScript LN2 Property\n\nDefinition and Usage:\n\nThe LN2 property returns the natural logarithm of 2,\n approximately 0.693.\n\nSyntax:\n\nMath.LN2\n@return Float
_label_JavaScript__Math__LN10 =JavaScript LN10 Property\n\nDefinition and Usage:\n\nThe LN10 property returns the natural logarithm of 10,\n approximately 2.302.\n\nSyntax:\n\nMath.LN10\n@return Float
_label_JavaScript__Math__abs =JavaScript abs() Method\n\nDefinition and Usage:\n\nThe abs() method returns the absolute value \nof a number.\n\nSyntax:\n\nMath.abs(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__asin =JavaScript asin() Method\n\nDefinition and Usage:\n\nThe asin() method returns the arcsine of a number \nas a numeric value between -PI/2 and PI/2 radians.\n\nSyntax:\n\nMath.asin(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__max =JavaScript max() Method\n\nDefinition and Usage:\n\nThe max() method returns the number with the\n highest value.\n\nSyntax:\n\nMath.max(x,y,z,...,n)\n@return Float\n@param x,y,z,...,n: Required. Two or more numbers
_label_JavaScript__Math__acos =JavaScript acos() Method\n\nDefinition and Usage:\n\nThe acos() method returns the arccosine of a \nnumber as a numeric value value between 0 and \nPI radians.\n\nSyntax:\n\nMath.acos(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__atan =JavaScript atan() Method\n\nDefinition and Usage:\n\nThe atan() method returns the arctangent of a \nnumber as a numeric value between -PI/2 and PI/2\n radians.\n\nSyntax:\n\nMath.atan(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__ceil =JavaScript ceil() Method\n\nDefinition and Usage:\n\nThe ceil() method rounds a number UPWARDS to the\n nearest integer, and returns the result.\n\nSyntax:\n\nMath.ceil(number)\n@return Integer\n@param number: Required. A number
_label_JavaScript__Math__cos =JavaScript cos() Method\n\nDefinition and Usage:\n\nThe cos() method returns the cosine of a number.\n\nSyntax:\n\nMath.cos(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__exp =JavaScript exp() Method\n\nDefinition and Usage:\n\nThe exp() method returns the value of E^x, where\n E is Euler's number (approximately 2.7183)\n and x is the number passed to it.\n\nSyntax:\n\nMath.exp(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__floor =JavaScript floor() Method\n\nDefinition and Usage:\n\nThe floor() method rounds a number DOWNWARDS to \nthe nearest integer, and returns the result.\n\nSyntax:\n\nMath.floor(number)\n@return Integer\n@param number: Required. A number
_label_JavaScript__Math__log =JavaScript log() Method\n\nDefinition and Usage:\n\nThe log() method returns the natural logarithm \n(base E) of a number.\n\nSyntax:\n\nMath.log(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__min =JavaScript min() Method\n\nDefinition and Usage:\n\nThe min() method returns the number with the \nlowest value.\n\nSyntax:\n\nMath.min(x,y,z,...,n)\n@return Float\n@param x,y,z,...,n: Required. Two or more numbers
_label_JavaScript__Math__pow =JavaScript pow() Method\n\nDefinition and Usage:\n\nThe pow() method returns the value of x to the \npower of y.\n\nSyntax:\n\nMath.pow(x,y)\n@return Float\n@param x: Required. The base\n@param y: Required. The exponent
_label_JavaScript__Math__random =JavaScript random() Method\n\nDefinition and Usage:\n\nThe random() method returns a random number \nbetween 0 and 1.\n\nSyntax:\n\nMath.random()\n@return Float\n
_label_JavaScript__Math__round =JavaScript round() Method\n\nDefinition and Usage:\n\nThe round() method rounds a number to the nearest integer.\n\nSyntax:\n\nMath.round(number)\n@return Integer\n@param number: Required. A number
_label_JavaScript__Math__sin =JavaScript sin() Method\n\nDefinition and Usage:\n\nThe sin() method returns the sine of a number.\nNote: This method returns a numeric value \nbetween -1 and 1, which represents the \nsine of the parameter x.\n\nSyntax:\n\nMath.sin(number)\n@return Float\n@param number: Required. A number
_label_JavaScript__Math__tan =JavaScript tan() Method\n\nDefinition and Usage:\n\nThe tan() method returns a number that represents\n the tangent of an angle.\n\nSyntax:\n\nMath.tan(number)\n@return Float\n@param number: Required. A number representing \nan angle (in radians)
_label_JavaScript__Math__sqrt =JavaScript sqrt() Method\n\nDefinition and Usage:\n\nThe sqrt() method returns the square root \nof a number.\n\nSyntax:\n\nMath.sqrt(number)\n@return Float\n@param number: Required. A number. If x is a \nnegative number, NaN is returned

#Date class
_label_JavaScript__Date=JavaScript Date Object\n\nDate Object:\n\nThe Date object is used to work with \ndates and times.
_label_JavaScript__Date__now =JavaScript now() Method\n\nDefinition and Usage:\n\nThe now() method returns the current date.\n\nSyntax:\n\ndateObj.now()\n@return Date
_label_JavaScript__Date__getDate =JavaScript getDate() Method\n\nDefinition and Usage:\n\nThe getDate() method returns the day of the month\n (from 1 to 31) for the specified date, \naccording to local time.\n\nSyntax:\n\ndateObj.getDate()\n@return Date
_label_JavaScript__Date__getDay =JavaScript getDay() Method\n\nDefinition and Usage:\n\nThe getDay() method returns the day of the week \n(from 0 to 6) for the specified date, according to local time.\nNote: Sunday is 0, Monday is 1, and so on.\n\nSyntax:\n\ndateObj.getDay()\n@return String
_label_JavaScript__Date__getFullYear =JavaScript getFullYear() Method\n\nDefinition and Usage:\n\nThe getFullYear() method returns the year\n (four digits) of the specified date, according\n to local time.\n\nSyntax:\n\ndateObj.getFullYear()\n@return Integer
_label_JavaScript__Date__getHours =JavaScript getHours() Method\n\nDefinition and Usage:\n\nThe getHours() method returns the hour\n (from 0 to 23) of the specified date and time,\n according to local time.\n\nSyntax:\n\ndateObj.getHours()\n@return Integer
_label_JavaScript__Date__getMilliseconds =JavaScript getMilliseconds() Method\n\nDefinition and Usage:\n\nThe getMilliseconds() method returns the\n milliseconds (from 0 to 999) of the specified\n date and time, according to local time.\n\nSyntax:\n\ndateObj.getMilliseconds()\n@return Integer
_label_JavaScript__Date__getMinutes =JavaScript getMinutes() Method\n\nDefinition and Usage:\n\nThe getMinutes() method returns the minutes\n (from 0 to 59) of the specified date and time,\n according to local time.\n\nSyntax:\n\ndateObj.getMinutes()\n@return Integer
_label_JavaScript__Date__getMonth =JavaScript getMonth() Method\n\nDefinition and Usage:\n\nThe getMonth() method returns the month\n (from 0 to 11) for the specified date,\n according to local time.\nNote: January is 0, February is 1, and so on.\n\nSyntax:\n\ndateObj.getMonth()\n@return Integer
_label_JavaScript__Date__getSeconds =JavaScript getSeconds() Method\n\nDefinition and Usage:\n\nThe getSeconds() method returns the seconds\n (from 0 to 59) of the specified date and time,\n according to local time.\n\nSyntax:\n\ndateObj.getSeconds()\n@return Integer
_label_JavaScript__Date__getTime =JavaScript getTime() Method\n\nDefinition and Usage:\n\nThe getTime() method returns the number of\n milliseconds since midnight of January 1,\n 1970 and the specified date.\n\nSyntax:\n\ndateObj.getTime()\n@return Integer
_label_JavaScript__Date__getTimezoneOffset =JavaScript getTimezoneOffset() Method\n\nDefinition and Usage:\n\nThe getTimezoneOffset() method returns the time\n difference between Greenwich Mean Time (GMT)\n and local time, in minutes.For example,\n If your time zone is GMT+2, -120 will be returned.\n\nSyntax:\n\ndateObj.getTimezoneOffset()\n@return Integer
_label_JavaScript__Date__setFullYear =JavaScript setFullYear() Method\n\nDefinition and Usage:\n\nThe setFullYear() method sets the year\n (four digits), according to local time.\n\nSyntax:\n\ndateObj.setFullYear(year)\n@param year: Required. A four-digit value\n representing the year
_label_JavaScript__Date__setMonth =JavaScript setMonth() Method\n\nDefinition and Usage:\n\nThe setMonth() method sets the month\n (from 0 to 11), according to local time.\n\nSyntax:\n\ndateObj.setMonth(month,day)\n@param month: Required. An integer between\n 0 and 11 representing the month
_label_JavaScript__Date__setDate =JavaScript setDate() Method\n\nDefinition and Usage:\n\nThe setDate() method sets the day of the month\n (from 1 to 31), according to local time.\n\nSyntax:\n\ndateObj.setDate(day)\n@param day: Required. An integer between\n 1 and 31 representing the day of a month
_label_JavaScript__Date__setHours =JavaScript setHours() Method\n\nDefinition and Usage:\n\nThe setHours() method sets the hour\n (from 0 to 23), according to local time.\n\nSyntax:\n\ndateObj.setHours(hour)\n@param hour: Required. An integer between\n 0 and 23 representing the hour
_label_JavaScript__Date__setMinutes =JavaScript setMinutes() Method\n\nDefinition and Usage:\n\nThe setMinutes() method sets the minutes\n (from 0 to 59), according to local time.\n\nSyntax:\n\ndateObj.setMinutes(min)\n@param min: Required. An integer between\n 0 and 59 representing the minutes
_label_JavaScript__Date__setSeconds =JavaScript setSeconds() Method\n\nDefinition and Usage:\n\nThe setSeconds() method sets the seconds\n (from 0 to 59), according to local time.\n\nSyntax:\n\ndateObj.setSeconds(sec)\n@param min: Required. An integer between\n 0 and 59 representing the seconds
_label_JavaScript__Date__setMilliseconds =JavaScript setMilliseconds() Method\n\nDefinition and Usage:\n\nThe setMilliseconds() method sets the milliseconds\n (from 0 to 999), according to local time.\n\nSyntax:\n\ndateObj.setMilliseconds(millisec)\n@param millisec: Required. An integer between\n 0 and 999 representing the milliseconds
_label_JavaScript__Date__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method converts a Date object\n to a string.\n\nSyntax:\n\ndateObj.toString()\n@return String

#String class
_label_JavaScript__String =JavaScript String Object\n\nString Object:\n\nThe String object is used to manipulate a stored\n piece of text..
_label_JavaScript__String__length =JavaScript length Property\n\nDefinition and Usage:\n\nThe length property returns the length of a\n string (in characters).\n\nSyntax:\n\nstringObj.length\n@return Integer
_label_JavaScript__String__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method converts a String object\n to a string.\n\nSyntax:\n\nstringObj.toString()\n@return String
_label_JavaScript__String__charAt =JavaScript charAt() Method\n\nDefinition and Usage:\n\nThe charAt() method returns the character at the\n specified index in a string.\n\nSyntax:\n\nstringObj.charAt(index)\n@return String\n@param index: Required. An integer between 0\n and string.length-1
_label_JavaScript__String__charCodeAt =JavaScript charCodeAt() Method\n\nDefinition and Usage:\n\nThe charCodeAt() method returns the Unicode of\n the character at the specified index in a string.\n\nSyntax:\n\nstringObj.charCodeAt(index)\n@return Integer\n@param index: Required. An integer between 0\n and string.length-1
_label_JavaScript__String__concat =JavaScript concat() Method\n\nDefinition and Usage:\n\nThe concat() method is used to join two or\n more strings.\n\nSyntax:\n\nstringObj.concat(string2, string3, ..., stringX)\n@return String\n@param string2, string3, ..., stringX:\n Required. Two or more strings
_label_JavaScript__String__indexOf =JavaScript indexOf() Method\n\nDefinition and Usage:\n\nThe indexOf() method returns the position of the\n first occurrence of a specified value in a string.\n\nSyntax:\n\nstringObj.indexOf(searchstring, start)\n@return Integer\n@param searchstring: Required. The string to\n search for\n@param start: Optional.\nThe start position in the string to start the search.\nIf omitted, the search starts from position 0
_label_JavaScript__String__lastIndexOf =JavaScript lastIndexOf() Method\n\nDefinition and Usage:\n\nThe lastIndexOf() method returns the position of\n the last found occurrence of a specified value\n in a string.\n\nSyntax:\n\nstringObj.lastIndexOf(searchstring, start)\n@return Integer\n@param searchstring: Required. The string to\n search for\n@param start: Optional.\nThe start position in the string to start the search.\nIf omitted, the search starts from position 0
_label_JavaScript__String__replace =JavaScript replace() Method\n\nDefinition and Usage:\n\nThe replace() method searches for a match between\n a substring and a string,\n and replaces the matched substring with a new\n substring.\n\nSyntax:\n\nstringObj.replace(substr,newstring)\n@return String[]\n@param substr: Required. A substring.\n@param newstring: Required. The string to replace\n the found value in parameter 1
_label_JavaScript__String__slice =JavaScript slice() Method\n\nDefinition and Usage:\n\nThe slice() method extracts a part of a string\n and returns the extracted part in a new string. \n\nSyntax:\n\nstringObj.slice(begin,end)\n@return String\n@param begin: Required. The index where to begin\n the extraction. First character is at index 0\n@param end: Optional. Where to end the extraction.
_label_JavaScript__String__substr =JavaScript substr() Method\n\nDefinition and Usage:\n\nThe substr() method extracts the characters from\n a string, beginning at "start" and through the\n specified number of character, and returns\n the new sub string.\n\nSyntax:\n\nstringObj.substr(start,length)\n@return String\n@param start: Required. The index where to start\n the extraction. First character is at index 0\n@param length: Optional. The number of characters\n to extract. If omitted, it extracts the rest of\n the string
_label_JavaScript__String__substring =JavaScript substring() Method\n\nDefinition and Usage:\n\nThe substring() method extracts the characters\n from a string, between two specified indices,\n and returns the new sub string.\n\nSyntax:\n\nstringObj.substring(from, to)\n@return String\n@param from: Required. The index where to start the\n extraction.\nFirst character is at index 0\n@param to: Optional. The index where to stop\n the extraction. If omitted, it extracts the rest of\n the string
_label_JavaScript__String__toLowerCase =JavaScript toLowerCase() Method\n\nDefinition and Usage:\n\nThe toLowerCase() method converts a string to\n lowercase letters.\n\nSyntax:\n\nstringObj.toLowerCase()\n@return String
_label_JavaScript__String__toUpperCase =JavaScript toUpperCase() Method\n\nDefinition and Usage:\n\nThe toUpperCase() method converts a string to\n uppercase letters.\n\nSyntax:\n\nstringObj.toUpperCase()\n@return String

#RegExp class
_label_JavaScript__RegExp =JavaScript RegExp Object\n\RegExp Object:\n\nA regular expression is an object that describes\n a pattern of characters.\nRegular expressions are used to perform\n pattern-matching and "search-and-replace"\n functions on text.\n\nSyntax:\n\nvar txt=new RegExp(pattern,modifiers);\nor more simply:\nvar txt=/pattern/modifiers;
_label_JavaScript__RegExp__lastIndex =JavaScript lastIndex Property\n\nDefinition and Usage:\n\nThe lastIndex property specifies the index \nat which to start the next match.\n\nSyntax:\n\nregexpObj.lastIndex\n@return Float
_label_JavaScript__RegExp__exec =JavaScript exec() Method\n\nDefinition and Usage:\n\nThe exec() method tests for a match in a string.\n\nSyntax:\n\nregexpObj.exec(string)\n@return Object[]\n@param string: Required. The string to be searched
_label_JavaScript__RegExp__test =JavaScript test() Method\n\nDefinition and Usage:\n\nThe test() method tests for a match in a string.\nThis method returns true if it finds a match,\n otherwise it returns false.\n\nSyntax:\n\nregexpObj.test(string)\n@return Boolean\n@param string: Required. The string to be searched
_label_JavaScript__RegExp__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method converts a Regexp object\n to a string.\n\nSyntax:\n\nregexpObj.toString()\n@return String

#Array class
_label_JavaScript__Array =JavaScript Array Object\n\Array Object:\n\nThe Array object is used to store multiple values\n in a single variable.\n\nSyntax:\n\nvar arr=new Array();
_label_JavaScript__Array__index =JavaScript index Property\n\nDefinition and Usage:\n\nThe index property specifies the index \nof the Array.\n\nSyntax:\n\narray.index\n@return Integer
_label_JavaScript__Array__length =JavaScript length Property\n\nDefinition and Usage:\n\nThe length property sets or returns the number\n of elements in an array.\n\nSyntax:\n\narray.length\n@return Integer
_label_JavaScript__Array__pop =JavaScript pop() Method\n\nDefinition and Usage:\n\nThe pop() method removes the last element\n of an array, and returns that element.\n\nSyntax:\n\narray.pop()\n@return Object
_label_JavaScript__Array__push =JavaScript push() Method\n\nDefinition and Usage:\n\nThe push() method adds new elements to the end\n of an array, and returns the new length.\n\nSyntax:\n\narray.push(element1, element2, ..., elementX)\n@return Object\n@param element1, element2, ..., elementX: \nRequired. The element(s) to add to the end\n of the array
_label_JavaScript__Array__reverse =JavaScript reverse() Method\n\nDefinition and Usage:\n\nThe reverse() method reverses the order of the\n elements in an array (makes the last element \nfirst, and the first element last).\n\nSyntax:\n\narray.reverse()
_label_JavaScript__Array__shift =JavaScript shift() Method\n\nDefinition and Usage:\n\nThe shift() method removes the first element\n of an array, and returns that element.\n\nSyntax:\n\narray.shift()\n@return Object
_label_JavaScript__Array__sort =JavaScript sort() Method\n\nDefinition and Usage:\n\nThe sort() method sorts the elements of an array.\n\nSyntax:\n\narray.sort(sortfunc)
_label_JavaScript__Array__unshift =JavaScript unshift() Method\n\nDefinition and Usage:\n\nThe unshift() method adds new elements to the\n beginning of an array, and returns the new\n length.\n\nSyntax:\n\narray.unshift(element1,element2, ..., elementX)\n@return Integer\n@param element1, element2, ..., elementX: \nRequired. The element(s) to add to the beginning\n of the array
_label_JavaScript__Array__concat =JavaScript concat() Method\n\nDefinition and Usage:\n\nThe concat() method is used to join two or\n more arrays.\n\nSyntax:\n\narray.concat(array2, array3, ..., arrayX)\n@return String\n@param array2, array3, ..., arrayX:\n Required. The arrays to be joined
_label_JavaScript__Array__join =JavaScript join() Method\n\nDefinition and Usage:\n\nThe join() method joins all elements of \nan array into a string, and returns the string.\n\nSyntax:\n\narray.join(separator)\n@return String\n@param separator: Required. The separator to be used
_label_JavaScript__Array__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method converts an Array object\n to a string.\n\nSyntax:\n\narray.toString()\n@return String

#Object class
_label_JavaScript__Object =JavaScript Object Object\n\Array Object:\n\nObject

#Number class
_label_JavaScript__Number =JavaScript Number Object\n\Number Object:\n\nThe Number object is an object wrapper for \nprimitive numeric values.\n\nSyntax:\n\nvar num = new Number(value);
_label_JavaScript__Number__MAX_VALUE =JavaScript MAX_VALUE Property\n\nDefinition and Usage:\n\nThe MAX_VALUE property returns the largest number\n possible in JavaScript.\nThis static property has a value of 1.7976931348623157e+308.\n\nSyntax:\n\nNumber.MAX_VALUE\n@return Float
_label_JavaScript__Number__MIN_VALUE =JavaScript MIN_VALUE Property\n\nDefinition and Usage:\n\nThe MIN_VALUE property returns the smallest number\n possible in JavaScript.\nThis static property has a value of 5e-324.\n\nSyntax:\n\nNumber.MIN_VALUE\n@return Float
_label_JavaScript__Number__NaN =JavaScript NaN Property\n\nDefinition and Usage:\n\nThe NaN property represents "Not-a-Number" value.\nThis property indicates that a value\n is not a legal number.\n\nSyntax:\n\nNumber.NaN\n@return Float
_label_JavaScript__Number__NEGATIVE_INFINITY =JavaScript NEGATIVE_INFINITY Property\n\nDefinition and Usage:\n\nThe NEGATIVE_INFINITY property represents negative\n infinity, returned on overflow.\n\nSyntax:\n\nNumber.NEGATIVE_INFINITY\n@return Float
_label_JavaScript__Number__POSITIVE_INFINITY =JavaScript POSITIVE_INFINITY Property\n\nDefinition and Usage:\n\nThe POSITIVE_INFINITY property represents infinity, returned on overflow.\n\nSyntax:\n\nNumber.POSITIVE_INFINITY\n@return Float
_label_JavaScript__Number__toExponential =JavaScript toExponential() Method\n\nDefinition and Usage:\n\nThe toExponential() method converts a number \ninto an exponential notation.\n\nSyntax:\n\nnumber.toExponential(fractionDigits)\n@return String\n@param fractionDigits: Optional. The Fraction Digits
_label_JavaScript__Number__toFixed =JavaScript toFixed() Method\n\nDefinition and Usage:\n\nThe toFixed() method formats a number to use a\n specified number of trailing decimals.\n\nSyntax:\n\nnumber.toFixed(digits)\n@return String\n@param digits: Optional. The number\n of digits after the decimal point
_label_JavaScript__Number__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method converts a Number object\n to a string.\n\nSyntax:\n\nnumber.toString()\n@return String
_label_JavaScript__Number__valueOf =JavaScript valueOf() Method\n\nDefinition and Usage:\n\nThe valueOf() method returns the primitive value\n of a Number object.\n\nSyntax:\n\nnumber.valueOf()\n@return Float

#Boolean class
_label_JavaScript__Boolean =JavaScript Boolean Object\n\Boolean Object:\n\nThe Boolean object is used to convert a\n non-Boolean value to a Boolean value (true or false).\n\nSyntax:\n\nvar myBoolean=new Boolean();
_label_JavaScript__Boolean__toString =JavaScript toString() Method\n\nDefinition and Usage:\n\nThe toString() method converts a Boolean object\n to a string.\n\nSyntax:\n\nmyBoolean.toString()\n@return String

#Global Methods
_label_JavaScript__GlobalMethods = Global Methods
_label_JavaScript__GlobalMethods__Infinity =JavaScript Infinity Global Property\n\nDefinition and Usage:\n\nInfinity is a numeric value that represents\n positive infinity.\n\nSyntax:\n\nInfinity\n@return Infinity
_label_JavaScript__GlobalMethods__NaN =JavaScript NaN Global Property\n\nDefinition and Usage:\n\nThe NaN property represents "Not-a-Number" value.\nThis property indicates that a value\n is not a legal number.\n\nSyntax:\n\nNumber.NaN\n@return Float
_label_JavaScript__GlobalMethods__decodeURI =JavaScript decodeURI() Global Function\n\nDefinition and Usage:\n\nThe decodeURI() function is used to decode a URI.\n\nSyntax:\n\decodeURI(uri)\n@return String\n@param uri: Required. The URI to be decoded
_label_JavaScript__GlobalMethods__decodeURIComponent =JavaScript decodeURIComponent() Global Function\n\nDefinition and Usage:\n\nThe decodeURIComponent() function decodes a URI component.\n\nSyntax:\n\decodeURIComponent(uri)\n@return String\n@param uri: Required. The URI to be decoded
_label_JavaScript__GlobalMethods__encodeURI =JavaScript encodeURI() Global Function\n\nDefinition and Usage:\n\nThe encodeURI() function is used to encode a URI.\n\nSyntax:\n\encodeURI(uri)\n@return String\n@param uri: Required. The URI to be encoded
_label_JavaScript__GlobalMethods__encodeURIComponent =JavaScript encodeURIComponent() Global Function\n\nDefinition and Usage:\n\nThe encodeURIComponent() function encodes a URI component.\n\nSyntax:\n\encodeURIComponent(uri)\n@return String\n@param uri: Required. The URI to be encoded
_label_JavaScript__GlobalMethods__escape =JavaScript escape() Global Function\n\nDefinition and Usage:\n\nThe escape() function encodes a string.\n\nSyntax:\n\escape(string)\n@return String\n@param string: Required. The string to be encoded
_label_JavaScript__GlobalMethods__eval =JavaScript eval() Global Function\n\nDefinition and Usage:\n\nThe eval() function evaluates and/or executes\n a string of JavaScript code.\n\nSyntax:\n\eval(string)\n@return Object\n@param string: Required. The string\n to be evaluated/executed
_label_JavaScript__GlobalMethods__isFinite =JavaScript isFinite() Global Function\n\nDefinition and Usage:\n\nThe isFinite() function determines whether\n a number is a finite, legal number.\n\nSyntax:\n\isFinite(value)\n@return Boolean\n@param value: Required. The value to be tested
_label_JavaScript__GlobalMethods__isNaN =JavaScript isNaN() Global Function\n\nDefinition and Usage:\n\nThe isNaN() function determines whether a value is\n an illegal number (Not-a-Number).\n\nSyntax:\n\isNaN(value)\n@return Boolean\n@param value: Required. The value to be tested
_label_JavaScript__GlobalMethods__Number =JavaScript Number() Global Function\n\nDefinition and Usage:\n\nThe Number() function converts the object argument\n to a number that represents the object's value.\n\nSyntax:\n\Number(object)\n@return Boolean\n@param object: Required. A JavaScript object
_label_JavaScript__GlobalMethods__parseFloat =JavaScript parseFloat() Global Function\n\nDefinition and Usage:\n\nThe parseFloat() function parses a string and returns\n a floating point number.\n\nSyntax:\n\parseFloat(string)\n@return Float\n@param string: Required. The string to be parsed
_label_JavaScript__GlobalMethods__parseInt =JavaScript parseInt() Global Function\n\nDefinition and Usage:\n\nThe parseInt() function parses a string and returns\n an Integer.\n\nSyntax:\n\parseInt(string, radix)\n@return Integer\n@param string: Required. The string to be parsed\n@param radix: Optional. A number (from 2 to 36)\n that represents the numeral system to be used
_label_JavaScript__GlobalMethods__String =JavaScript String() Global Function\n\nDefinition and Usage:\n\nThe String() function converts the value of an\n object to a string.\n\nSyntax:\n\String(object)\n@return String\n@param object: Required. A JavaScript object
_label_JavaScript__GlobalMethods__unescape =JavaScript unescape() Global Function\n\nDefinition and Usage:\n\nThe unescape() function decodes an encoded string.\n\nSyntax:\n\nunescape(string)\n@return String\n@param string: Required. The string to be decoded
