/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.tibco.simulation.report.provider;

import com.tibco.simulation.report.util.SimRepAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimRepItemProviderAdapterFactory extends SimRepAdapterFactory
        implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static final String copyright = "TIBCO Software Inc."; //$NON-NLS-1$

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     */
    public SimRepItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
        supportedTypes.add(ITableItemLabelProvider.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepActivities} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepActivitiesItemProvider simRepActivitiesItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepActivities}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepActivitiesAdapter() {
        if (simRepActivitiesItemProvider == null) {
            simRepActivitiesItemProvider =
                    new SimRepActivitiesItemProvider(this);
        }

        return simRepActivitiesItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepActivityQueue} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepActivityQueueItemProvider simRepActivityQueueItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepActivityQueue}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepActivityQueueAdapter() {
        if (simRepActivityQueueItemProvider == null) {
            simRepActivityQueueItemProvider =
                    new SimRepActivityQueueItemProvider(this);
        }

        return simRepActivityQueueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepActivity} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepActivityItemProvider simRepActivityItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepActivity}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepActivityAdapter() {
        if (simRepActivityItemProvider == null) {
            simRepActivityItemProvider = new SimRepActivityItemProvider(this);
        }

        return simRepActivityItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepCases} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepCasesItemProvider simRepCasesItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepCases}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepCasesAdapter() {
        if (simRepCasesItemProvider == null) {
            simRepCasesItemProvider = new SimRepCasesItemProvider(this);
        }

        return simRepCasesItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepCost} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepCostItemProvider simRepCostItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepCost}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepCostAdapter() {
        if (simRepCostItemProvider == null) {
            simRepCostItemProvider = new SimRepCostItemProvider(this);
        }

        return simRepCostItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepDistribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepDistributionItemProvider simRepDistributionItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepDistribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepDistributionAdapter() {
        if (simRepDistributionItemProvider == null) {
            simRepDistributionItemProvider =
                    new SimRepDistributionItemProvider(this);
        }

        return simRepDistributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepExperimentData} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepExperimentDataItemProvider simRepExperimentDataItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepExperimentData}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepExperimentDataAdapter() {
        if (simRepExperimentDataItemProvider == null) {
            simRepExperimentDataItemProvider =
                    new SimRepExperimentDataItemProvider(this);
        }

        return simRepExperimentDataItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepExperiment} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepExperimentItemProvider simRepExperimentItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepExperiment}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepExperimentAdapter() {
        if (simRepExperimentItemProvider == null) {
            simRepExperimentItemProvider =
                    new SimRepExperimentItemProvider(this);
        }

        return simRepExperimentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepParticipants} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepParticipantsItemProvider simRepParticipantsItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepParticipants}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepParticipantsAdapter() {
        if (simRepParticipantsItemProvider == null) {
            simRepParticipantsItemProvider =
                    new SimRepParticipantsItemProvider(this);
        }

        return simRepParticipantsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.simulation.report.SimRepParticipant} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimRepParticipantItemProvider simRepParticipantItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.simulation.report.SimRepParticipant}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimRepParticipantAdapter() {
        if (simRepParticipantItemProvider == null) {
            simRepParticipantItemProvider =
                    new SimRepParticipantItemProvider(this);
        }

        return simRepParticipantItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory
                .getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(
            ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>)
                    || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (simRepActivitiesItemProvider != null)
            simRepActivitiesItemProvider.dispose();
        if (simRepActivityQueueItemProvider != null)
            simRepActivityQueueItemProvider.dispose();
        if (simRepActivityItemProvider != null)
            simRepActivityItemProvider.dispose();
        if (simRepCasesItemProvider != null)
            simRepCasesItemProvider.dispose();
        if (simRepCostItemProvider != null)
            simRepCostItemProvider.dispose();
        if (simRepDistributionItemProvider != null)
            simRepDistributionItemProvider.dispose();
        if (documentRootItemProvider != null)
            documentRootItemProvider.dispose();
        if (simRepExperimentDataItemProvider != null)
            simRepExperimentDataItemProvider.dispose();
        if (simRepExperimentItemProvider != null)
            simRepExperimentItemProvider.dispose();
        if (simRepParticipantsItemProvider != null)
            simRepParticipantsItemProvider.dispose();
        if (simRepParticipantItemProvider != null)
            simRepParticipantItemProvider.dispose();
    }

}
