/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.xpd.n2.brm;

import java.io.OutputStream;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubMonitor;
import org.eclipse.emf.ecore.resource.Resource;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.xpd.n2.brm.internal.Messages;
import com.tibco.xpd.n2.resources.util.N2Utils;
import com.tibco.xpd.om.transform.de.XMLModelWriter;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.rasc.core.RascWriter;
import com.tibco.xpd.resources.util.ProjectUtil;

/**
 * The RascContributor implementation to add the exported BRM-Models to the
 * RASC, the work-model and work-type models (wm.xml, wt.xml)
 * 
 * @author aallway
 * @since 12 Apr 2019
 */
public class BrmModelsRascContributor implements RascContributor {
    /**
     * The unique identifier for this RascContribution implementation.
     */
    private static final String ID =
            "com.tibco.xpd.n2.brm.rasc.model.contributor"; //$NON-NLS-1$

    /**
     * The MicroServices to which the artifacts generated by this contributor
     * will be delivered.
     */
    private static final MicroService[] WM_MODEL_DESTINATION_SERVICES =
            { MicroService.WM };

    /**
     * The MicroServices to which the artifacts generated by this contributor
     * will be delivered.
     */
    // TODO Add Work Presentation MicroService when a available
    private static final MicroService[] WT_MODEL_DESTINATION_SERVICES =
            { MicroService.WM };

    /**
     * The transformer to generate the RASC BRM models.
     */
    private BRMGenerator TRANSFORMER = BRMGenerator.getInstance();

    /**
     * The writer to be used to write the XML document to the RASC artifact.
     */
    private static final XMLModelWriter MODEL_WRITER = new XMLModelWriter();

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#getId()
     */
    @Override
    public String getId() {
        return BrmModelsRascContributor.ID;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#hasContributionsFor(org.eclipse.core.resources.IProject)
     */
    @Override
    public boolean hasContributionsFor(IProject aProject) {
        return TRANSFORMER.projectHasRelevantContent(aProject);
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#process(org.eclipse.core.resources.IProject,
     *      com.tibco.xpd.rasc.core.RascContext,
     *      org.eclipse.core.runtime.IProgressMonitor,
     *      com.tibco.xpd.rasc.core.RascWriter)
     *
     * @param aProject
     * @param aContext
     * @param aProgressMonitor
     * @param aWriter
     * @throws Exception
     */
    @Override
    public void process(IProject aProject, RascContext aContext,
            IProgressMonitor aProgressMonitor, RascWriter aWriter)
            throws Exception {

        SubMonitor monitor = SubMonitor.convert(aProgressMonitor,
                Messages.BrmModelsRascContributor_UserTaskModelExport_status,
                2);
        monitor.subTask(
                Messages.BrmModelsRascContributor_UserTaskModelExport_status);

        try {
            // Generate the BRM relevant models
            Version projectVersion =
                    new Version(ProjectUtil.getProjectVersion(aProject));

            Version version = aContext.getVersion();

            long start = System.currentTimeMillis();

            Map<String, Resource> brmModels =
                    TRANSFORMER.generateBRMModels(aProject, version.toString());

            // System.out.println("** TOOK this long to generate BRM models: "
            // //$NON-NLS-1$
            // + (System.currentTimeMillis() - start));

            // has the job been cancelled by the user
            if (monitor.isCanceled()) {
                return;
            }
            monitor.worked(1);

            if (brmModels != null) {
                // Output the work-model to the rasc.
                Resource wmResource =
                        brmModels.get(BRMGenerator.WORKMODEL_ARTIFACT_NAME);
                if (wmResource != null) {
                    OutputStream output = aWriter.addContent(
                            BRMGenerator.WORKMODEL_ARTIFACT_NAME,
                            BRMGenerator.WORKMODEL_ARTIFACT_NAME,
                            BRMGenerator.WORKMODEL_ARTIFACT_NAME,
                            BrmModelsRascContributor.WM_MODEL_DESTINATION_SERVICES);

                    // output the rasc model to the rasc artifact
                    wmResource.save(output, N2Utils.getDefaultXMLSaveOptions());

                }

                // Output the work-type model to rasc.
                Resource wtResource =
                        brmModels.get(BRMGenerator.WORKTYPE_ARTIFACT_NAME);
                if (wtResource != null) {
                    OutputStream output = aWriter.addContent(
                            BRMGenerator.WORKTYPE_ARTIFACT_NAME,
                            BRMGenerator.WORKTYPE_ARTIFACT_NAME,
                            BRMGenerator.WORKTYPE_ARTIFACT_NAME,
                            BrmModelsRascContributor.WT_MODEL_DESTINATION_SERVICES);

                    // output the rasc model to the rasc artifact
                    wtResource.save(output, N2Utils.getDefaultXMLSaveOptions());
                }
            }
        } finally {
            monitor.worked(1);
            monitor.subTask(""); //$NON-NLS-1$
            monitor.done();
        }
    }

}
