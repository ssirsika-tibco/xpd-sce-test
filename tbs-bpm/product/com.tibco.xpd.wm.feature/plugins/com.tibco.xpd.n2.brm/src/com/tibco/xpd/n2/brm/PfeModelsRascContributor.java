/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.xpd.n2.brm;

import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Collection;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubMonitor;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.xpd.n2.brm.internal.Messages;
import com.tibco.xpd.n2.brm.utils.BRMUtils;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.rasc.core.RascWriter;
import com.tibco.xpd.xpdl2.Package;
import com.tibco.xpd.xpdl2.Process;
import com.tibco.xpd.xpdl2.util.Xpdl2ModelUtil;


/**
 * Sid ACE-3075
 * 
 * The RascContributor implementation to addthe old AMX BPM PFESpecification model (containing BusinessService and
 * CaseService additional configuration information) as a JSON model (specification.pfe)
 * 
 * 
 * @author aallway
 * @since 16 Sept 2019
 */
public class PfeModelsRascContributor implements RascContributor {
    /**
     * The unique identifier for this RascContribution implementation.
     */
    private static final String ID =
            "com.tibco.xpd.n2.pfe.rasc.model.contributor"; //$NON-NLS-1$

    /**
     * The MicroServices to which the artifacts generated by this contributor
     * will be delivered.
     */
    private static final MicroService[] DESTINATION_SERVICES = { MicroService.UP };

    public static final String SERVICEMODEL_UP_ARTIFACT_NAME = "serviceModel.up"; //$NON-NLS-1$

    public static final String SERVICEMODEL_UP_NAME = "UP-service-model"; //$NON-NLS-1$

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#getId()
     */
    @Override
    public String getId() {
        return PfeModelsRascContributor.ID;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#hasContributionsFor(org.eclipse.core.resources.IProject)
     */
    @Override
    public boolean hasContributionsFor(IProject aProject) {
        Collection<Package> n2ProcessPackages = BRMUtils.getN2ProcessPackages(aProject);

        for (Package pkg : n2ProcessPackages) {
            for (Process process : pkg.getProcesses()) {
                if (Xpdl2ModelUtil.isPageflowBusinessService(process) || Xpdl2ModelUtil.isCaseService(process)) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#process(org.eclipse.core.resources.IProject,
     *      com.tibco.xpd.rasc.core.RascContext,
     *      org.eclipse.core.runtime.IProgressMonitor,
     *      com.tibco.xpd.rasc.core.RascWriter)
     *
     * @param aProject
     * @param aContext
     * @param aProgressMonitor
     * @param aWriter
     * @throws Exception
     */
    @Override
    public void process(IProject aProject, RascContext aContext,
            IProgressMonitor aProgressMonitor, RascWriter aWriter)
            throws Exception {

        SubMonitor monitor = SubMonitor.convert(aProgressMonitor,
                Messages.PfeModelsRascContributor_BuildingBusinessCategories_status,
                2);
        monitor.subTask(
                Messages.PfeModelsRascContributor_BuildingBusinessCategories_status);

        try {
            // Generate the JSON model
            String json = new PfeSpecificationJsonBuilder().getJson(aProject);
            
            // has the job been cancelled by the user
            if (monitor.isCanceled()) {
                return;
            }
            monitor.worked(1);

            if (json != null && json.length() > 0) {
                
                // output JSON to the RASC
                OutputStream output = aWriter.addContent(SERVICEMODEL_UP_ARTIFACT_NAME, // $NON-NLS-1$
                        SERVICEMODEL_UP_NAME, // $NON-NLS-1$
                        SERVICEMODEL_UP_ARTIFACT_NAME, // $NON-NLS-1$
                        DESTINATION_SERVICES);
                try {
                    output.write(json.getBytes(StandardCharsets.UTF_8));
                } finally {
                    output.close();
                }
            }

            monitor.worked(1);

        } finally {
            monitor.subTask(""); //$NON-NLS-1$
            monitor.done();
        }
    }
}
