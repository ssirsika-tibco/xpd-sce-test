/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.xpd.n2.brm;

import java.io.OutputStream;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubMonitor;
import org.eclipse.emf.ecore.resource.Resource;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bpm.dt.rasc.PropertyValue;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.xpd.n2.brm.internal.Messages;
import com.tibco.xpd.n2.resources.util.N2Utils;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.rasc.core.RascWriter;
import com.tibco.xpd.resources.util.SpecialFolderUtil;
import com.tibco.xpd.worklistfacade.resource.WorkListFacadeResourcePlugin;

/**
 * The RascContributor implementation to add the WorkList Facade model to the
 * RASC
 * 
 * @author aallway
 * @since 03 May 2019
 */
public class WlfModelsRascContributor implements RascContributor {
    /**
     * The unique identifier for this RascContribution implementation.
     */
    private static final String ID =
            "com.tibco.xpd.n2.wlf.rasc.model.contributor"; //$NON-NLS-1$

    /**
     * Sid ACE-4134 For Asset-Categories property if any facade added to the RASC.
     */
    private static final String FACADE_RASC_ASSET_ID = "com.tibco.asset.worklist.facade"; //$NON-NLS-1$

    /**
     * The MicroServices to which the artifacts generated by this contributor will be delivered.
     */
    private static final MicroService[] WLF_MODEL_DESTINATION_SERVICES =
            { MicroService.WM
            // TODO ACE-1048 Add Event-Collector to target services.
            // MicroService.EC
            };

    /**
     * The transformer to generate the RASC WLF models.
     */
    private BRMGenerator TRANSFORMER = BRMGenerator.getInstance();

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#getId()
     */
    @Override
    public String getId() {
        return WlfModelsRascContributor.ID;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#hasContributionsFor(org.eclipse.core.resources.IProject)
     */
    @Override
    public boolean hasContributionsFor(IProject aProject) {

        return !SpecialFolderUtil
                .getAllDeepResourcesInSpecialFolderOfKind(aProject,
                        WorkListFacadeResourcePlugin.WLF_SPECIAL_FOLDER_KIND,
                        WorkListFacadeResourcePlugin.WLF_FILE_EXTENSION,
                        false)
                .isEmpty();

    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#process(org.eclipse.core.resources.IProject,
     *      com.tibco.xpd.rasc.core.RascContext,
     *      org.eclipse.core.runtime.IProgressMonitor,
     *      com.tibco.xpd.rasc.core.RascWriter)
     *
     * @param aProject
     * @param aContext
     * @param aProgressMonitor
     * @param aWriter
     * @throws Exception
     */
    @Override
    public void process(IProject aProject, RascContext aContext,
            IProgressMonitor aProgressMonitor, RascWriter aWriter)
            throws Exception {

        SubMonitor monitor = SubMonitor.convert(aProgressMonitor,
                Messages.WlfModelsRascContributor_Export_status,
                2);
        monitor.subTask(Messages.WlfModelsRascContributor_Export_status);

        try {
            // Generate the BRM relevant models
            Version version = aContext.getVersion();

            long start = System.currentTimeMillis();

            Resource wlfResource =
                    TRANSFORMER.generateWlfModel(aProject, version.toString());

            // System.out.println("** TOOK this long to generate WLF model: "
            // // $NON-NLS-1$
            // + (System.currentTimeMillis() - start));

            // has the job been cancelled by the user
            if (monitor.isCanceled()) {
                return;
            }
            monitor.worked(1);

            if (wlfResource != null) {
                // Output the workListFacade model to the rasc.
                OutputStream output = aWriter.addContent(
                        BRMGenerator.WORKLISTFACADE_FILENAME,
                        BRMGenerator.WORKLISTFACADE_FILENAME,
                        BRMGenerator.WORKLISTFACADE_FILENAME,
                        WlfModelsRascContributor.WLF_MODEL_DESTINATION_SERVICES);

                // output the rasc model to the rasc artifact
                wlfResource.save(output, N2Utils.getDefaultXMLSaveOptions());

                /* Sid ACE-4134 add to Asset-Categories property for facade added to the RASC. */
                aWriter.setManifestAttribute(ASSET_CATEGORIES_PROPERTY_NAME,
                        new PropertyValue[] { new PropertyValue(FACADE_RASC_ASSET_ID) });

            }

        } finally {
            monitor.subTask(""); //$NON-NLS-1$
            monitor.done();
        }
    }

}
