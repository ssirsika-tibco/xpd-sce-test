/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.xpd.om.transform.de;

import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubMonitor;
import org.eclipse.emf.ecore.EObject;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.n2.directory.model.de.ModelType;
import com.tibco.xpd.om.core.om.OrgModel;
import com.tibco.xpd.om.core.om.util.OMUtil;
import com.tibco.xpd.om.resources.wc.OMWorkingCopy;
import com.tibco.xpd.om.transform.de.transform.OrgModelTransformer;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.rasc.core.RascWriter;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.XpdResourcesPlugin;
import com.tibco.xpd.resources.projectconfig.SpecialFolder;
import com.tibco.xpd.resources.util.SpecialFolderUtil;

/**
 * The RascContributor implementation to add the exported Org-Model to the RASC.
 *
 * @author pwatson
 * @since 13 Mar 2019
 */
public class OrgModelRascContributor implements RascContributor {
    /**
     * The unique identifier for this RascContribution implementation.
     */
    private static final String ID =
            "com.tibco.xpd.om.transform.de.contributor"; //$NON-NLS-1$

    private static final String PROGRESS_TASK = "Org-Model Export"; //$NON-NLS-1$

    /**
     * The MicroServices to which the artifacts generated by this contributor
     * will be delivered.
     */
    private static final MicroService[] DESTINATION_SERVICES =
            { MicroService.DE };

    /**
     * The transformer to transform the studio org-model to the RASC org-model.
     */
    private static final OrgModelTransformer TRANSFORMER =
            new OrgModelTransformer();

    /**
     * The writer to be used to write the XML org-model document to the RASC
     * artifact.
     */
    private static final XMLModelWriter MODEL_WRITER = new XMLModelWriter();

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#getId()
     */
    @Override
    public String getId() {
        return OrgModelRascContributor.ID;
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#hasContributionsFor(org.eclipse.core.resources.IProject)
     */
    @Override
    public boolean hasContributionsFor(IProject aProject) {
        try {
            return findOrgModel(aProject) != null;
        } catch (CoreException e) {
            return false;
        }
    }

    /**
     * @see com.tibco.xpd.rasc.core.RascContributor#process(org.eclipse.core.resources.IProject,
     *      org.eclipse.core.runtime.IProgressMonitor,
     *      com.tibco.xpd.rasc.core.RascWriter)
     */
    @Override
    public void process(IProject aProject, IProgressMonitor aProgressMonitor,
            RascWriter aWriter) throws Exception {

        // if the project contains an org-model
        OrgModel orgModel = findOrgModel(aProject);
        if (orgModel == null) {
            return;
        }

        SubMonitor monitor = SubMonitor.convert(aProgressMonitor,
                OrgModelRascContributor.PROGRESS_TASK,
                2);

        // transform the studio org-model to rasc org-model (XML)
        ModelType transformOrgModel =
                OrgModelRascContributor.TRANSFORMER.transformOrgModel(orgModel);

        // has the job been cancelled by the user
        if (monitor.isCanceled()) {
            return;
        }
        monitor.worked(1);

        if (transformOrgModel != null)
        {
            // create a named artifact in the RASC - targetted as micro-services
            OutputStream output =
                    aWriter.addContent(orgModel.getName() + ".de", //$NON-NLS-1$
                            OrgModelRascContributor.DESTINATION_SERVICES);
            
            // output the rasc org-model to the rasc artifact
            OrgModelRascContributor.MODEL_WRITER.write(output,
                    Arrays.asList(transformOrgModel));
        }
        monitor.worked(1);
    }

    /**
     * Searches the given project for an org-model. If no org-model can be found
     * the result will be <code>null</code>.
     * 
     * @param aProject
     *            the project to be searched.
     * @return the org-model instance from the given project.
     * @throws CoreException
     */
    private OrgModel findOrgModel(IProject aProject) throws CoreException {
        if (aProject == null) {
            return null;
        }

        // look for all special folders - those releated to org-models
        List<SpecialFolder> sFolders =
                SpecialFolderUtil.getAllSpecialFoldersOfKind(aProject,
                        OMUtil.OM_SPECIAL_FOLDER_KIND);

        for (SpecialFolder sFolder : sFolders) {
            if (sFolder.getFolder() != null && sFolder.getFolder().exists()) {
                // iterator over all 'files' within the folder
                IResource[] members = sFolder.getFolder().members();
                for (IResource resource : members) {
                    // if it's a file with the org-model extension
                    if (resource instanceof IFile && OMUtil.OM_FILE_EXTENSION
                            .equals(resource.getFileExtension())) {
                        // try reading it's content
                        OrgModel result = read(resource);
                        if (result != null) {
                            return result;
                        }
                    }
                }
            }
        }

        return null;
    }

    /**
     * Attempts to read the OrgModel from the given IResource. If no Org-Model
     * can be found the return value will be <code>null</code>.
     * 
     * @param aResource
     *            the resource (file) from which the OrgModel will be read.
     * @return
     */
    private OrgModel read(IResource aResource) {
        WorkingCopy wc =
                XpdResourcesPlugin.getDefault().getWorkingCopy(aResource);

        if (wc instanceof OMWorkingCopy
                && ((OMWorkingCopy) wc).getRootElement() instanceof OrgModel
                && ((OMWorkingCopy) wc).getRootElement().eResource() != null) {
            EObject orgModel = ((OMWorkingCopy) wc).getRootElement();
            return (OrgModel) orgModel;
        }

        return null;
    }
}
