/*
 * Copyright (c) TIBCO Software Inc 2004, 2013. All rights reserved.
 */

package com.tibco.xpd.worklistfacade.resource.mapper;

import org.eclipse.uml2.uml.Property;

import com.tibco.xpd.worklistfacade.model.WorkItemAttribute;
import com.tibco.xpd.worklistfacade.model.WorkListFacade;
import com.tibco.xpd.worklistfacade.resource.util.Messages;

/**
 * Concept Path for Physical Work Item Attribute entry in the Work List Facade
 * Mapper View. Contains reference to the {@link Property} representing the
 * Physical Attribute and {@link WorkItemAttribute} of the WorkListFacade Model
 * representing the Display Label Attribute.
 * 
 * @author aprasad
 * @since 11-Nov-2013
 */
public class WorkItemAttributeConceptPath {

    /**
     * The Display Label Attribute {@link WorkItemAttribute} object in
     * WorkListFacade model.
     */
    private WorkItemAttribute displayAttribute;

    /**
     * The Physical Attribute.
     */
    private Property physicalAttribute;

    /**
     * Construct from the physical work Item Attribute represented by
     * {@link Property} object
     * <p>
     * Used in WorkListFacade Content Provider to display contents in the Right
     * hand side section of the Mapper.
     * 
     * @param physicalAttribute
     */
    public WorkItemAttributeConceptPath(Property physicalAttribute,
            WorkItemAttribute displayAttrib) {
        super();
        this.physicalAttribute = physicalAttribute;
        this.displayAttribute = displayAttrib;
    }

    /**
     * Get the referenced Physical Attribute.
     * 
     * @return Property, representing the Physical Work Item Attribute.
     */
    public Property getPhysicalAttribute() {
        return physicalAttribute;
    }

    /**
     * Get {@link WorkItemAttribute} representing Display Label for Physical
     * Attribute.
     * 
     * @return displayAttribute, {@link WorkItemAttribute} representing Display
     *         Label for Physical Attribute.
     */
    public WorkItemAttribute getDisplayAttribute() {
        return displayAttribute;
    }

    /**
     * @return String, Display Label of the Physical Work Item Attribute.
     */
    public String getLabel() {

        /**
         * Return label for WorkItemAttribute or 'Unresolved Reference' if
         * displayAttribute is null.
         */

        /*
         * Sid ACE-1755 Improve validation output (include the WLF defined name
         * if available) - used to always return unresolved in any case!!
         */
        if (displayAttribute != null && physicalAttribute != null) {
            return String.format("%s (%s)",
                    displayAttribute.getDisplayLabel(),
                    physicalAttribute.getName());
        } else if (physicalAttribute != null) {
            return physicalAttribute.getName();
        }
        return Messages.WLFAttributeAliasConceptPath_UnresolvedReference;
    }

    /**
     * @return String, name of the Physical Work Item Attribute.
     */
    public String getName() {

        /**
         * Return label for WorkItemAttribute or 'Unresolved Reference' if
         * attributeAlias = null
         */
        if (physicalAttribute != null) {
            StringBuffer label = new StringBuffer();
            label.append(physicalAttribute.getName());

        }
        return Messages.WLFAttributeAliasConceptPath_UnresolvedReference;
    }

    /**
     * Convert Physical Attribute represented as property into a programmatic
     * path string (for use in problem marker). NOT a label
     * 
     * USE THIS for the
     * AbstractMappingSection.getProblemMarkerDataMappingTargetPath() AND the
     * target content MappingRuleContentInfoProvider.getObjectPath() then it
     * should means that the 'path' stored in problem marker by
     * AbstractMappingRule will match the 'path' used for the target object in
     * the mapping section.
     * 
     * i.e. this path is ONLY used to match against other paths generated by
     * this method (and should match if the referenced Property are equivalent).
     */
    public String getPath() {
        /**
         * Convert AttributeAlisaType into a programmatic path string (for use
         * in problem marker). NOT a label
         */
        String path = null;
        if (physicalAttribute != null) {
            path = physicalAttribute.getName();
        }

        return path;
    }

    /**
     * This will be used by target content provider when it's
     * ITreeContentProvider.getParent() is called
     * 
     * 
     * @return null, the container is a list of attributes.
     */
    public WorkListFacade getParent() {

        return null;
    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     * 
     * @param obj
     * @return true, when both the Physical Work Item Attribute {@link Property}
     *         contained in the concept paths are equal or null.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof WorkItemAttributeConceptPath) {
            WorkItemAttributeConceptPath conceptPath =
                    (WorkItemAttributeConceptPath) obj;

            if (this.getPhysicalAttribute() != null) {
                return this.getPhysicalAttribute()
                        .equals(conceptPath.getPhysicalAttribute());
            } else {
                if (conceptPath.getPhysicalAttribute() == null) {
                    return true;
                }
            }
        }

        return false;
    }

}
