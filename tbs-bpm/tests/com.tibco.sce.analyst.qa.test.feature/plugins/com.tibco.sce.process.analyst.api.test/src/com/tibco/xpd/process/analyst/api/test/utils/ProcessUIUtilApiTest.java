/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.process.analyst.api.test.utils;

import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;
import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;

/**
 * ProcessUIUtilApiTest
 * <p>
 * ProcessUIUtilApiTest - To test ongoing backwards-compatibility of API provided by the class(es):
 * <li>com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessUIUtil</li> 
 * </p>
 *
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 */
public class ProcessUIUtilApiTest extends AbstractApiClassTest {

    public void testApiFor_com_tibco_xpd_analyst_resources_xpdl2_utils_ProcessUIUtil() throws Exception {

		String clazzBundleId = "com.tibco.xpd.analyst.resources.xpdl2"; //$NON-NLS-1$

		Bundle clazzBundle = Platform.getBundle(clazzBundleId);
		assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$
		

        String clazzName = "com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessUIUtil"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz);  //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample = new String[] { 
            "public com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessUIUtil()", //$NON-NLS-1$
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample = new String[] { 
            "public static final java.lang.String com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessUIUtil.PROCESS_PACKAGE_SEPARATOR",  //$NON-NLS-1$  
            "public static final java.lang.String com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessUIUtil.ACTIVITY_WEBSERVICE_REF_INDEX_TYPE",  //$NON-NLS-1$  
            "public static final java.lang.String com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessUIUtil.ACTIVITY_WEBSERVICE_REF_INDEX_ID",  //$NON-NLS-1$  
            "public static final java.lang.String com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessUIUtil.WEBSERVICE_REF_COLUMN_IS_API_ACTIVITY",  //$NON-NLS-1$ 
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample = new String[] { 
            "public static org.eclipse.emf.common.util.URI getURI(org.eclipse.emf.ecore.EObject,boolean)", //$NON-NLS-1$ 
            "public static java.lang.String getQualifiedName(org.eclipse.emf.ecore.EObject,java.lang.String)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getAllProcessPackages(java.lang.String)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getAllElements(java.lang.String)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.resources.indexer.IndexerItem getTaskLibraryIndexItem(java.lang.String)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.ecore.EObject getEObjectFrom(java.lang.String,java.lang.String)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.ecore.EObject getEObjectFrom(org.eclipse.emf.common.util.URI,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.ecore.EObject getEObjectFrom(org.eclipse.emf.common.util.URI)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.resources.indexer.IndexerItem getTaskLibraryTaskIndexItem(java.lang.String)", //$NON-NLS-1$ 
            "public static java.util.List<com.tibco.xpd.xpdl2.ExternalReference> getBOMExternalReferences(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static boolean isValidExternalReference(com.tibco.xpd.xpdl2.ExternalReference)", //$NON-NLS-1$ 
            "public static boolean isValidExternalReference(java.lang.String,java.lang.String,java.lang.String)", //$NON-NLS-1$ 
            "public static java.lang.String getURIString(org.eclipse.emf.ecore.EObject,boolean)", //$NON-NLS-1$ 
            "public static java.lang.String getProcessQualifiedName(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static java.lang.String getProcessInterfaceQualifiedName(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static java.lang.String createPath(com.tibco.xpd.resources.WorkingCopy)", //$NON-NLS-1$ 
            "public static java.lang.String getParticipantQualifiedName(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static java.lang.String getActivityQualifiedName(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static java.lang.String getProcessToBOMURIString(org.eclipse.emf.ecore.EObject,com.tibco.xpd.xpdl2.ExternalReference)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.ui.complexdatatype.ComplexDataTypeReference resolveComplexDataTypeReference(org.eclipse.emf.ecore.EObject,org.eclipse.core.resources.IProject)", //$NON-NLS-1$ 
            "public static java.util.Set<org.eclipse.core.resources.IResource> queryReferencingXpdlResources(java.lang.String,boolean)", //$NON-NLS-1$ 
            "public static java.util.Set<org.eclipse.core.resources.IResource> queryReferencingBomResources(org.eclipse.core.resources.IProject,java.lang.String,boolean)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.ecore.EObject getResultFromPicker(com.tibco.xpd.analyst.resources.xpdl2.pickers.BaseFilterPicker,org.eclipse.swt.widgets.Shell,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.resources.indexer.IndexerItem> getAllParticipantIndexerItems()", //$NON-NLS-1$ 
            "public static java.lang.String getDataFieldQualifiedName(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static java.lang.String getFormalParameterQualifiedName(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.core.resources.IResource> getResourcesForLocation(org.eclipse.core.resources.IProject,java.lang.String,java.lang.String)", //$NON-NLS-1$ 
            "public static boolean checkAndAddProjectReference(org.eclipse.swt.widgets.Shell,org.eclipse.emf.ecore.EObject,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static boolean checkAndAddProjectReferences(org.eclipse.swt.widgets.Shell,org.eclipse.emf.ecore.EObject,java.util.Collection<org.eclipse.emf.ecore.EObject>)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getAllProcesses(java.lang.String)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getIndexedElements(java.lang.String,com.tibco.xpd.resources.indexer.IndexerItem)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getAllProcessIndexedElements(com.tibco.xpd.analyst.resources.xpdl2.pickers.ProcessResourceItemType)", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.resources.indexer.IndexerItem> getAllProcessIndexerItems()", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.resources.indexer.IndexerItem> getAllTaskLibraryIndexerItems()", //$NON-NLS-1$ 
            "public static java.lang.String getLabelForIndexedItem(com.tibco.xpd.resources.indexer.IndexerItem)", //$NON-NLS-1$ 
            "public static org.eclipse.swt.graphics.Image getImageForIndexedItem(com.tibco.xpd.resources.indexer.IndexerItem)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.util.URI getImageURI(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static java.util.Set<org.eclipse.uml2.uml.Classifier> getReferencedClassifiers(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static boolean isValidComplexDataType(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.resources.indexer.IndexerItem> getAllProcessToBomIndexerItems()", //$NON-NLS-1$ 
            "public static java.lang.String resolveExternalBomClassName(java.lang.String,java.lang.String,java.lang.String)", //$NON-NLS-1$ 
            "public static java.util.Set<java.lang.String> queryReferencedBoms(java.lang.String,boolean)", //$NON-NLS-1$ 
            "public static java.util.Set<java.lang.String> queryReferencedBoms(com.tibco.xpd.xpdl2.Process,boolean)", //$NON-NLS-1$ 
            "public static java.util.Set<java.lang.String> queryReferencedBoms(com.tibco.xpd.xpdl2.Package,boolean)", //$NON-NLS-1$ 
            "public static java.util.Collection<org.eclipse.core.resources.IResource> queryReferencedWSDLResources(org.eclipse.core.resources.IResource,boolean)", //$NON-NLS-1$ 
            "public static java.util.Set<java.lang.String> queryReferencingXpdls(java.lang.String,boolean)", //$NON-NLS-1$ 
            "public static java.util.Set<java.lang.String> queryReferencingProcesses(java.lang.String,java.lang.String,boolean)", //$NON-NLS-1$ 
            "public static boolean isUnresolvedExternalReference(com.tibco.xpd.xpdl2.ExternalReference)", //$NON-NLS-1$ 
            "public static java.util.List<com.tibco.xpd.xpdl2.ExternalReference> getBOMExternalReferencesUsed(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static void removeUnusedData(java.util.List<com.tibco.xpd.xpdl2.ProcessRelevantData>,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.ecore.EObject getReferencedClassifier(com.tibco.xpd.xpdl2.ExternalReference,org.eclipse.core.resources.IProject)", //$NON-NLS-1$ 
            "public static org.eclipse.uml2.uml.Classifier getReferencedClassifier(com.tibco.xpd.ui.complexdatatype.ComplexDataTypeReference,org.eclipse.core.resources.IProject)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getAllParticipantsWithId(java.lang.String)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getAllParticipants()", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.resources.indexer.IndexerItem> getAllActivityWebServiceReferenceIndexerItems()", //$NON-NLS-1$ 
            "public static com.tibco.xpd.wsdl.WsdlServiceKey getWsdlServiceKey(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
            "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public native int hashCode()", //$NON-NLS-1$ 
            "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
            "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
            "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
            "public java.lang.String toString()", //$NON-NLS-1$ 
            "public final native void notify()", //$NON-NLS-1$ 
            "public final native void notifyAll()", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample = new String[] {
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }
    

    
}

