/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.process.analyst.api.test.utils;

import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;

import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;

/**
 * ConceptUtilApiTest
 * <p>
 * ConceptUtilApiTest - To test ongoing backwards-compatibility of API provided
 * by the class(es):
 * <li>com.tibco.xpd.processeditor.xpdl2.properties.ConceptUtil</li>
 * </p>
 * 
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 */
public class ConceptUtilApiTest extends AbstractApiClassTest {

    public void testApiFor_com_tibco_xpd_processeditor_xpdl2_properties_ConceptUtil()
            throws Exception {

        String clazzBundleId = "com.tibco.xpd.processeditor.xpdl2"; //$NON-NLS-1$

        Bundle clazzBundle = Platform.getBundle(clazzBundleId);
        assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$

        String clazzName =
                "com.tibco.xpd.processeditor.xpdl2.properties.ConceptUtil"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz); //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample =
                new String[] { "public com.tibco.xpd.processeditor.xpdl2.properties.ConceptUtil()", //$NON-NLS-1$
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample =
                new String[] { "public static final java.lang.String com.tibco.xpd.processeditor.xpdl2.properties.ConceptUtil.BOM_SPECIAL_FOLDER_KIND", //$NON-NLS-1$ 
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample =
                new String[] {
                        "public static boolean isArray(com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath)", //$NON-NLS-1$ 
                        "protected static org.eclipse.core.resources.IResource getResource(java.lang.String,org.eclipse.core.resources.IProject)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.ProcessRelevantData resolveParameter(com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.ProcessRelevantData resolveParameter(com.tibco.xpd.xpdExtension.InterfaceMethod,java.lang.String)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.ProcessRelevantData resolveParameter(com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath resolveConceptPath(com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath resolveConceptPath(com.tibco.xpd.xpdExtension.InterfaceMethod,java.lang.String)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath getConceptPath(com.tibco.xpd.xpdl2.ProcessRelevantData)", //$NON-NLS-1$ 
                        "public static org.eclipse.uml2.uml.Class getComplexDataTypeModel(com.tibco.xpd.ui.complexdatatype.ComplexDataTypeReference,org.eclipse.core.resources.IProject)", //$NON-NLS-1$ 
                        "public static org.eclipse.uml2.uml.Class getConceptClass(com.tibco.xpd.xpdl2.ProcessRelevantData)", //$NON-NLS-1$ 
                        "public static java.util.Collection<com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath> getContributedFields(com.tibco.xpd.xpdl2.Process,java.lang.String)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath resolveContributedConceptPath(com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
                        "protected static java.lang.String getSpecialFolderRelativeURI(java.lang.String,org.eclipse.core.resources.IProject)", //$NON-NLS-1$ 
                        "protected static boolean isCorrectEObjectType(java.lang.Object)", //$NON-NLS-1$ 
                        "protected static java.lang.String getSpecialFolderKind()", //$NON-NLS-1$ 
                        "public static java.util.List<com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath> getConceptParentHierarchy(com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath,java.util.List<com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath>)", //$NON-NLS-1$ 
                        "public static java.util.List<com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath> getConceptPathChildren(com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath)", //$NON-NLS-1$ 
                        "public static boolean shouldIncludeAttribute(org.eclipse.uml2.uml.Classifier,com.tibco.xpd.processeditor.xpdl2.properties.ConceptPath)", //$NON-NLS-1$ 
                        "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
                        "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public native int hashCode()", //$NON-NLS-1$ 
                        "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
                        "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
                        "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
                        "public java.lang.String toString()", //$NON-NLS-1$ 
                        "public final native void notify()", //$NON-NLS-1$ 
                        "public final native void notifyAll()", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample = new String[] {};
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }

}
