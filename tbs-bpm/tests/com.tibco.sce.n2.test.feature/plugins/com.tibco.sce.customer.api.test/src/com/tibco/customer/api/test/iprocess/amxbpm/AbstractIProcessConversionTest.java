/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.customer.api.test.iprocess.amxbpm;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.junit.Test;

import com.tibco.xpd.analyst.resources.xpdl2.Xpdl2ResourcesConsts;
import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.iprocess.amxbpm.converter.external.DebugResourcesManager.DEBUG_MODE;
import com.tibco.xpd.iprocess.amxbpm.converter.external.IProcessToStudioAMXBPMConverterFramework;
import com.tibco.xpd.iprocess.amxbpm.imports.validations.IBpmConversionValidator;
import com.tibco.xpd.iprocess.amxbpm.imports.validations.IProcessImportValidator;
import com.tibco.xpd.iprocess.amxbpm.imports.validations.ImportValidationError;
import com.tibco.xpd.iprocess.amxbpm.imports.validations.IpsToBpmConversionValidator;
import com.tibco.xpd.resources.projectconfig.SpecialFolder;
import com.tibco.xpd.resources.util.SpecialFolderUtil;

/**
 * Base iPM/iPS to BPM Conversion test. Loads the test workspace with the files
 * returned by {@link #getImportResourcesInfo()} and
 * {@link #getOtherResourcesInfo()} and then converts all of the files returned
 * by {@link #getImportResourcesInfo()} from iProcess XPDL format to BPM XPDL
 * format.
 * <p>
 * Implementers may override {@link #checkConversionStatusMessages(IStatus)} if
 * they wish to scan through the Conversion status messages to examine the
 * Statuses generated by the conversion framework.
 * <p>
 * On successful conversion the {@link #doTestConvertedXpdls(Collection)} is
 * invoked with the BPM xpdls for any test required to be performed on them.
 * 
 * @author aallway
 * @since 3 Jun 2014
 */
public abstract class AbstractIProcessConversionTest extends AbstractBaseIProcessToBpmTest {

    private DEBUG_MODE debugMode = DEBUG_MODE.BASIC;

    /**
     * Invoked On successful conversion the
     * {@link #doTestConvertedXpdls(Collection)} is invoked with the BPM xpdls
     * for any test required to be performed on them.
     * 
     * @param convertedXpdls
     */
    protected abstract void doTestConvertedXpdls(
            Collection<IFile> convertedXpdls);

    @Test
    public void testIProcessConversion() throws Exception {
        long start = System.currentTimeMillis();

        IProject project = getMainImportProject();

        // Special Folder creation should be part of the setup method.
        IProcessToStudioAMXBPMConverterFramework converter =
                new IProcessToStudioAMXBPMConverterFramework(project, debugMode);

        IStatus importConvertStatus = null;
        try {
            /*
             * get the type of conversion. IPM to BPM or IPS to BPM
             */
            CONVERSION_TYPE conversionType = getConversionType();

            if (CONVERSION_TYPE.IPM_TO_BPM_IMPORT_AND_CONVERT
                    .equals(conversionType)) {
                /*
                 * IPM to BPM import and convert
                 */
                importConvertStatus =
                        doIpmToBpmImportAndConvert(project, converter);

            } else if (CONVERSION_TYPE.IPS_TO_BPM_CONVERT
                    .equals(conversionType)) {
                /*
                 * IPS to BPM conversion
                 */
                importConvertStatus = doIpsToBpmConversion(project, converter);

            } else {

                fail("The type of conversion(IPM to BPM / IPS to BPM) was not specified."); //$NON-NLS-1$
            }

        } catch (OperationCanceledException e) {
            fail("Conversion was interrupted!"); //$NON-NLS-1$
            e.printStackTrace();
        }

        if (importConvertStatus != null) {

            checkConversionStatusMessages(importConvertStatus);
        }

        /*
         * Copying converted xpdls to convertedXpdls list.
         */
        Collection<IFile> convertedXpdls = converter.getConvertedXPDLsForBPM();

        /*
         * Get sub-class to test the conversion worked successfully.
         */
        doTestConvertedXpdls(convertedXpdls);

        long duration = System.currentTimeMillis() - start;

        System.out.println("Setup Duration for importAndConvertResources = " //$NON-NLS-1$
                + duration + "ms"); //$NON-NLS-1$

    }

    /**
     * Performs the IPM to AMX-BPM conversion.
     * 
     * @param project
     *            the target Project
     * @param converter
     * @return the {@link IStatus} of conversion
     * @throws OperationCanceledException
     * @throws CoreException
     */
    protected IStatus doIpmToBpmImportAndConvert(IProject project,
            IProcessToStudioAMXBPMConverterFramework converter)
            throws OperationCanceledException, CoreException {

        /*
         * Get files to import and project to convert into...
         */
        List<File> importFiles = new ArrayList<File>();

        for (TestResourceInfo testResourceInfo : getImportResourcesInfo()) {
            importFiles.add(testResourceInfo.getTestFile().getLocation()
                    .toFile());
        }
        /*
         * get the target Processes folder to save the converted xpdls
         */
        SpecialFolder specialFolder =
                SpecialFolderUtil.getSpecialFolderOfKind(project,
                        Xpdl2ResourcesConsts.PROCESSES_SPECIAL_FOLDER_KIND);

        IBpmConversionValidator validator =
                new IProcessImportValidator(project, importFiles);

        checkImportValidationErrors(validator);

        return converter.convertIPMToStudioAMXBPM(importFiles,
                specialFolder.getFolder(),
                new NullProgressMonitor());

    }

    /**
     * Perform the IPS to AMX-BPM conversion
     * 
     * @param project
     *            the target project
     * @param converter
     * @return the {@link IStatus} of conversion
     * @throws OperationCanceledException
     * @throws CoreException
     */
    protected IStatus doIpsToBpmConversion(IProject project,
            IProcessToStudioAMXBPMConverterFramework converter)
            throws OperationCanceledException, CoreException {

        /*
         * Get IPS xpdls to convert to BPM
         */
        List<IFile> studioIProcessXPDLs = new ArrayList<IFile>();

        for (TestResourceInfo testResourceInfo : getImportResourcesInfo()) {
            studioIProcessXPDLs.add(testResourceInfo.getTestFile());
        }
        /*
         * get the target Processes folder to save the converted xpdls
         */
        SpecialFolder specialFolder =
                SpecialFolderUtil.getSpecialFolderOfKind(project,
                        Xpdl2ResourcesConsts.PROCESSES_SPECIAL_FOLDER_KIND);

        IBpmConversionValidator validator =
                new IpsToBpmConversionValidator(new HashSet<IResource>(
                        studioIProcessXPDLs), specialFolder.getFolder());

        checkImportValidationErrors(validator);

        return converter
                .convertStudioIProcessToStudioAMXBPM(studioIProcessXPDLs,
                        specialFolder.getFolder(),
                        new NullProgressMonitor());

    }

    /**
     * Scans through the conversion Statuses and Throws an exception if there
     * were errors during the conversion process.
     * <p>
     * Override this if the implementers need to scan through the Conversion
     * Status to check if the excepted Status messages are generated by the
     * Conversion FrameWork.
     * 
     * @param importConvertStatus
     *            the Status returned by the conversion framework.
     * @throws Exception
     */
    protected void checkConversionStatusMessages(IStatus importConvertStatus)
            throws Exception {
        List<IStatus> errors = getErrors(importConvertStatus.getChildren());
        // include complete exception
        if (!errors.isEmpty()) {
            throw new Exception(errors.get(0).getException());
        }
    }

    /**
     * Get the error status objects from the given list.
     * 
     * @param iStatus
     * @return
     */
    private List<IStatus> getErrors(IStatus[] iStatus) {
        List<IStatus> errors = new ArrayList<IStatus>();
        if (iStatus != null) {
            for (IStatus st : iStatus) {
                if (st.getSeverity() == IStatus.ERROR) {
                    errors.add(st);
                }
            }
        }
        return errors;
    }

    /**
     * Run the import validator and do a test failure if there are any
     * validation errors.
     * 
     * @param project
     * @param importFiles
     */
    private void checkImportValidationErrors(IBpmConversionValidator validator) {

        List<ImportValidationError> errors =
                validator.validate(new NullProgressMonitor());

        StringBuffer sb = new StringBuffer();
        boolean hasErrors = false;

        for (ImportValidationError importValidationError : errors) {

            if (IStatus.ERROR == importValidationError.getSeverity()) {
                sb.append("\n  "); //$NON-NLS-1$
                sb.append(importValidationError.getMessage());

                hasErrors = true;
            }
        }

        if (hasErrors) {
            fail("The  XPDL files have import validation errors: " //$NON-NLS-1$
                    + sb.toString());
        }
    }

    protected void setDebugMode(DEBUG_MODE mode) {
        debugMode = mode;
    }
}
