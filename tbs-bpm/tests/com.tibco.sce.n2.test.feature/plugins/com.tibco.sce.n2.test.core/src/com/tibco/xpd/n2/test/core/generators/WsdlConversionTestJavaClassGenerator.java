package com.tibco.xpd.n2.test.core.generators;

import com.tibco.xpd.n2.test.core.wsdlconversion.*;

public class WsdlConversionTestJavaClassGenerator
{
  protected static String nl;
  public static synchronized WsdlConversionTestJavaClassGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    WsdlConversionTestJavaClassGenerator result = new WsdlConversionTestJavaClassGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/**" + NL + " * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved." + NL + " */";
  protected final String TEXT_2 = NL + "package ";
  protected final String TEXT_3 = ";" + NL + "" + NL + "import ";
  protected final String TEXT_4 = ".";
  protected final String TEXT_5 = ";" + NL + "import com.tibco.xpd.core.test.util.TestResourceInfo;" + NL + "import com.tibco.xpd.n2.test.core.wsdlconversion.Xsd4BdsInfo;" + NL + "" + NL + "/**" + NL + " * Test that inclusion of \"";
  protected final String TEXT_6 = "\" in a BPM project generates the" + NL + " * appropriate BOM files with the correct content (and that they have no problem" + NL + " * markers)." + NL + " * <p>" + NL + " * Then checks that the correct XSDs are derived by the Bom2XsdBuilder (in the" + NL + " * .bom2xsd\" folder) with the correct content and that they have no problem" + NL + " * markers." + NL + " * </p>" + NL + " * <p>" + NL + " * Then checks that the correct BDS projects are created and contains the" + NL + " * correct XSDs derived for them to build the BDS ecore - and that the BDS" + NL + " * project has no problem markers." + NL + " * </p>" + NL + " * <p>" + NL + " * Generated by: createWsdlConversionTest.javajet" + NL + " * </p>" + NL + " * " + NL + " * @author " + NL + " * @since " + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends ";
  protected final String TEXT_8 = " {" + NL + "" + NL + "    /**" + NL + "     * The set of bom files in Generated Business Objects folder expected to be" + NL + "     * generated for WSDL (relative to the base BOM folder)." + NL + "     */" + NL + "    private String[] bomFolderRelativeBoms = { ";
  protected final String TEXT_9 = NL + "            \"";
  protected final String TEXT_10 = "\", //$NON-NLS-1$";
  protected final String TEXT_11 = NL + "     };" + NL + "" + NL + "    /**" + NL + "     * The set of XSD files expected to be derived from the generated boms " + NL + "     * (relative to the .bom2Xsd folder)" + NL + "     */" + NL + "    private String[] bom2XsdFolderRelativeXsds = { ";
  protected final String TEXT_12 = NL + "            \"";
  protected final String TEXT_13 = "\", //$NON-NLS-1$";
  protected final String TEXT_14 = NL + "    };" + NL + "" + NL + "    /**" + NL + "     * The bds projects expected to be created for the set of generated boms." + NL + "     */" + NL + "    private Xsd4BdsInfo[] xsd4BdsInfos = new Xsd4BdsInfo[] {";
  protected final String TEXT_15 = NL + "      \t/* Expected BDS project and XSDs for \"";
  protected final String TEXT_16 = "\" */" + NL + "        new Xsd4BdsInfo(\"";
  protected final String TEXT_17 = "\", \"";
  protected final String TEXT_18 = "\"," + NL + "            new String[] { ";
  protected final String TEXT_19 = NL + "                \"";
  protected final String TEXT_20 = "\", ";
  protected final String TEXT_21 = NL + "          })," + NL + "        /* ------------------- */ ";
  protected final String TEXT_22 = NL + "    };" + NL + "    /* =================== */" + NL + "    " + NL + "    /**" + NL + "     * Construct" + NL + "     */" + NL + "    public ";
  protected final String TEXT_23 = "() {" + NL + "        super(\"";
  protected final String TEXT_24 = "\", \"";
  protected final String TEXT_25 = "\");" + NL + "    }" + NL + "    " + NL + "    /**" + NL + "     * Test that the correct BOMs have been created for the WSDL \"";
  protected final String TEXT_26 = "\", " + NL + "     * and that the correct XSD's have been built from those BOMs" + NL + "     * " + NL + "     * @throws Exception" + NL + "     */" + NL + "    public void test";
  protected final String TEXT_27 = "() throws Exception {" + NL + "        // Check all files created correctly." + NL + "        checkTestFilesCreated();" + NL + "       " + NL + "        /*" + NL + "         * Check boms have been generated and match the gold files." + NL + "         */" + NL + "        checkGeneratedBoms(bomFolderRelativeBoms);" + NL + "" + NL + "        /*" + NL + "         * Check xsd's have been derived and match the gold files." + NL + "         */" + NL + "        checkDerivedBom2Xsds(bom2XsdFolderRelativeXsds);" + NL + "" + NL + "        /*" + NL + "         * Check xsd's have been derived for BDS" + NL + "         */" + NL + "        checkDerivedXsd4Bds(xsd4BdsInfos);" + NL + "" + NL + "        /*" + NL + "         * If we get this far then all's well that ends well!" + NL + "         */" + NL + "        return;" + NL + "    }" + NL + "" + NL + "    @Override" + NL + "    protected String getTestName() {" + NL + "        return \"";
  protected final String TEXT_28 = "\"; //$NON-NLS-1$" + NL + "    }" + NL + "" + NL + "    @Override" + NL + "    protected String getTestPlugInId() {" + NL + "        return \"";
  protected final String TEXT_29 = "\"; //$NON-NLS-1$" + NL + "    }" + NL + "" + NL + "    @Override" + NL + "    protected TestResourceInfo[] getTestResources() {" + NL + "        TestResourceInfo[] testResources = new TestResourceInfo[] {";
  protected final String TEXT_30 = NL + "            new TestResourceInfo(\"";
  protected final String TEXT_31 = "\", \"";
  protected final String TEXT_32 = "\"), //$NON-NLS-1$ //$NON-NLS-2$";
  protected final String TEXT_33 = NL + "        };" + NL + "    " + NL + "        return testResources;" + NL + "    }" + NL + "" + NL + "   " + NL + "}";
  protected final String TEXT_34 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(TEXT_1);
     N2WsdlConversionTestGeneratorData data = (N2WsdlConversionTestGeneratorData)argument; 
    stringBuffer.append(TEXT_2);
    stringBuffer.append(data.testPackageId);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(data.testSuperClassPackage);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(data.testSuperClassName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(data.baseWsdlOrXsdPath);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(data.testClassName);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(data.testSuperClassName);
    stringBuffer.append(TEXT_8);
     for (String bomFolderRelativeBom : data.bomFolderRelativeBoms) { 
    stringBuffer.append(TEXT_9);
    stringBuffer.append(bomFolderRelativeBom);
    stringBuffer.append(TEXT_10);
     } 
    stringBuffer.append(TEXT_11);
     for (String bom2XsdFolderRelativeXsd : data.bom2XsdFolderRelativeXsds) { 
    stringBuffer.append(TEXT_12);
    stringBuffer.append(bom2XsdFolderRelativeXsd);
    stringBuffer.append(TEXT_13);
     } 
    stringBuffer.append(TEXT_14);
     for (Xsd4BdsInfo xsd4BdsInfo : data.xsd4BdsInfos) { 
    stringBuffer.append(TEXT_15);
    stringBuffer.append(xsd4BdsInfo.bomName);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(xsd4BdsInfo.bomName);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(xsd4BdsInfo.bdsProjectName);
    stringBuffer.append(TEXT_18);
     for (String modelFolderRelativeXsd : xsd4BdsInfo.modelFolderRelativeXsds) { 
    stringBuffer.append(TEXT_19);
    stringBuffer.append(modelFolderRelativeXsd);
    stringBuffer.append(TEXT_20);
     } 
    stringBuffer.append(TEXT_21);
     } 
    stringBuffer.append(TEXT_22);
    stringBuffer.append(data.testClassName);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(data.targetProjectName);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(data.baseWsdlOrXsdPath);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(data.baseWsdlOrXsdPath);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(data.testMethodName);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(data.testName);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(data.testPluginId);
    stringBuffer.append(TEXT_29);
     for (String testResourcePath : data.testResourcePaths) { 
    stringBuffer.append(TEXT_30);
    stringBuffer.append(data.baseResourcePath);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(testResourcePath);
    stringBuffer.append(TEXT_32);
     } 
    stringBuffer.append(TEXT_33);
    stringBuffer.append(TEXT_34);
    return stringBuffer.toString();
  }
}
