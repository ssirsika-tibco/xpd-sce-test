/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.n2.test.general;

import java.io.IOException;
import java.io.InputStream;

import org.custommonkey.xmlunit.Difference;
import org.custommonkey.xmlunit.DifferenceListener;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.command.CompoundCommand;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.tibco.bx.validation.resolutions.AbstractIProcessToBPMJavaScriptResolution;
import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.core.xmlunit.XmlDiff;
import com.tibco.xpd.core.xmlunit.XmlDiffNodePath;
import com.tibco.xpd.n2.test.core.AbstractN2BaseResourceTest;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.XpdResourcesPlugin;
import com.tibco.xpd.resources.util.WorkingCopyUtil;
import com.tibco.xpd.xpdl2.Package;

/**
 * IProcess2BPMJavaScriptConverterTest
 * <p>
 * Test for iProcess Script to JavaScript conversion.
 * </p>
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 * 
 * @author aallway
 * @since 3.6.0
 */
public class N2_02_IProcess2BPMJavaScriptConverterTest extends
        AbstractN2BaseResourceTest {

    /**
     * 
     */
    private static final String GOLD_FOLDER = "gold"; //$NON-NLS-1$

    /**
     * @see com.tibco.xpd.core.test.util.AbstractBuildingBaseResourceTest#buildAndWait()
     * 
     */
    @Override
    protected void buildAndWait() {
        /*
         * override build and wait to do nothing= this test has some large
         * resources in and we really don't care about validation or derived
         * artefacts so this will speed this up.
         */
        return;
    }

    /**
     * IProcess2BPMJavaScriptConverterTest
     * 
     * @throws Exception
     */
    public void testIProcess2BPMJavaScriptConverterTest() throws Exception {
        // Check all files created correctly.
        checkTestFilesCreated();

        /*
         * All the test files and their gold files are part of test resources.
         * 
         * We will go thru the test files, execute resolution to convert all of
         * their iProcessScripts to JavaScripts and then compare with the gold
         * files in which this has already be done.
         */
        StringBuffer failCollection = new StringBuffer();

        for (TestResourceInfo testResourceInfo : getTestResources()) {

            IFile testFile = testResourceInfo.getTestFile();

            if (testFile.getFileExtension().equalsIgnoreCase("xpdl") //$NON-NLS-1$
                    && !testFile.getParent().getName().equals(GOLD_FOLDER)) {

                String error = convertPackageScripts(testFile);

                if (error != null && !error.isEmpty()) {
                    failCollection.append(error);
                    failCollection.append('\n');

                } else {
                    WorkingCopyUtil.getWorkingCopy(testFile).save();

                    IFile goldFile = getGoldFile(testFile);

                    if (goldFile == null || !goldFile.isAccessible()) {
                        failCollection
                                .append(String
                                        .format("Cannot access gold file '%s%s' for testfile '%s'.\n", //$NON-NLS-1$
                                                GOLD_FOLDER,
                                                testFile.getName(),
                                                testFile.getFullPath()
                                                        .toOSString()));
                    } else {
                        error = compareTestAndGold(testFile, goldFile);

                        if (error != null && !error.isEmpty()) {
                            failCollection.append(error);
                            failCollection.append('\n');
                        }
                    }
                }
            }
        }

        if (failCollection.length() > 0) {
            fail(failCollection.toString());
        }

        return;
    }

    /**
     * Convert all iProcessScripts in given xpdl package into AMX BPM
     * javaScripts.
     * 
     * @param testFile
     * 
     * @return Error string on failure or <code>null</code> on success.
     */
    private String convertPackageScripts(IFile testFile) {

        WorkingCopy workingCopy = WorkingCopyUtil.getWorkingCopy(testFile);

        if (workingCopy.getRootElement() instanceof Package) {
            Package pkg = (Package) workingCopy.getRootElement();

            CompoundCommand cmd = new CompoundCommand();

            TransactionalEditingDomain editingDomain =
                    XpdResourcesPlugin.getDefault().getEditingDomain();

            AbstractIProcessToBPMJavaScriptResolution
                    .appendConversionCommands(editingDomain, pkg, cmd);

            if (cmd.isEmpty()) {
                // No scripts to do is ok.
                return null;

            } else if (cmd.canExecute()) {
                editingDomain.getCommandStack().execute(cmd);
                return null;

            } else {
                return String
                        .format("%s: convertPackageScripts(): Script conversion command is invalid", //$NON-NLS-1$
                                testFile.getName());
            }
        }

        return String.format("%s: convertPackageScripts(): Invalid testFile", //$NON-NLS-1$
                testFile.getName());
    }

    /**
     * Compare the resultant test file (post-iProcessScript-conversion) and gold
     * file.
     * <p>
     * The gold files should be identical to the newly converted live files.
     * 
     * @param testFile
     * @param goldFile
     * @return Error string on failure or <code>null</code> on success.
     */
    private String compareTestAndGold(IFile testFile, IFile goldFile) {
        InputStream testStream = null;
        InputStream goldStream = null;
        try {
            testStream = testFile.getContents();
            if (testStream != null) {
                goldStream = goldFile.getContents();
                if (goldStream != null) {

                    InputSource testSource = new InputSource(testStream);
                    InputSource goldSource = new InputSource(goldStream);

                    /*
                     * XML Diff that will allow all differences everything
                     * EXCEPT differences in any item whose test node is in
                     * parent that has a "ScriptGrammar" attribute (i.e. a
                     * script!)
                     */
                    XmlDiff xmlDiff =
                            new ScriptsOnlyXmlDiff(goldSource, testSource);

                    boolean similar = xmlDiff.similar();
                    if (!similar) {
                        return String
                                .format("%s: compareTestAndGold(): Converted test file doesn't match expected gold file standard:\n    %s", //$NON-NLS-1$
                                        testFile.getName(),
                                        xmlDiff.toString());
                    }

                    return null;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();

        } finally {
            if (goldStream != null) {
                try {
                    goldStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            if (testStream != null) {
                try {
                    testStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return String
                .format("compareTestAndGold(%s, %s): Failed to initialise for comparison", //$NON-NLS-1$
                        testFile.getFullPath(),
                        goldFile.getName());

    }

    /**
     * @param testFile
     * @return gold file equivalent of given test file.
     */
    private IFile getGoldFile(IFile testFile) {
        return testFile.getParent().getFolder(new Path(GOLD_FOLDER))
                .getFile(testFile.getName());

    }

    @Override
    protected String getTestName() {
        return "IProcess2BPMJavaScriptConverterTest"; //$NON-NLS-1$
    }

    @Override
    protected String getTestPlugInId() {
        return "com.tibco.xpd.n2.test"; //$NON-NLS-1$
    }

    @Override
    protected TestResourceInfo[] getTestResources() {
        TestResourceInfo[] testResources =
                new TestResourceInfo[] {
                        /* Files with iProcess Script scripts in */
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/9EDTB.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/9notifym.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/9resprob.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/dh8clmgt.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/nw8rstrs.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$

                        /*
                         * Gold files Exact same as above with iProcess scripts
                         * already converted to BPM JavaScript.
                         */
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/gold/nw8rstrs.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/gold/9EDTB.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/gold/9notifym.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/gold/9resprob.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/iProcess 2 BPM JavaScript Converter Test", "XPD-4572-iProcess2BPMJavaScript/Process Packages{processes}/gold/dh8clmgt.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                };

        return testResources;
    }

    private static class ScriptsOnlyXmlDiff extends XmlDiff {

        /**
         * @param goldSource
         * @param testSource
         * @throws IOException
         * @throws SAXException
         */
        public ScriptsOnlyXmlDiff(InputSource goldSource, InputSource testSource)
                throws SAXException, IOException {
            super(goldSource, testSource);

            final DifferenceListener defaultDiffListener =
                    getDifferenceListener();

            DifferenceListener customDl = new DifferenceListener() {

                @Override
                public void skippedComparison(Node control, Node test) {
                    defaultDiffListener.skippedComparison(control, test);
                }

                @Override
                public int differenceFound(Difference difference) {
                    Node parentNode =
                            XmlDiffNodePath.getParentElement(difference
                                    .getTestNodeDetail().getNode());

                    if (parentNode != null
                            && parentNode.getAttributes() != null) {
                        NamedNodeMap attributes = parentNode.getAttributes();

                        if (attributes.getNamedItem("ScriptGrammar") != null) { //$NON-NLS-1$
                            return defaultDiffListener
                                    .differenceFound(difference);
                        }
                    }

                    /* Not a script - ignore. */
                    return DifferenceListener.RETURN_IGNORE_DIFFERENCE_NODES_IDENTICAL;
                }
            };

            overrideDifferenceListener(customDl);

        }

    }
}
