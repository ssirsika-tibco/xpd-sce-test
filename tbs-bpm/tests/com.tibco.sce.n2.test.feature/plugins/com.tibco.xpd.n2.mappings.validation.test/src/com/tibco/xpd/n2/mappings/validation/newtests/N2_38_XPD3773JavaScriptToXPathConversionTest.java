/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.n2.mappings.validation.newtests;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import javax.wsdl.Definition;

import org.eclipse.core.resources.IFile;

import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.implementer.resources.xpdl2.utils.JavaScriptWsdlPathToXPathConverter;
import com.tibco.xpd.implementer.script.ActivityMessageProvider;
import com.tibco.xpd.implementer.script.ActivityMessageProviderFactory;
import com.tibco.xpd.implementer.script.Xpdl2WsdlUtil;
import com.tibco.xpd.n2.test.core.AbstractN2BaseResourceTest;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.util.WorkingCopyUtil;
import com.tibco.xpd.xpdExtension.CorrelationDataMappings;
import com.tibco.xpd.xpdExtension.XpdExtensionPackage;
import com.tibco.xpd.xpdl2.Activity;
import com.tibco.xpd.xpdl2.DataMapping;
import com.tibco.xpd.xpdl2.Message;
import com.tibco.xpd.xpdl2.Package;
import com.tibco.xpd.xpdl2.Process;
import com.tibco.xpd.xpdl2.util.ReplyActivityUtil;
import com.tibco.xpd.xpdl2.util.Xpdl2ModelUtil;

/**
 * XPD3773JavaScriptToXPathConversionTest
 * <p>
 * XPD3773JavaScriptToXPathConversionTest - Tests the
 * {@link JavaScriptWsdlPathToXPathConverter} JavaScript mapping path to true
 * XPath expression converter.
 * <p>
 * This gets all processes in the test project and then...
 * 
 * <li>Gets incoming requests activities</li>
 * <li>Gets the <b>first</b> correlation mapping (only ever checks one per
 * activity</li>
 * <li>Runs it thru
 * {@link JavaScriptWsdlPathToXPathConverter#javaScriptWsdlPathToXPath(com.tibco.xpd.implementer.resources.xpdl2.utils.Activity, String, boolean, java.util.Map)}
 * </li>
 * <li>The result of this method is compare <b>with the label of the incoming
 * request activity</b></li>
 * <li>Assumingthat the conversion itself does not fail and the return
 * <b>exactly matches</b> the activity label, then the test will pass.</li>
 * 
 * 
 * 
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 * 
 * @author
 * @since
 */
public class N2_38_XPD3773JavaScriptToXPathConversionTest extends
        AbstractN2BaseResourceTest {

    /**
     * XPD3773JavaScriptToXPathConversionTest
     * 
     * @throws Exception
     */
    public void testXPD3773JavaScriptToXPathConversionTest() throws Exception {
        // Check all files created correctly.
        checkTestFilesCreated();

        StringBuilder failureLog = new StringBuilder();

        /* For each process package */
        for (TestResourceInfo testResourceInfo : getTestResources()) {
            IFile testFile = testResourceInfo.getTestFile();

            WorkingCopy wc = WorkingCopyUtil.getWorkingCopy(testFile);

            if (wc != null && wc.getRootElement() instanceof Package) {
                /* For each process */
                for (Process process : ((Package) wc.getRootElement())
                        .getProcesses()) {
                    checkProcess(process, failureLog);
                }
            }
        }

        if (failureLog.length() != 0) {
            failureLog
                    .insert(0,
                            "JavaScript Correlation mapping to XPath Expression test failed:\n"); //$NON-NLS-1$
            fail(failureLog.toString());
        }

        return;
    }

    private void runTest(String name) {
        IFile testFile = getTestFile(name);

        StringBuilder failureLog = new StringBuilder();

        WorkingCopy wc = WorkingCopyUtil.getWorkingCopy(testFile);

        if (wc != null && wc.getRootElement() instanceof Package) {
            /* For each process */
            for (Process process : ((Package) wc.getRootElement())
                    .getProcesses()) {
                checkProcess(process, failureLog);
            }
        }

        if (failureLog.length() != 0) {
            failureLog
                    .insert(0,
                            "JavaScript Correlaiton mapping to XPath Expression test failed:\n"); //$NON-NLS-1$
            fail(failureLog.toString());
        }
    }

    /**
     * Check correlation data mapping gJavaScript to Xpath conversion for
     * process incoming request activities
     * 
     * @param process
     * @param failureLog
     */
    private void checkProcess(Process process, StringBuilder failureLog) {
        Collection<Activity> activities =
                Xpdl2ModelUtil.getAllActivitiesInProc(process);

        for (Activity activity : activities) {
            if (ReplyActivityUtil.isIncomingRequestActivity(activity)) {
                checkActivity(activity, failureLog);
            }
        }
    }

    /**
     * Check correlation data mappin gJavaScript to Xpath conversion incoming
     * request activity
     * 
     * @param activity
     * @param failureLog
     */
    private void checkActivity(Activity activity, StringBuilder failureLog) {
        ActivityMessageProvider messageProvider =
                ActivityMessageProviderFactory.INSTANCE
                        .getMessageProvider(activity);

        /* Use mesage OUT because it means "OUT OF WSDL DATA INTO PROCESS DATA" */
        Message messageOut = messageProvider.getMessageOut(activity);

        CorrelationDataMappings correlationDataMappings =
                (CorrelationDataMappings) Xpdl2ModelUtil
                        .getOtherElement(messageOut,
                                XpdExtensionPackage.eINSTANCE
                                        .getDocumentRoot_CorrelationDataMappings());

        if (correlationDataMappings != null
                && !correlationDataMappings.getDataMappings().isEmpty()) {
            DataMapping correlationMapping =
                    correlationDataMappings.getDataMappings().get(0);

            String javaScriptSourcePath = correlationMapping.getFormal();

            try {
                Map<String, String> namespaceToPrefixMap =
                        getNamespaceToPrefixMap(activity);
                String xpathExpression =
                        JavaScriptWsdlPathToXPathConverter
                                .javaScriptWsdlPathToXPath(activity,
                                        javaScriptSourcePath,
                                        true,
                                        namespaceToPrefixMap);

                String expectedResult =
                        Xpdl2ModelUtil.getDisplayNameOrName(activity);

                if (!expectedResult.equals(xpathExpression)) {
                    failureLog.append(String
                            .format("** Unexpected XPath for '%1$s:%2$s':\n", //$NON-NLS-1$
                                    Xpdl2ModelUtil
                                            .getDisplayNameOrName(activity
                                                    .getProcess()),
                                    Xpdl2ModelUtil
                                            .getDisplayNameOrName(activity)));
                    failureLog.append(String
                            .format("    Expected: '%1$s'\n    Got: '%2$s'\n", //$NON-NLS-1$
                                    expectedResult,
                                    xpathExpression));
                }

            } catch (Exception e) {
                failureLog
                        .append(String
                                .format("** JavaScriptWsdlPathToXPathConverter.javaScriptWsdlPathToXPath() failed for '%1$s:%2$s':\n", //$NON-NLS-1$
                                        Xpdl2ModelUtil
                                                .getDisplayNameOrName(activity
                                                        .getProcess()),
                                        Xpdl2ModelUtil
                                                .getDisplayNameOrName(activity)));
                failureLog.append(e.getMessage() + "\n"); //$NON-NLS-1$
            }
        }
    }

    /**
     * 
     * @param activity
     * @return The namespace to prefix map from the definition element of WSDL
     *         referenced by activity.
     */
    private Map<String, String> getNamespaceToPrefixMap(Activity activity) {
        Map<String, String> nsprefmap = new HashMap<String, String>();

        Definition wsdlDefinition = Xpdl2WsdlUtil.getWSDLDefinition(activity);

        if (wsdlDefinition != null) {
            /* Get the namespaces defined on the definition element. */
            Map namespaces = wsdlDefinition.getNamespaces();

            if (namespaces != null) {

                for (Object object : namespaces.entrySet()) {
                    Entry<String, String> entry =
                            (Entry<String, String>) object;

                    String namespace = entry.getValue();
                    String prefix = entry.getKey();
                    nsprefmap.put(namespace, prefix);
                }

            }
        }
        return nsprefmap;
    }

    @Override
    protected String getTestName() {
        return "XPD3773JavaScriptToXPathConversionTest"; //$NON-NLS-1$
    }

    @Override
    protected String getTestPlugInId() {
        return "com.tibco.xpd.n2.mappings.validation.test"; //$NON-NLS-1$
    }

    @Override
    protected TestResourceInfo[] getTestResources() {
        TestResourceInfo[] testResources =
                new TestResourceInfo[] {
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Business Objects{bom}/XPD-3773-SubSchema.bom"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Business Objects{bom}/XPD3773.bom"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Business Objects{bom}/XPD-3773-SpecialCases.bom"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Service Descriptors{wsdl}/XPD-3773-SubImportedSchema.xsd"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Service Descriptors{wsdl}/XPD-3773-ImportedSchema.xsd"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Service Descriptors{wsdl}/XPD-3773-UserDefined.wsdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Service Descriptors{wsdl}/XPD-3773-UserDefined-DocLiteral-Qualified.wsdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Service Descriptors{wsdl}/XPD-3773-UserDefined-RPC-Literal.wsdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Process Packages{processes}/XPD-3773-Generated-RPC-Literal.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Process Packages{processes}/XPD-3773-Generated-DOC-Literal.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Process Packages{processes}/XPD-3773-UserDefined-Doc-Literal-Wsdl.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Process Packages{processes}/XPD-3773-UserDefined-Doc-Literal-Qualified-Wsdl.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/XPD3773 JavaScript To XPath Conversion", "XPD-3773/Process Packages{processes}/XPD-3773-SpecialCases.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                };

        return testResources;
    }

}
