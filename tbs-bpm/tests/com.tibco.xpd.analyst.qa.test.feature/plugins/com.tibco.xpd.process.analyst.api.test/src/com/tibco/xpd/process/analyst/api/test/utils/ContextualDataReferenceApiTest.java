/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.process.analyst.api.test.utils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

import junit.framework.ComparisonFailure;

import org.eclipse.compare.internal.patch.LineReader;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;

import com.tibco.xpd.analyst.resources.xpdl2.utils.ProcessDataContextReferenceResolver;
import com.tibco.xpd.core.test.util.AbstractBaseResourceTest;
import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.util.WorkingCopyUtil;
import com.tibco.xpd.xpdl2.Activity;
import com.tibco.xpd.xpdl2.NamedElement;
import com.tibco.xpd.xpdl2.Package;
import com.tibco.xpd.xpdl2.Process;
import com.tibco.xpd.xpdl2.ProcessRelevantData;
import com.tibco.xpd.xpdl2.Transition;
import com.tibco.xpd.xpdl2.resolvers.DataReferenceContext;
import com.tibco.xpd.xpdl2.resolvers.ProcessDataReferenceAndContexts;
import com.tibco.xpd.xpdl2.util.Xpdl2ModelUtil;

/**
 * ContextualDataReferenceTestTest
 * <p>
 * ContextualDataReferenceTestTest - Base test with Business Studio resources
 * class.
 * </p>
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 * 
 * @author
 * @since
 */
public class ContextualDataReferenceApiTest extends AbstractBaseResourceTest {

    /**
     * ContextualDataReferenceTestTest
     * 
     * @throws Exception
     */
    public void testContextualDataReferenceTestTest() throws Exception {
        // Check all files created correctly.
        checkTestFilesCreated();

        testFileReferences("XPD-2542.xpdl"); //$NON-NLS-1$

        return;
    }

    /**
     * @param testFilename
     * @param sb
     */
    @SuppressWarnings("restriction")
    private void testFileReferences(String testFilename) {
        IFile testFile = getTestFile(testFilename);

        StringBuffer sb = new StringBuffer();
        List<String> lines = new ArrayList<String>();

        log(lines, sb, "Testing: %s", testFile.getName()); //$NON-NLS-1$
        log(lines,
                sb,
                "=================================================================="); //$NON-NLS-1$

        WorkingCopy workingCopy = WorkingCopyUtil.getWorkingCopy(testFile);

        Package pkg = (Package) workingCopy.getRootElement();

        ProcessDataContextReferenceResolver resolver =
                new ProcessDataContextReferenceResolver();

        for (Process process : pkg.getProcesses()) {
            testProcessReferences(resolver, process, sb, lines);
        }

        testXPD2542ProcessSpecificContexts(sb, lines, pkg);

        log(lines,
                sb,
                "=================================================================="); //$NON-NLS-1$
        log(lines, sb, "Done"); //$NON-NLS-1$

        System.out.print(sb.toString());

        /* Compare with gold file. */
        IFile goldFile = getTestFile(testFilename + ".gold.txt"); //$NON-NLS-1$

        try {
            InputStream contents = goldFile.getContents();

            BufferedReader bReader =
                    new BufferedReader(new InputStreamReader(contents));

            LineReader lineReader = new LineReader(bReader);

            List readLines = lineReader.readLines();
            int lineNum = 0;
            String fail = null;
            String expected = null;
            String actual = null;

            for (Iterator iterator = readLines.iterator(); iterator.hasNext();) {
                lineNum++;

                String goldLine = (String) iterator.next();
                goldLine = goldLine.trim();

                if (lines.size() >= lineNum) {
                    String testLine = lines.get(lineNum - 1).trim();
                    if (!goldLine.equals(testLine)) {
                        fail =
                                String.format("Output Differs @ line: %d", //$NON-NLS-1$
                                        lineNum);
                        expected = goldLine;
                        actual = testLine;

                        break;
                    }
                } else {
                    fail =
                            String.format("TestLines ran out before Gold Line: %d", //$NON-NLS-1$
                                    lineNum);
                    expected = goldLine;
                    actual = ""; //$NON-NLS-1$
                    break;
                }

            }

            if (fail == null) {
                if (lines.size() > lineNum) {
                    fail =
                            String.format("There are more TestLines(%d) output than there were GoldLines(%d)", //$NON-NLS-1$
                                    readLines.size(),
                                    lineNum);
                    expected = ""; //$NON-NLS-1$
                    actual = ""; //$NON-NLS-1$
                }
            }

            bReader.close();
            contents.close();

            if (fail != null) {
                throw new ComparisonFailure(fail, expected, actual);
            }

        } catch (CoreException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    /**
     * @param resolver
     * @param sb
     * @param lines
     * @param pkg
     */
    private void testXPD2542ProcessSpecificContexts(StringBuffer sb,
            List<String> lines, Package pkg) {

        ProcessDataContextReferenceResolver resolver =
                new ProcessDataContextReferenceResolver();

        log(lines, sb, "  Test Specific Contexts: "); //$NON-NLS-1$
        log(lines,
                sb,
                "  =================================================================="); //$NON-NLS-1$

        Process process = pkg.getProcess("_xrWfcLngEeGQZobD5yusig"); //$NON-NLS-1$

        /**
         * ======================================= MAPPING IN / OUT
         * ========================================
         */
        /* Service invoke. */
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "WebService", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_IN);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "WebService", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_OUT);

        /* message Start / reply / error */
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "CatchMessageEvent", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_OUT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ReplyToCatchMessageEvent", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_IN);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ErrorEvent", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_IN);

        /* Sub-proc invoke. */
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ReusableSubProcess", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_IN);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ReusableSubProcess", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_OUT);

        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ReusableSubProcess", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_SUBPROC_RUNTIME_IDENTIFIER);

        /* Catch signal */
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "CatchSignalEvent", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_OUT);

        /* Java */
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "Java", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_IN);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "Java", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_MAPPING_OUT);

        /**
         * ====================================== Scripts.
         * =======================================
         */
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_INITIATE_SCRIPT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_COMPLETE_SCRIPT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_CANCEL_SCRIPT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_TIMEOUT_SCRIPT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_OPEN_SCRIPT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_SCHEDULE_SCRIPT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_CLOSE_SCRIPT);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_SUBMIT_SCRIPT);

        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ScriptTask", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_SCRIPT_TASK_SCRIPT);

        /**
         * ================================ Task implementations.
         * ==================================
         */
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "ExplicitAssocAndScripts", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_ACTIVITY_IMPLEMENTATION);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "DataBase", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_ACTIVITY_IMPLEMENTATION);
        testSpecificContext(resolver,
                sb,
                lines,
                process,
                "Email", //$NON-NLS-1$
                DataReferenceContext.CONTEXT_ACTIVITY_IMPLEMENTATION);

        log(lines,
                sb,
                "  =================================================================="); //$NON-NLS-1$

    }

    /**
     * @param resolver
     * @param sb
     * @param lines
     * @param process
     * @param activityName
     * @param context
     */
    private void testSpecificContext(
            ProcessDataContextReferenceResolver resolver, StringBuffer sb,
            List<String> lines, Process process, String activityName,
            DataReferenceContext context) {
        Activity activity =
                Xpdl2ModelUtil.getActivityByName(process, activityName);

        List<ProcessRelevantData> refData =
                new ArrayList<ProcessRelevantData>(
                        resolver.getDataReferences(activity, context));
        Collections.sort(refData, new Comparator<ProcessRelevantData>() {

            public int compare(ProcessRelevantData o1, ProcessRelevantData o2) {

                return o1.getName().compareTo(o2.getName());
            }
        });

        StringBuffer sb2 = new StringBuffer();
        for (ProcessRelevantData processRelevantData : refData) {
            if (sb2.length() > 0) {
                sb2.append(", "); //$NON-NLS-1$
            }
            sb2.append(getLabel(processRelevantData));
        }

        log(lines,
                sb,
                "Activity: '%s' Context: '%s' :: %s", //$NON-NLS-1$
                getLabel(activity),
                context.toString(),
                sb2.toString());
    }

    /**
     * @param resolver
     * @param process
     * @param sb
     */
    private void testProcessReferences(
            ProcessDataContextReferenceResolver resolver, Process process,
            StringBuffer sb, List<String> lines) {
        log(lines, sb, "  Test Process: %s", getLabel(process)); //$NON-NLS-1$
        log(lines,
                sb,
                "  =================================================================="); //$NON-NLS-1$

        for (Activity activity : Xpdl2ModelUtil.getAllActivitiesInProc(process)) {
            Collection<ProcessDataReferenceAndContexts> dataReferences =
                    resolver.getDataReferences(activity);

            if (!dataReferences.isEmpty()) {
                log(lines, sb, "    Test Activity: %s", getLabel(activity)); //$NON-NLS-1$
                log(lines,
                        sb,
                        "    ------------------------------------------------------------------"); //$NON-NLS-1$

                logDataReferences(sb, lines, dataReferences);

                log(lines,
                        sb,
                        "    ------------------------------------------------------------------"); //$NON-NLS-1$
            }
        }

        for (Transition transition : Xpdl2ModelUtil
                .getAllTransitionsInProc(process)) {

            Collection<ProcessDataReferenceAndContexts> dataReferences =
                    resolver.getDataReferences(transition);

            if (!dataReferences.isEmpty()) {
                log(lines, sb, "    Test Transition: %s", getLabel(transition)); //$NON-NLS-1$
                log(lines,
                        sb,
                        "    ------------------------------------------------------------------"); //$NON-NLS-1$

                logDataReferences(sb, lines, dataReferences);

                log(lines,
                        sb,
                        "    ------------------------------------------------------------------"); //$NON-NLS-1$
            }
        }

        log(lines,
                sb,
                "  =================================================================="); //$NON-NLS-1$
    }

    /**
     * @param sb
     * @param dataReferences
     */
    private void logDataReferences(StringBuffer sb, List<String> lines,
            Collection<ProcessDataReferenceAndContexts> dataReferences) {
        List<ProcessDataReferenceAndContexts> sortedRefs =
                new ArrayList<ProcessDataReferenceAndContexts>(dataReferences);

        Collections.sort(sortedRefs,
                new Comparator<ProcessDataReferenceAndContexts>() {
                    public int compare(ProcessDataReferenceAndContexts o1,
                            ProcessDataReferenceAndContexts o2) {
                        return getLabel(o1.getReferencedData())
                                .compareTo(getLabel(o2.getReferencedData()));
                    }
                });

        for (ProcessDataReferenceAndContexts dataReference : sortedRefs) {
            logDataReference(sb, lines, dataReference);
        }
    }

    /**
     * @param sb
     * @param dataReference
     */
    private void logDataReference(StringBuffer sb, List<String> lines,
            ProcessDataReferenceAndContexts dataReference) {
        StringBuilder sb2 = new StringBuilder();

        sb2.append(String
                .format("    Referenced Data '%s'. Reference Contexts:", getLabel(dataReference.getReferencedData()))); //$NON-NLS-1$

        List<DataReferenceContext> sortedContexts =
                new ArrayList<DataReferenceContext>(dataReference.getContexts());
        Collections.sort(sortedContexts,
                new Comparator<DataReferenceContext>() {

                    public int compare(DataReferenceContext o1,
                            DataReferenceContext o2) {
                        return o1.getSortingKey().compareTo(o2.getSortingKey());
                    }
                });

        for (DataReferenceContext context : sortedContexts) {
            sb2.append(String.format(" '%s'", context.toString())); //$NON-NLS-1$
        }

        log(lines, sb, sb2.toString());
    }

    private String getLabel(NamedElement element) {
        String displayNameOrName = Xpdl2ModelUtil.getDisplayNameOrName(element);
        if (displayNameOrName != null && displayNameOrName.length() > 0) {
            return displayNameOrName;
        }
        return element.getId();
    }

    private void log(List<String> lines, StringBuffer sb, String format,
            Object... args) {
        String msg = String.format(format, args);
        lines.add(msg);
        sb.append(msg + "\n"); //$NON-NLS-1$

    }

    @Override
    protected String getTestName() {
        return "ContextualDataReferenceTestTest"; //$NON-NLS-1$
    }

    @Override
    protected String getTestPlugInId() {
        return "com.tibco.xpd.process.analyst.api.test"; //$NON-NLS-1$
    }

    @Override
    protected TestResourceInfo[] getTestResources() {
        TestResourceInfo[] testResources =
                new TestResourceInfo[] {
                        new TestResourceInfo(
                                "resources/Contextual Data Reference Api Test", "DataReferences/Generated Business Objects{bom}/org.example.NewWSDLFile.bom"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/Contextual Data Reference Api Test", "DataReferences/Process Packages{processes}/XPD-2542.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/Contextual Data Reference Api Test", "DataReferences/Service Descriptors{wsdl}/NewWSDLFile.wsdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/Contextual Data Reference Api Test", "DataReferences/GoldFiles/XPD-2542.xpdl.gold.txt"), //$NON-NLS-1$ //$NON-NLS-2$
                };

        return testResources;
    }

}
