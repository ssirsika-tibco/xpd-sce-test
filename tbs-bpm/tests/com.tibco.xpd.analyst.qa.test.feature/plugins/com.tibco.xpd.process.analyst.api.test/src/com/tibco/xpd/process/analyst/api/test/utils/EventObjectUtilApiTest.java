/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.process.analyst.api.test.utils;

import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;
import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;

/**
 * EventObjectUtilApiTest
 * <p>
 * EventObjectUtilApiTest - To test ongoing backwards-compatibility of API provided by the class(es):
 * <li>com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil</li>
 * <li>com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes</li> 
 * </p>
 *
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 */
public class EventObjectUtilApiTest extends AbstractApiClassTest {

    public void testApiFor_com_tibco_xpd_processeditor_xpdl2_util_EventObjectUtil() throws Exception {

		String clazzBundleId = "com.tibco.xpd.processeditor.xpdl2"; //$NON-NLS-1$

		Bundle clazzBundle = Platform.getBundle(clazzBundleId);
		assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$
		

        String clazzName = "com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz);  //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample = new String[] { 
            "public com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil()", //$NON-NLS-1$
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample = new String[] { 
            "public static final java.lang.String com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil.CONSTANTPERIOD_SCRIPTGRAMMAR",  //$NON-NLS-1$ 
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample = new String[] { 
            "public static com.tibco.xpd.xpdl2.TriggerResultMessage getTriggerResultMessage(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.Deadline getDeadline(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.ResultError getResultError(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.TriggerConditional getTriggerConditional(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.TriggerTimer getTriggerTimer(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetContinueOnTimeoutFlag(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,boolean)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetEventTriggerTypeCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.EventTriggerType)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetErrorCodeCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.processwidget.adapters.EventTriggerType getEventTriggerType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getChangeEventImplementationCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,java.lang.String,java.lang.String)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.processwidget.adapters.EventFlowType getFlowType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static boolean isAttachedToTask(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.CatchThrow getCatchThrowType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.ImplementationType getEventImplementationType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static boolean getContinueOnTimeoutFlag(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static java.lang.String getExistingSetScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static java.lang.String getLinkEventId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.xpdl2.Activity> getProcessErrorEvents(com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.xpdl2.Activity> getProcessEvents(com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.xpdl2.Activity> getProcessLinkEvents(com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
            "public static java.util.Collection<com.tibco.xpd.xpdl2.Activity> getProcessSignalEvents(com.tibco.xpd.xpdl2.Process,com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetSignalNameCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetEventLinkIdCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,java.lang.String,java.lang.String)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetRuleNameCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetTimerTriggerModeCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.EventAdapter$TimerTriggerMode)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.processwidget.adapters.EventAdapter$TimerTriggerMode getTimerTriggerMode(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static void removeAllDeadlines(org.eclipse.emf.edit.domain.EditingDomain,org.eclipse.emf.common.command.CompoundCommand,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetTriggerTimerDescCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.EventAdapter$TimerTriggerMode,java.lang.String)", //$NON-NLS-1$ 
            "public static java.lang.String getTriggerTimerDesc(com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.EventAdapter$TimerTriggerMode)", //$NON-NLS-1$ 
            "public static java.lang.String getTaskIdAttachedTo(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetInverseCatchThrowOnLinkCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static org.eclipse.emf.common.command.Command getSetNotGeneratedCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdExtension.ConstantPeriod getTimerEventConstantPeriodScript(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
            "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
            "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public native int hashCode()", //$NON-NLS-1$ 
            "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
            "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
            "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
            "public java.lang.String toString()", //$NON-NLS-1$ 
            "public final native void notify()", //$NON-NLS-1$ 
            "public final native void notifyAll()", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample = new String[] { 
            "com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes",  //$NON-NLS-1$
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }
    
    public void testApiFor_com_tibco_xpd_processeditor_xpdl2_util_EventObjectUtil_ReturnCatchThrowTypes() throws Exception {

		String clazzBundleId = "com.tibco.xpd.processeditor.xpdl2"; //$NON-NLS-1$

		Bundle clazzBundle = Platform.getBundle(clazzBundleId);
		assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$
		

        String clazzName = "com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz);  //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample = new String[] {
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample = new String[] { 
            "public static final com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes.CATCH_AND_THROW",  //$NON-NLS-1$  
            "public static final com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes.CATCH_ONLY",  //$NON-NLS-1$  
            "public static final com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes.THROW_ONLY",  //$NON-NLS-1$ 
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample = new String[] { 
            "public static com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes valueOf(java.lang.String)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.processeditor.xpdl2.util.EventObjectUtil$ReturnCatchThrowTypes[] values()", //$NON-NLS-1$ 
            "public final java.lang.String name()", //$NON-NLS-1$ 
            "protected final void finalize()", //$NON-NLS-1$ 
            "public final int hashCode()", //$NON-NLS-1$ 
            "protected final java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
            "public final boolean equals(java.lang.Object)", //$NON-NLS-1$ 
            "public final int compareTo(E)", //$NON-NLS-1$ 
            "public int compareTo(java.lang.Object)", //$NON-NLS-1$ 
            "public java.lang.String toString()", //$NON-NLS-1$ 
            "public static <T> T valueOf(java.lang.Class<T>,java.lang.String)", //$NON-NLS-1$ 
            "public final java.lang.Class<E> getDeclaringClass()", //$NON-NLS-1$ 
            "public final int ordinal()", //$NON-NLS-1$ 
            "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
            "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public native int hashCode()", //$NON-NLS-1$ 
            "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
            "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
            "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
            "public final native void notify()", //$NON-NLS-1$ 
            "public final native void notifyAll()", //$NON-NLS-1$ 
            "public int compareTo(T)", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample = new String[] {
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }
    

    
}

