/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.process.analyst.api.test.utils;

import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;

import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;

/**
 * TaskObjectUtilTest
 * <p>
 * TaskObjectUtilTest - To test ongoing backwards-compatibility of API provided
 * by the class(es):
 * <li>com.tibco.xpd.processeditor.xpdl2.util.TaskObjectUtil</li>
 * <li>com.tibco.xpd.processeditor.xpdl2.util.
 * TaskObjectUtil$LateExecSetDefTaskIconCommand</li>
 * </p>
 * 
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 */
public class TaskObjectUtilTest extends AbstractApiClassTest {

    public void testApiFor_com_tibco_xpd_processeditor_xpdl2_util_TaskObjectUtil()
            throws Exception {

        String clazzBundleId = "com.tibco.xpd.processeditor.xpdl2"; //$NON-NLS-1$

        Bundle clazzBundle = Platform.getBundle(clazzBundleId);
        assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$

        String clazzName =
                "com.tibco.xpd.processeditor.xpdl2.util.TaskObjectUtil"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz); //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample =
                new String[] { "public com.tibco.xpd.processeditor.xpdl2.util.TaskObjectUtil()", //$NON-NLS-1$
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample =
                new String[] {
                        "public static final java.lang.String com.tibco.xpd.processeditor.xpdl2.util.TaskObjectUtil.UNKNOWN_REF_ID", //$NON-NLS-1$  
                        "public static final java.lang.String com.tibco.xpd.processeditor.xpdl2.util.TaskObjectUtil.USER_TASK_ATTR", //$NON-NLS-1$  
                        "public static final java.lang.String com.tibco.xpd.analyst.resources.xpdl2.utils.TaskObjectUtil.FORMS_KIND", //$NON-NLS-1$  
                        "public static final java.lang.String com.tibco.xpd.analyst.resources.xpdl2.utils.TaskObjectUtil.FORM_SCHEMA", //$NON-NLS-1$ 
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample =
                new String[] {
                        "public static java.util.Set<com.tibco.xpd.processwidget.adapters.ActivityMarkerType> getMarkers(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.ActivitySet getActivitySet(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.LoopMultiInstance getLoopMultiInstance(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.processwidget.ProcessWidget$ProcessWidgetType getProcessType(com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.MIFlowConditionType getMIFlowCondition(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.MIOrderingType getMIOrdering(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdExtension.UserTaskScripts getUserTaskScripts(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdExtension.AuditEvent getAuditEvent(com.tibco.xpd.xpdExtension.AuditEventType,com.tibco.xpd.xpdExtension.Audit)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdExtension.Audit getAudit(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.util.Collection<com.tibco.xpd.xpdl2.Activity> getAttachedEvents(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetMarkersCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,java.util.Set)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetTaskTypeCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.TaskType)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.processwidget.adapters.TaskType getTaskType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetPerformersCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,org.eclipse.emf.ecore.EObject[])", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.ecore.EObject[] getActivityPerformers(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.ecore.EObject[] getActivityPerformers(com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetSubprocessCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
                        "public static java.lang.String getSubprocessDescription(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getSubprocessLocationDescription(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static boolean getSubprocessIsTransactional(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetSubProcessIsTransactionalCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,boolean)", //$NON-NLS-1$ 
                        "public static java.lang.String getTaskImplementationExtensionId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getTaskTypeIconRegistryId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetNotGeneratedCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.processwidget.adapters.TaskType getTaskTypeStrict(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getUserTaskSetFormFileFromPickerCommand(org.eclipse.swt.widgets.Shell,org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getUserTaskSetFormImplementationCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.xpdExtension.FormImplementation)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getUserTaskSetFormImplementationCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.xpdExtension.FormImplementationType,java.lang.String)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getUserTaskSetPageflowProcessFromPickerCommand(org.eclipse.swt.widgets.Shell,org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetTaskTypeCommandEx(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.TaskType,com.tibco.xpd.xpdl2.Process,boolean,boolean,boolean)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetTaskTypeCommandEx(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.TaskType,com.tibco.xpd.xpdl2.Process,boolean,boolean)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetSubProcessIsChainedCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,boolean)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.ecore.EObject getSubProcessOrInterface(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.ecore.EObject getSubProcessOrInterface(com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.xpdl2.resources.Xpdl2WorkingCopyImpl)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getChangeTaskImplementationCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.TaskType,java.lang.String,java.lang.String)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetBusinessProcessCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
                        "public static boolean isRemoteURL(java.lang.String)", //$NON-NLS-1$ 
                        "public static java.lang.String getUserTaskFormURIFromPageflowProcess(com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.ImplementationType getTaskImplementationType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.LoopStandard getStandardLoop(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.Expression getAuditScriptExpression(com.tibco.xpd.xpdExtension.AuditEventType,com.tibco.xpd.xpdExtension.Audit)", //$NON-NLS-1$ 
                        "public static boolean getSubprocessIsRequireNew(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getParticipantNameForPassedId(java.lang.String,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
                        "public static boolean isAliasValueASystemParticipant(java.lang.String,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
                        "public static java.lang.String getTaskTypeImplementationName(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.util.List<com.tibco.xpd.xpdl2.FormalParameter> getSubProcessStartParams(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.util.List<com.tibco.xpd.xpdl2.FormalParameter> getSubProcessStartParams(com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.xpdl2.ModeType)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.Participant getParticipantForExternalReference(com.tibco.xpd.xpdl2.Activity,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.CompoundCommand getChangeTaskServiceImpl(org.eclipse.emf.edit.domain.EditingDomain,java.lang.String,java.lang.String,com.tibco.xpd.xpdl2.Task)", //$NON-NLS-1$ 
                        "public static boolean isTaskUsingDefaultIconForType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.CompoundCommand getChangeTaskSendImp(org.eclipse.emf.edit.domain.EditingDomain,java.lang.String,java.lang.String,com.tibco.xpd.xpdl2.Task)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.CompoundCommand getChangeTaskReceiveImpl(org.eclipse.emf.edit.domain.EditingDomain,java.lang.String,java.lang.String,com.tibco.xpd.xpdl2.Task)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetCloseUserTaskScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingUserTaskScriptGrammarId(org.eclipse.emf.ecore.EStructuralFeature,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetOpenUserTaskScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetScheduleUserTaskScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetRescheduleUserTaskScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetInitiatedAuditScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingAuditScriptGrammarId(com.tibco.xpd.xpdExtension.AuditEventType,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetCompletedAuditScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetDeadlineExpiredAuditScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetCancelledAuditScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingPerformerScriptGrammarId(com.tibco.xpd.xpdl2.ProcessRelevantData)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingQueryParticipantScriptGrammarId(com.tibco.xpd.xpdl2.Participant)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingQueryParticipantPerformerScriptGrammarId(com.tibco.xpd.xpdl2.DataField)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetSubmitUserTaskScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.ExtendedAttribute getExtendedAttributeByName(com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.ExtendedAttribute getExtendedAttributeByName(com.tibco.xpd.xpdl2.Transition,java.lang.String)", //$NON-NLS-1$ 
                        "public static java.lang.Object getPerformerDescriptionStatic(org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.Participant createParticipantFromOMEntity(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,org.eclipse.emf.ecore.EObject)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetSubProcessIsRequireNewCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,boolean)", //$NON-NLS-1$ 
                        "public static boolean getSubprocessIsChained(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetMILoopExpressionScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetComplexExitScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetAdditionalInstancesMIScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getExistingSetStdLoopScriptGrammarId(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.TestTimeType getStdTestTime(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.math.BigInteger getStdLoopMaximum(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getDefaultIconForTaskType(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static void appendSetResourcePatternsCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.processwidget.adapters.TaskType,org.eclipse.emf.common.command.CompoundCommand)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command selectOrClearActivityParticipantCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Process,com.tibco.xpd.xpdl2.Activity,boolean)", //$NON-NLS-1$ 
                        "public static java.util.List<org.eclipse.emf.ecore.EObject> selectActivityPerformers(com.tibco.xpd.xpdl2.Process,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static java.lang.String getJspPage(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getSetUserTaskJspPageCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,java.lang.String)", //$NON-NLS-1$ 
                        "public static java.lang.String getUserTaskFormURIFromFormFile(org.eclipse.core.resources.IFile)", //$NON-NLS-1$ 
                        "public static org.eclipse.core.resources.IFile getUserTaskFormFileFromPicker(org.eclipse.swt.widgets.Shell,com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.emf.common.command.Command getUserTaskSetPageflowProcessCommand(org.eclipse.emf.edit.domain.EditingDomain,com.tibco.xpd.xpdl2.Activity,com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.Process getUserTaskPageflowProcess(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdExtension.FormImplementation getUserTaskFormImplementation(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static org.eclipse.core.resources.IFile getUserTaskFormFile(com.tibco.xpd.xpdl2.Activity)", //$NON-NLS-1$ 
                        "public static com.tibco.xpd.xpdl2.Process getUserTaskPageFlowProcess(com.tibco.xpd.xpdl2.Activity,org.eclipse.core.resources.IProject)", //$NON-NLS-1$ 
                        "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
                        "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public native int hashCode()", //$NON-NLS-1$ 
                        "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
                        "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
                        "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
                        "public java.lang.String toString()", //$NON-NLS-1$ 
                        "public final native void notify()", //$NON-NLS-1$ 
                        "public final native void notifyAll()", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample =
                new String[] { "com.tibco.xpd.processeditor.xpdl2.util.TaskObjectUtil$LateExecSetDefTaskIconCommand", //$NON-NLS-1$
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }

    public void testApiFor_com_tibco_xpd_processeditor_xpdl2_util_TaskObjectUtil_LateExecSetDefTaskIconCommand()
            throws Exception {

        String clazzBundleId = "com.tibco.xpd.processeditor.xpdl2"; //$NON-NLS-1$

        Bundle clazzBundle = Platform.getBundle(clazzBundleId);
        assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$

        String clazzName =
                "com.tibco.xpd.processeditor.xpdl2.util.TaskObjectUtil$LateExecSetDefTaskIconCommand"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz); //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample = new String[] {};
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample =
                new String[] {
                        "protected java.util.List<org.eclipse.emf.common.command.Command> org.eclipse.emf.common.command.CompoundCommand.commandList", //$NON-NLS-1$  
                        "public static final int org.eclipse.emf.common.command.CompoundCommand.LAST_COMMAND_ALL", //$NON-NLS-1$  
                        "public static final int org.eclipse.emf.common.command.CompoundCommand.MERGE_COMMAND_ALL", //$NON-NLS-1$  
                        "protected int org.eclipse.emf.common.command.CompoundCommand.resultIndex", //$NON-NLS-1$  
                        "protected boolean org.eclipse.emf.common.command.AbstractCommand.isPrepared", //$NON-NLS-1$  
                        "protected boolean org.eclipse.emf.common.command.AbstractCommand.isExecutable", //$NON-NLS-1$  
                        "protected java.lang.String org.eclipse.emf.common.command.AbstractCommand.description", //$NON-NLS-1$  
                        "protected java.lang.String org.eclipse.emf.common.command.AbstractCommand.label", //$NON-NLS-1$ 
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample =
                new String[] {
                        "protected org.eclipse.emf.common.command.Command createCommand(org.eclipse.emf.edit.domain.EditingDomain,java.lang.Object)", //$NON-NLS-1$ 
                        "public boolean canExecute()", //$NON-NLS-1$ 
                        "public void execute()", //$NON-NLS-1$ 
                        "public org.eclipse.emf.edit.domain.EditingDomain getEditingDomain()", //$NON-NLS-1$ 
                        "public java.lang.Object getContextObject()", //$NON-NLS-1$ 
                        "public java.lang.String toString()", //$NON-NLS-1$ 
                        "public void append(org.eclipse.emf.common.command.Command)", //$NON-NLS-1$ 
                        "public boolean isEmpty()", //$NON-NLS-1$ 
                        "public void undo()", //$NON-NLS-1$ 
                        "public java.util.Collection<?> getResult()", //$NON-NLS-1$ 
                        "public java.lang.String getLabel()", //$NON-NLS-1$ 
                        "public java.lang.String getDescription()", //$NON-NLS-1$ 
                        "public void dispose()", //$NON-NLS-1$ 
                        "public boolean canUndo()", //$NON-NLS-1$ 
                        "public void redo()", //$NON-NLS-1$ 
                        "public org.eclipse.emf.common.command.Command unwrap()", //$NON-NLS-1$ 
                        "protected boolean prepare()", //$NON-NLS-1$ 
                        "public java.util.Collection<?> getAffectedObjects()", //$NON-NLS-1$ 
                        "public boolean appendAndExecute(org.eclipse.emf.common.command.Command)", //$NON-NLS-1$ 
                        "public boolean appendIfCanExecute(org.eclipse.emf.common.command.Command)", //$NON-NLS-1$ 
                        "public java.util.List<org.eclipse.emf.common.command.Command> getCommandList()", //$NON-NLS-1$ 
                        "protected java.util.Collection<?> getMergedAffectedObjectsCollection()", //$NON-NLS-1$ 
                        "protected java.util.Collection<?> getMergedResultCollection()", //$NON-NLS-1$ 
                        "public int getResultIndex()", //$NON-NLS-1$ 
                        "public void setLabel(java.lang.String)", //$NON-NLS-1$ 
                        "public void setDescription(java.lang.String)", //$NON-NLS-1$ 
                        "public org.eclipse.emf.common.command.Command chain(org.eclipse.emf.common.command.Command)", //$NON-NLS-1$ 
                        "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
                        "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
                        "public native int hashCode()", //$NON-NLS-1$ 
                        "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
                        "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
                        "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
                        "public final native void notify()", //$NON-NLS-1$ 
                        "public final native void notifyAll()", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample =
                new String[] { "org.eclipse.emf.common.command.AbstractCommand$NonDirtying", //$NON-NLS-1$
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }

}
