/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.process.analyst.api.test.utils;

import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;
import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;

/**
 * Xpdl2ProcessorUtilApiTest
 * <p>
 * Xpdl2ProcessorUtilApiTest - To test ongoing backwards-compatibility of API provided by the class(es):
 * <li>com.tibco.xpd.analyst.resources.xpdl2.utils.Xpdl2ProcessorUtil</li>
 * <li>com.tibco.xpd.analyst.resources.xpdl2.utils.Xpdl2ProcessorUtil$FragmentAdapter</li> 
 * </p>
 *
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 */
public class Xpdl2ProcessorUtilApiTest extends AbstractApiClassTest {

    public void testApiFor_com_tibco_xpd_analyst_resources_xpdl2_utils_Xpdl2ProcessorUtil() throws Exception {

		String clazzBundleId = "com.tibco.xpd.analyst.resources.xpdl2"; //$NON-NLS-1$

		Bundle clazzBundle = Platform.getBundle(clazzBundleId);
		assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$
		

        String clazzName = "com.tibco.xpd.analyst.resources.xpdl2.utils.Xpdl2ProcessorUtil"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz);  //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample = new String[] { 
            "public com.tibco.xpd.analyst.resources.xpdl2.utils.Xpdl2ProcessorUtil()", //$NON-NLS-1$
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample = new String[] { 
            "public static final org.eclipse.emf.common.util.URI com.tibco.xpd.analyst.resources.xpdl2.utils.Xpdl2ProcessorUtil.XML_URI",  //$NON-NLS-1$ 
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample = new String[] { 
            "public static java.lang.String getResourceString(com.tibco.xpd.xpdl2.Package)", //$NON-NLS-1$ 
            "public static boolean isPageflow(com.tibco.xpd.fragments.IFragment)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.Package getFragmentPackage(java.lang.String)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.Package getFragmentPackage(com.tibco.xpd.fragments.IFragment)", //$NON-NLS-1$ 
            "public static com.tibco.xpd.xpdl2.Process getFragmentProcess(com.tibco.xpd.xpdl2.Package)", //$NON-NLS-1$ 
            "public static java.util.List<org.eclipse.emf.ecore.EObject> getProcessElements(com.tibco.xpd.xpdl2.Process)", //$NON-NLS-1$ 
            "public static java.util.Collection<org.eclipse.draw2d.geometry.Rectangle> getFeedbackRectangles(com.tibco.xpd.fragments.IFragment)", //$NON-NLS-1$ 
            "public static java.util.HashMap<java.lang.String, java.lang.String> getDestinationEnvs(com.tibco.xpd.fragments.IFragment)", //$NON-NLS-1$ 
            "public static java.util.Collection<org.eclipse.emf.ecore.EObject> getFragmentDropObjects(java.lang.String)", //$NON-NLS-1$ 
            "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
            "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public native int hashCode()", //$NON-NLS-1$ 
            "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
            "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
            "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
            "public java.lang.String toString()", //$NON-NLS-1$ 
            "public final native void notify()", //$NON-NLS-1$ 
            "public final native void notifyAll()", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample = new String[] { 
            "com.tibco.xpd.analyst.resources.xpdl2.utils.Xpdl2ProcessorUtil$FragmentAdapter",  //$NON-NLS-1$
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }
    
    public void testApiFor_com_tibco_xpd_analyst_resources_xpdl2_utils_Xpdl2ProcessorUtil_FragmentAdapter() throws Exception {

		String clazzBundleId = "com.tibco.xpd.analyst.resources.xpdl2"; //$NON-NLS-1$

		Bundle clazzBundle = Platform.getBundle(clazzBundleId);
		assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$
		

        String clazzName = "com.tibco.xpd.analyst.resources.xpdl2.utils.Xpdl2ProcessorUtil$FragmentAdapter"; //$NON-NLS-1$

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz);  //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample = new String[] {
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample = new String[] {
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample = new String[] { 
            "public org.eclipse.emf.common.notify.Notifier getTarget()", //$NON-NLS-1$ 
            "public void notifyChanged(org.eclipse.emf.common.notify.Notification)", //$NON-NLS-1$ 
            "public void setTarget(org.eclipse.emf.common.notify.Notifier)", //$NON-NLS-1$ 
            "public org.eclipse.emf.edit.domain.EditingDomain getEditingDomain()", //$NON-NLS-1$ 
            "public boolean isAdapterForType(java.lang.Object)", //$NON-NLS-1$ 
            "protected void finalize() throws java.lang.Throwable", //$NON-NLS-1$ 
            "public final void wait() throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final void wait(long,int) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public final native void wait(long) throws java.lang.InterruptedException", //$NON-NLS-1$ 
            "public native int hashCode()", //$NON-NLS-1$ 
            "public final native java.lang.Class<?> getClass()", //$NON-NLS-1$ 
            "protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException", //$NON-NLS-1$ 
            "public boolean equals(java.lang.Object)", //$NON-NLS-1$ 
            "public java.lang.String toString()", //$NON-NLS-1$ 
            "public final native void notify()", //$NON-NLS-1$ 
            "public final native void notifyAll()", //$NON-NLS-1$
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample = new String[] { 
            "org.eclipse.emf.common.notify.Adapter$Internal",  //$NON-NLS-1$
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }
    

    
}

