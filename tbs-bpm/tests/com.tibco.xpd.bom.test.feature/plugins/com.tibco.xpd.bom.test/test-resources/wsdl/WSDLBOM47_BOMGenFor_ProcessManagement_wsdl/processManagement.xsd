<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- edited with XMLSpy v2012 rel. 2 sp1 (x64) (http://www.altova.com) by Adrian Hussey (Tibco Software Limited) -->
<xsd:schema xmlns:pm="http://www.tibco.com/bx/2009/management/processManagerType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.tibco.com/bx/2009/management/processManagerType">
	<!-- GENERIC TYPES and ELEMENTS -->
	<xsd:element name="itemCount" type="xsd:int">
		<xsd:annotation>
			<xsd:documentation>Element (mostly response) for many operations that return a count of certain items.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="success" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Element (mostly response) for many operations that return a success indication.

This is a work-around so that WSDL 1.1 allows fault message(s) to be declared and thrown.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="isSet" type="xsd:boolean">
		<xsd:annotation>
			<xsd:documentation>Element (mostly response) for many operations that return a true/false indication.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="NameTypePair">
		<xsd:annotation>
			<xsd:documentation>Type to describe a name/type pair.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the item.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="type" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Data type of the item.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="NameValuePair">
		<xsd:annotation>
			<xsd:documentation>Type to describe a name/value pair.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="value" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Value</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- BASIC PROCESS-RELATED TYPES and ELEMENTS -->
	<xsd:element name="activityInstanceStatus" type="pm:ActivityInstanceStatus">
		<xsd:annotation>
			<xsd:documentation>Response element for getActivityInstanceStatus operation.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ActivityInstanceStatus">
		<xsd:annotation>
			<xsd:documentation>Type to summarize the current status of an instance of an activity in a process.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="activityID" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Unique ID assigned to the activity, for example XPDL ID assigned by BusinessStudio's BPMN Process Editor.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="activityName" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Optional name of the activity</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="activityState" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Current state of an activity instance, for example WAITING</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="startTime" nillable="true" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>When the activity instance starts execution</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="completionTime" nillable="true" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>When the activity instance finishes execution</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="deadlineExpirationTime" nillable="true" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>A timer intermediate event can be attached to any activity. This field keeps track of when time-out would occur if the activity did not complete.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="AttributeType">
		<xsd:annotation>
			<xsd:documentation>Enumeration values used to tag process template attributes and process instance attributes into different categories. 

(Do not delete or re-position any of the enumeration values. If a value must be removed, simply replace it with a "dummy" value.)</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="FILTERABLE"/>
			<xsd:enumeration value="SORTABLE"/>
			<xsd:enumeration value="DISPLAYABLE"/>
			<xsd:enumeration value="HALT_ONLY"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="BasicProcessTemplate">
		<xsd:annotation>
			<xsd:documentation>Type to describe a process template.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="processQName" type="pm:QualifiedProcessName">
				<xsd:annotation>
					<xsd:documentation>Fully qualified name of the process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="description" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Description of the process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="basicProcessTemplates">
		<xsd:annotation>
			<xsd:documentation>Response element for listProcessTemplates operation, returning a list of process templates.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element maxOccurs="unbounded" minOccurs="0" name="basicProcessTemplate" type="pm:BasicProcessTemplate">
					<xsd:annotation>
						<xsd:documentation>Basic process template descriptions.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="InstanceAttribute">
		<xsd:annotation>
			<xsd:documentation>Type to describe a process instance attribute.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="pm:NameTypePair">
				<xsd:sequence>
					<xsd:element name="processQName" type="pm:QualifiedProcessName">
						<xsd:annotation>
							<xsd:documentation>Fully qualified name of the parent process template.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="viewtype" nillable="true" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>View type of the attribute, as a combination of the values FILTERABLE (1), SORTABLE (2), DISPLAYABLE (3) and HALT_ONLY (4)

For example, the value "23" indicates that the attribute is SORTABLE and DISPLAYABLE, but not FILTERABLE.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="instanceAttributes">
		<xsd:annotation>
			<xsd:documentation>Response element for the listProcessInstanceAttributes and listSetofProcessInstanceAttributes operations, returning a list of process instance attributes.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element maxOccurs="unbounded" minOccurs="0" name="instanceAttribute" type="pm:InstanceAttribute">
					<xsd:annotation>
						<xsd:documentation>Details of the process instance attributes associated with the process template(s) specified in the request.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="operationInfo" type="pm:OperationInfo">
		<xsd:annotation>
			<xsd:documentation>Response element for getStarterOperationInfo operation.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="OperationInfo">
		<xsd:annotation>
			<xsd:documentation>Type to describe a starter operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="operationName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the starter operation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="parameters" nillable="true" type="pm:TemplateAttributes">
				<xsd:annotation>
					<xsd:documentation>List of parameters for this starter operation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="page" type="pm:Page">
		<xsd:annotation>
			<xsd:documentation>Response element for queryFirstPage, queryPreviousPage, queryNextPage and queryLastPage operations.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="Page">
		<xsd:annotation>
			<xsd:documentation>Type to describe a page of data.</xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<xsd:element name="processTemplates" nillable="true" type="pm:ProcessTemplates">
				<xsd:annotation>
					<xsd:documentation>List of process templates.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="processInstances" nillable="true" type="pm:ProcessInstances">
				<xsd:annotation>
					<xsd:documentation>List of process instances.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="pagingID" type="xsd:int">
		<xsd:annotation>
			<xsd:documentation>Request element for many operations supporting paging of query result sets. 

A pagingID identifies a particular set of data that can be paged (like a database cursor).</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="processID" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Unique ID assigned to a process instance.

This element is the request or response element for many operations.

</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ProcessInstance">
		<xsd:annotation>
			<xsd:documentation>Type to describe a process instance.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" name="processQName" type="pm:QualifiedProcessName">
				<xsd:annotation>
					<xsd:documentation>Fully qualified name of the process template from which the process instance was created.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="id" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Unique ID assigned to the process instance.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="state" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Current state of the process instance - for example ACTIVE or SUSPENDED.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="startTime" nillable="true" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>Date/time when the process instance first became active.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="completionTime" nillable="true" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>Date/time the process instance reached one of the terminal states.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="priority" nillable="true" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>Priority of the process instance, used to schedule its execution.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="waitingWorkCount" nillable="true" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>Count of the number of user task instances waiting for a response from Business Resource Management (BRM).

This indirectly provides a count of the number of outstanding work items associated with the process instance.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="parentProcessID" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Unique ID of the parent process instance, in cases where the process instance was created via a sub-process call.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="userID" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>ID of the user who sent the request that results in the creation of the process instance. This ID is determined from the user/security-context.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="failedActivityName" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the failed activity.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="activityFaultName" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Activity fault name.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="activityFaultData" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Activity fault data.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="customAttributes" nillable="true">
				<xsd:annotation>
					<xsd:documentation>List of user-defined attributes.</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element maxOccurs="unbounded" minOccurs="0" name="customAttribute" type="pm:NameValuePair">
							<xsd:annotation>
								<xsd:documentation>Attribute definitions.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="processInstances" type="pm:ProcessInstances">
		<xsd:annotation>
			<xsd:documentation>Response element for listProcessInstances, queryProcessInstances and queryProcessInstancesAlt operations.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ProcessInstances">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of process instances.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="processInstance" type="pm:ProcessInstance">
				<xsd:annotation>
					<xsd:documentation>Details of process instances.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="processInstanceSummary">
		<xsd:annotation>
			<xsd:documentation>Response element for getProcessInstanceSummary operation, to capture the summary information about a process instance. 

This operation is mainly used for debugging purposes.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="summary" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Summary of all information relevant to the process instance (as a formatted string), including a snapshot of all process variables' values.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="ProcessTemplate">
		<xsd:annotation>
			<xsd:documentation>Type to describe a process template.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="basicTemplate" type="pm:BasicProcessTemplate">
				<xsd:annotation>
					<xsd:documentation>Basic/core attributes of this process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="state" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>State of the process template, for example ACTIVE.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="priority" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Default scheduling priority to be assigned to process instances created from this process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="creationTime" nillable="true" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>Date/time when this process template was created.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="processTemplates" type="pm:ProcessTemplates">
		<xsd:annotation>
			<xsd:documentation>Response element for queryProcessTemplates and queryProcessTemplatesAlt operations.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ProcessTemplates">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of process templates.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="processTemplate" type="pm:ProcessTemplate">
				<xsd:annotation>
					<xsd:documentation>Details of process templates.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="qualifiedProcessNames" type="pm:QualifiedProcessNames">
		<xsd:annotation>
			<xsd:documentation>qualified process names</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="QualifiedProcessNames">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of qualified process names.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" ref="pm:qualifiedProcessName">
				<xsd:annotation>
					<xsd:documentation>Details of qualified process name.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="qualifiedProcessName" type="pm:QualifiedProcessName">
		<xsd:annotation>
			<xsd:documentation>Element (mostly request) for many operations that require the fully qualified name of a process template.

Wildcard characters can be used when specifying moduleName or processName, as follows:

- An asterisk '*' can be used to match zero or more characters. 
- A question mark '?' can be used to match any single character.

- A preceding backslash can be used to escape a wild-card character (i.e. to match a '*' or '?' character).
- Using double backslash escapes the escape character (i.e. to match the backslash character).

version must either specify an exact version, or can be left blank to return information about all versions.

The response message will then include data for all process templates whose fully qualified names match the defined input criteria.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="QualifiedProcessName">
		<xsd:annotation>
			<xsd:documentation>Type to describe the fully qualified name of a process template.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="moduleName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the module to which the process template belongs.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="processName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="version" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>OSGi-style version number of the process template. 

(This version number is the same as that of the module.)</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="queryString" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Request element for queryProcessInstanceCount and queryProcessTemplateCount operations, which require a query string (in SQL syntax) as their input.

The query can be either a full SQL query string, or just the WHERE clause. If a full query string is used, the "FROM process" clause should be included.

(The underlying code knows whether to count process templates or process instances, depending on the calling operation.)</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="starterOperation" type="pm:StarterOperation">
		<xsd:annotation>
			<xsd:documentation>Request element for any operation, such as getStarterOperationInfo, that needs starter operation information</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="StarterOperation">
		<xsd:annotation>
			<xsd:documentation>Type to describe a starter operation. 

A starter operation is a way for an external (to Process Manager) application to create a process instance from a process template that has one and only one starter event, which must be a none starter event. </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="processQName" type="pm:QualifiedProcessName">
				<xsd:annotation>
					<xsd:documentation>Fully qualified name of the process template from which the process instance is to be created.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="operation" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the starter operation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="starterOperations">
		<xsd:annotation>
			<xsd:documentation>Response element for listStarterOperations operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element maxOccurs="unbounded" minOccurs="0" name="starterOperation" type="pm:StarterOperation">
					<xsd:annotation>
						<xsd:documentation>Details of all defined starter operations.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="TemplateAttribute">
		<xsd:annotation>
			<xsd:documentation>Type to describe a process template attribute.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="pm:NameTypePair"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="templateAttributes" type="pm:TemplateAttributes">
		<xsd:annotation>
			<xsd:documentation>Response element for listProcessTemplateAttributes operation, returning a list of process template attributes</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="TemplateAttributes">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of template attributes.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="templateAttribute" type="pm:TemplateAttribute">
				<xsd:annotation>
					<xsd:documentation>Details of template attributes.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ELEMENTS SPECIFIC TO INDIVIDUAL OPERATIONS -->
	<xsd:element name="createProcessInstanceInput">
		<xsd:annotation>
			<xsd:documentation>Request element for createProcessInstance operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processQName" type="pm:QualifiedProcessName">
					<xsd:annotation>
						<xsd:documentation>Qualified name of the process template from which a process instance is to be created.

A starter operation is derived from a process template's none starter event. This element names the module to which the process template belongs.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="operationName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Name of the starter operation used to create the process instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="parameterMap">
					<xsd:annotation>
						<xsd:documentation>Details of the parameters associated with this starter operation.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element maxOccurs="unbounded" minOccurs="0" name="parameter" type="pm:NameValuePair">
								<xsd:annotation>
									<xsd:documentation>Details of parameters (as name/value pairs).</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getActivityInstanceStatusInput">
		<xsd:annotation>
			<xsd:documentation>Request element for getActivityInstanceStatus operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processID" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Unique ID of the process instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="activityName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Name of the activity in this process instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getParameterValueInput">
		<xsd:annotation>
			<xsd:documentation>Request element for getParameterValue operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processID" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Unique ID of the process instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="parameterName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Name of the parameter whose value is to be retrieved.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getParameterValueOutput">
		<xsd:annotation>
			<xsd:documentation>Response element for getParameterValue operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="parameterValue" type="xsd:anyType">
					<xsd:annotation>
						<xsd:documentation>Parameter value.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="getProcessInstanceStatusOutput" type="pm:ProcessInstance">
		<xsd:annotation>
			<xsd:documentation>Response element for getProcessInstanceStatus operation, to summarize the current status of one process instance. 

Note that:

-  getProcessInstanceStatus is a convenience operation. It is possible to obtain the same data by calling queryProcessInstances with more complex inputs. 

- The ProcessInstance type is re-used. Some elements (namely, customAttributes) would never contain any data when returned in a getProcessInstanceStatus call.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="getAvailableProcessInstanceVariablesInput">
		<xsd:annotation>
			<xsd:documentation>Request element for getAvailableProcessInstanceVariables operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processID" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Unique ID of the process instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element minOccurs="0" name="variableName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>(Optional) Name of the variable for which a value should be returned.

If this parameter is omitted, data is returned for all variables available to the specified process.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="availableProcessInstanceVariables">
		<xsd:annotation>
			<xsd:documentation>Response element for getAvailableProcessInstanceVariables operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element maxOccurs="unbounded" minOccurs="0" name="variable">
					<xsd:annotation>
						<xsd:documentation>Variable definitions.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="pm:NameValuePair">
								<xsd:sequence>
									<xsd:element name="Type" type="xsd:string">
										<xsd:annotation>
											<xsd:documentation>Data type of the variable.</xsd:documentation>
										</xsd:annotation>
									</xsd:element>
								</xsd:sequence>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="listProcessInstanceAttributesInput">
		<xsd:annotation>
			<xsd:documentation>Request element for listProcessInstanceAttributes operation.

Attributes include process parameters, process data fields and pre-defined/system variables. 

These attributes can also be used in process instance queries - see queryProcessInstances.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processQName" type="pm:QualifiedProcessName">
					<xsd:annotation>
						<xsd:documentation>Criteria identifying the process template(s) for which process instance attributes are to be listed.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="attributeType" type="pm:AttributeType">
					<xsd:annotation>
						<xsd:documentation>(Optional) Enumerated value which, if specified, filters the result set to include only those attributes which belong to the specified type (FILTERABLE, SORTABLE, DISPLAYABLE or HALT_ONLY).</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="listSetofProcessInstanceAttributesInput">
		<xsd:annotation>
			<xsd:documentation>Request element for listSetofProcessInstanceAttributes operation.

Attributes include process parameters, process data fields and pre-defined/system variables. 

These attributes can also be used in process instance queries - see queryProcessInstances.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="pm:qualifiedProcessNames">
					<xsd:annotation>
						<xsd:documentation>List of qualified process names.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="attributeType" type="pm:AttributeType">
					<xsd:annotation>
						<xsd:documentation>(Optional) Enumerated value which, if specified, filters the result set to include only those attributes which belong to the specified type (FILTERABLE, SORTABLE, DISPLAYABLE or HALT_ONLY).</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="listProcessTemplateAttributesInput">
		<xsd:annotation>
			<xsd:documentation>Request element for listProcessTemplateAttributes operation.

Process template attributes, which are pre-defined variables and are the same for all process templates, can be used in process template queries - see the queryProcessTemplates operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="attributeType" type="pm:AttributeType">
					<xsd:annotation>
						<xsd:documentation>(Optional) Enumerated value which, if specified, filters the result set to include only those attributes which belong to the specified type (FILTERABLE, SORTABLE or DISPLAYABLE).</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="queryProcessInstancesAltInput">
		<xsd:annotation>
			<xsd:documentation>Request element for queryProcessInstancesAlt operation. 

This operation works the same way as queryProcessInstances, except the query string is broken into multiple parts. 

See also: listProcessInstanceAttributes operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="select" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Attributes to be selected for each process instance in the result set. The "FROM process" clause should be included.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="where" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Filter criteria to be used in the query.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="orderBy" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Sorting/grouping criteria to be used in the query.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="pageSize" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Page size to be used to return the list of process instances. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

&gt;0: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="attributeMap" type="pm:TemplateAttributes">
					<xsd:annotation>
						<xsd:documentation>(Optional) Specification of the types of user-defined attributes to be included in the query.

Specifying this parameter will make the query more efficient.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="queryProcessInstancesInput">
		<xsd:annotation>
			<xsd:documentation>Request element for queryProcessInstances, queryProcessInstancesAlt and queryHaltedProcessInstances operations. 

See also: listProcessInstanceAttributes operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="query" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Full (SQL syntax) query string. The "FROM process" clause should be included in the query.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="pageSize" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Page size to be used to return the list of process instances. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

positive integer: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="attributeMap" type="pm:TemplateAttributes">
					<xsd:annotation>
						<xsd:documentation>(Optional) Specification of the types of user-defined attributes to be included in the query.

Specifying this parameter will make the query more efficient.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="queryProcessInstancesOutput">
		<xsd:annotation>
			<xsd:documentation>Response element for queryProcessInstances, queryProcessInstancesAlt and queryHaltedProcessInstances operations.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processInstances" type="pm:ProcessInstances">
					<xsd:annotation>
						<xsd:documentation>Details of process instances that match the query specified in the request. 

This will be either the full list or the first page of the list, depending on the pageSize value specified in the request.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element minOccurs="0" name="pagingID" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Paging ID which can be used to get individual pages of the (paged) list.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="queryProcessTemplatesAltInput">
		<xsd:annotation>
			<xsd:documentation>Request element for queryProcessTemplatesAlt operation. Works the same way as queryProcessTemplates, except the query string is broken into multiple parts. See also listProcessTemplateAttributes.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="select" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Data fields to be selected for each process template in the result set. The "FROM process" clause should be included.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="where" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Filter criteria to be used in the query.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="orderBy" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Sorting/grouping criteria to be used in the query.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="pageSize" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Page size to be used to return the list of process templates. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

&gt;0: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="queryProcessTemplatesInput">
		<xsd:annotation>
			<xsd:documentation>Request element for queryProcessTemplates operation. 

See also: listProcessTemplateAttributes operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="query" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Full (SQL syntax) query string. The "FROM process" clause should be included in the query.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="pageSize" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Page size to be used to return the list of process templates. One of the following values:

 0:  Return the entire result set in a single, non-paged list.

-1:  Return the result set in a paged list, using the default page size.

&gt;0: return the result set in a paged list, with the specified number of items on each page.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="queryProcessTemplatesOutput">
		<xsd:annotation>
			<xsd:documentation>Response element for queryProcessTemplates and queryProcessTemplatesAlt operations.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processTemplates" type="pm:ProcessTemplates">
					<xsd:annotation>
						<xsd:documentation>Details of process templates that match the query specified in the request. 

This will be either the full list or the first page of the list, depending on the pageSize value specified in the request.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element minOccurs="0" name="pagingID" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Paging ID which can be used to get individual pages of the (paged) list.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="setAvailableProcessInstanceVariablesInput">
		<xsd:annotation>
			<xsd:documentation>Request element for setAvailableProcessInstanceVariables operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processID" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Unique ID of the process instance for which variable values are to be set.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="variableMap">
					<xsd:annotation>
						<xsd:documentation>Details of the variable values to be set.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element maxOccurs="unbounded" minOccurs="1" name="variable" type="pm:NameValuePair">
								<xsd:annotation>
									<xsd:documentation>Variable settings (as name/value pairs).</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="setDeadlineExpirationInput">
		<xsd:annotation>
			<xsd:documentation>Request element for setDeadlineExpiration operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="activityID" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Unique ID of the activity for which the deadline expiration is to be set.

(For example, the XPDL ID assigned by TIBCO Business Studio's Process Editor.)</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="expirationTime" type="xsd:dateTime">
					<xsd:annotation>
						<xsd:documentation>Expiration date/time for the specified activity.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="setPriorityInput">
		<xsd:annotation>
			<xsd:documentation>Request element for setPriority operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="processID" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Unique ID of the process instance for which the priority is to be set.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="priority" type="xsd:short">
					<xsd:annotation>
						<xsd:documentation>Priority value used to schedule the execution of this process instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!--MIGRATION POINTS FOR listMigrationPoints OPERATION -->
	<xsd:complexType name="MigrationPointTaskType">
		<xsd:annotation>
			<xsd:documentation>Type to describe a task that is a valid migration point.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of a task that is a valid migration point for this process template.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationPointProcessType">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of migration points for a process template.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="task" type="pm:MigrationPointTaskType">
				<xsd:annotation>
					<xsd:documentation>List of migration points for this process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of process template.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationPointModuleType">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of migration points for a module/version set.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="process" type="pm:MigrationPointProcessType">
				<xsd:annotation>
					<xsd:documentation>List of migration points for this module and version.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of module.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="version" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Version number of module.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationPointTypes">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of migration points. Each migration point consists of a unique set of module name, module version, process template name and task name.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="module" type="pm:MigrationPointModuleType">
				<xsd:annotation>
					<xsd:documentation>List of migration points.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="migrationPoints" type="pm:MigrationPointTypes">
		<xsd:annotation>
			<xsd:documentation>Response element for getMigrationPoints operation.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--MIGRATION RULES FOR setMigrationRules OPERATION-->
	<xsd:complexType name="MigrationRuleTaskType">
		<xsd:annotation>
			<xsd:documentation>Type to describe the task from which migration is to take place, and the version number of the module to which the process instance should be migrated.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="fromTask" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the task defining the point in the process from which the process instance should be migrated. (This task must be a valid migration point.)</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="toVersion" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Version number of the module (process template) to which the process instance should be migrated.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="description" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>(Optional) Explanation of this migration rule.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationRuleProcessType">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of migration rules for a process template from which migration is to take place.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="migrate" type="pm:MigrationRuleTaskType">
				<xsd:annotation>
					<xsd:documentation>List of migration rules for this process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the process template from which migration is to take place.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationRuleModuleType">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of migration rules for: a module, and the module version from which migration is to take place.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="process" type="pm:MigrationRuleProcessType">
				<xsd:annotation>
					<xsd:documentation>List of migration rules for this module and version.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the module from which migration is to take place.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="version" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Version number of the module from which migration is to take place.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationRuleTypes">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of migration rules. 

Each migration rule consists of a unique set of module name, module version from which to migrate, process template name, task name from which to migrate, and module version to which to migrate.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="module" type="pm:MigrationRuleModuleType">
				<xsd:annotation>
					<xsd:documentation>List of migration rules.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="migrationRules" type="pm:MigrationRuleTypes">
		<xsd:annotation>
			<xsd:documentation>Request element for setMigrationRules and unsetMigrationRules operations.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--MIGRATION RULES FOR listMigrationRules OPERATION-->
	<xsd:complexType name="MigrationRuleTaskTypeList">
		<xsd:annotation>
			<xsd:documentation>Type to describe task-level migration rules.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="fromTask" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the task from which migration is to take place.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="toVersion" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Version number (of the module) to which a process instance is to migrate.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="description" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>(Optional) Explanation of the migration rule.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="creationTime" type="xsd:dateTime" use="required">
			<xsd:annotation>
				<xsd:documentation>Date/time on which the rule was created.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationRuleProcessTypeList">
		<xsd:annotation>
			<xsd:documentation>Type to describe process template-level migration rules.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="migrate" type="pm:MigrationRuleTaskTypeList">
				<xsd:annotation>
					<xsd:documentation>List of migration rules for this process template.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the process template from which migration is to take place.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationRuleModuleTypeList">
		<xsd:annotation>
			<xsd:documentation>Type to describe module-level migration rules.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="process" type="pm:MigrationRuleProcessTypeList">
				<xsd:annotation>
					<xsd:documentation>List of migration rules for this module/version set.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the module from which migration is to take place.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="version" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Version number (of the module) from which migration is to take place.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MigrationRuleTypesList">
		<xsd:annotation>
			<xsd:documentation>Type to describe a list of migration rules. Each migration rule consists of unique set of module name, module version from which to migrate, process template name, task name from which to migrate, and module version to which to migrate.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="module" type="pm:MigrationRuleModuleTypeList">
				<xsd:annotation>
					<xsd:documentation>List of migration rules.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="migrationRuleList" type="pm:MigrationRuleTypesList">
		<xsd:annotation>
			<xsd:documentation>Response element for listMigrationRules operation.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--QUALIFIED TASK NAME -->
	<xsd:element name="qualifiedTaskName" type="pm:QualifiedTaskName">
		<xsd:annotation>
			<xsd:documentation>Request element for isSetMigrationRule operation.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="QualifiedTaskName">
		<xsd:annotation>
			<xsd:documentation>Type to describe the fully qualified name of a task.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="moduleName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the module to which the process template belongs.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="processName" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the process template to which the task belongs.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="version" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>OSGi-style version number of the process template. 
(This version number is the same as that of the module.)</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="taskName" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Name of the task.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!--FAULT ELEMENTS and TYPES -->
	<xsd:complexType name="BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Type for all fault elements.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="reason" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Reason for the exception.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="illegalArgumentFault" type="pm:BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Fault element for illegal or missing input argument(s) exception.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="illegalStateFault" type="pm:BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Fault element for illegal state exception.

This exception is returned when the requested operation cannot be performed because the target is not in the correct state.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="operationFailedFault" type="pm:BasicFaultType">
		<xsd:annotation>
			<xsd:documentation>Fault element for various exceptions.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--PVM DATABASE INFO -->
	<xsd:element name="processIdDBInfo" type="pm:ProcessIdDBInfo">
		<xsd:annotation>
			<xsd:documentation>PVM database information corresponding to a process (PVM) ID.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ProcessIdDBInfo">
		<xsd:annotation>
			<xsd:documentation>Type to describe the PVM database information corresponding to a PVM ID.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="processId" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Process ID</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="objectSpace" nillable="true" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Identifies the space (PROCESS,TASK, ...) of the process ID.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="dbId" nillable="true" type="xsd:long">
				<xsd:annotation>
					<xsd:documentation>Identifies the database ID corresponding to the process ID.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>
