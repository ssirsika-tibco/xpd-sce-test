/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.customer.api.test.general;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.Path;

import com.tibco.xpd.core.test.util.AbstractBaseResourceTest;
import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.customer.api.StudioResourceMigrator;

/**
 * N2_CustomerAPI_StudioResourceMigrator_Test
 * <p>
 * JUnit test to protect the customer API: StudioResourceMigrator.
 * </p>
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 * 
 * @author sajain
 * @since 3.6.0
 */
public class N2_CustomerAPI_StudioResourceMigrator_Test extends
        AbstractBaseResourceTest {

    /**
     * TestNameTest
     * 
     * @throws Exception
     */
    public void testTestNameTest() throws Exception {
        // Check all files created correctly.
        checkTestFilesCreated();

        StudioResourceMigrator migrator1;
        StudioResourceMigrator migrator2;

        try {
            IFile file1 = getTestFile("OldXpdlForMigrationTest.DontMigrate"); //$NON-NLS-1$

            file1.copy(Path
                    .fromOSString("/Customer_API_test/Process Packages/OldXpdlForMigrationTest.xpdl"), //$NON-NLS-1$
                    true,
                    null);
            IFile file2 =
                    ResourcesPlugin
                            .getWorkspace()
                            .getRoot()
                            .getFile(Path.fromOSString("/Customer_API_test/Process Packages/OldXpdlForMigrationTest.xpdl")); //$NON-NLS-1$
            migrator1 = new StudioResourceMigrator(file2);

            assertTrue(migrator1.requiresMigration());
            migrator1.migrate();
            assertFalse(migrator1.requiresMigration());
            /*
             * Finally, check if exceptions are being handled properly by
             * StudioResourceMigrator.
             */
            checkExceptionHandling();
        } catch (IllegalArgumentException e1) {
            e1.printStackTrace();
        }

        return;
    }

    /**
     * Checks if the exceptions are being handled properly by
     * StudioResourceMigrator.
     */
    private void checkExceptionHandling() {
        try {
            /*
             * Pass "null" as an argument to the StudioResourceMigrator
             * constructor in order to check if it throws an
             * IllegalArrgumentException.
             */
            StudioResourceMigrator migrator = new StudioResourceMigrator(null);

            /*
             * Test should fail if control reaches here, since ideally we should
             * end up throwing an IllegalArgumentException if "null" is passed
             * as an argument to the StudioResourceMigrator constructor. And if
             * the exception is being thrown as we expect it to do, the test
             * will pass.
             */
            fail("We passed null to the StudioResourceMigrator constructor, but we didn't get an IllegalArgumentException which ideally, we should have got. Hence this test fails."); //$NON-NLS-1$
        } catch (IllegalArgumentException e) {
            StudioResourceMigrator migrator =
                    new StudioResourceMigrator(ResourcesPlugin.getWorkspace()
                            .getRoot().getProject("dummy").getFile("dummyFile")); //$NON-NLS-1$ //$NON-NLS-2$
            try {
                migrator.migrate();

                /*
                 * Test should fail if control reaches here, since ideally we
                 * should end up throwing an IllegalArgumentException if an
                 * invalid file is passed as an argument to the
                 * StudioResourceMigrator constructor. And if the exception is
                 * being thrown as we expect it to do, the test will pass.
                 */
                fail("We passed an invalid file to the StudioResourceMigrator constructor, but we didn't get an IllegalArgumentException which ideally, we should have got. Hence this test fails."); //$NON-NLS-1$
            } catch (CoreException e1) {
            } catch (IllegalArgumentException e1) {
            }
        }

    }

    @Override
    protected String getTestName() {
        return "TestNameTest"; //$NON-NLS-1$
    }

    @Override
    protected String getTestPlugInId() {
        return "com.tibco.customer.api.test"; //$NON-NLS-1$
    }

    @Override
    protected TestResourceInfo[] getTestResources() {
        TestResourceInfo[] testResources =
                new TestResourceInfo[] { new TestResourceInfo(
                        "resources/Test Name", "Customer_API_test/Process Packages{processes}/OldXpdlForMigrationTest.DontMigrate"), //$NON-NLS-1$ //$NON-NLS-2$
                };

        return testResources;
    }

    /**
     * @see com.tibco.xpd.core.test.util.AbstractBaseResourceTest#tearDown()
     * 
     * @throws Exception
     */
    @Override
    protected void tearDown() throws Exception {
        // TODO Auto-generated method stub
        super.tearDown();
    }
}
