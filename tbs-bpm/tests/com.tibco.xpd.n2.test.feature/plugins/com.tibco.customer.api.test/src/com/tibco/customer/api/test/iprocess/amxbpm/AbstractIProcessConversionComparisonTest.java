/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.customer.api.test.iprocess.amxbpm;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.tibco.xpd.analyst.resources.xpdl2.Xpdl2ResourcesConsts;
import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.core.test.util.TestUtil;
import com.tibco.xpd.n2.test.general.FormatVersionInXpdlDiff;
import com.tibco.xpd.n2.test.general.XpdlDiff;
import com.tibco.xpd.resources.projectconfig.SpecialFolder;
import com.tibco.xpd.resources.util.SpecialFolderUtil;

import junit.framework.Assert;

/**
 * Base class for performing iprocess to bpm conversion and comparing the result
 * with predefined gold files.
 * <p>
 * Loads the test workspace with the files returned by
 * {@link #getImportResourcesInfo()} and {@link #getOtherResourcesInfo()} and
 * {@link #getGoldResourcesInfo()} and then converts all of the files returned
 * by {@link #getImportResourcesInfo()} from iProcess XPDL format to BPM XPDL
 * format.
 * <p>
 * On successful conversion then the files returned by
 * {@link #getGoldResourcesInfo()} are compared with the files generated into
 * the test project / Process Packages folder.
 * <p>
 * All the sub-class has to do therefore is supply the iProcess XPDL files to
 * import, and the set of gold files to compare the conversion result against.
 * 
 * @author aallway
 * @since 3 Jun 2014
 */
public abstract class AbstractIProcessConversionComparisonTest
        extends AbstractIProcessConversionTest {

    /**
     * Return the set of gold files to compare against the files generated by
     * the iProcess to bpm conversion.
     * 
     * @return the importResourcesInfo
     */
    abstract public TestResourceInfo[] getGoldResourcesInfo();

    /**
     * @see com.tibco.customer.api.test.iprocess.amxbpm.AbstractIProcessConversionTest#doTestConvertedXpdls(java.util.Collection)
     * 
     * @param convertedXpdls
     */
    @Override
    protected void doTestConvertedXpdls(Collection<IFile> convertedXpdls) {
        try {
            ResourcesPlugin.getWorkspace().getRoot().refreshLocal(
                    IResource.DEPTH_INFINITE,
                    new NullProgressMonitor());
            TestUtil.buildAndWait();
            TestUtil.waitForJobs();

            IProject mainImportProject = getMainImportProject();

            SpecialFolder specialFolder =
                    SpecialFolderUtil.getSpecialFolderOfKind(mainImportProject,
                            Xpdl2ResourcesConsts.PROCESSES_SPECIAL_FOLDER_KIND);

            TestResourceInfo[] goldResourcesInfo = getGoldResourcesInfo();

            for (TestResourceInfo goldInfo : goldResourcesInfo) {
                IFile goldFile = goldInfo.getTestFile();

                IFile testFile =
                        specialFolder.getFolder().getFile(goldFile.getName());

                // DO THE COMPARISON BETWEEN GOLD FILES AND PRODUCED XPDLs
                doCompare(goldFile, testFile);
            }

        } catch (Exception e) {
            fail("testConvertedXpdls() Exception: " + e.getMessage() + "\n"); //$NON-NLS-1$ //$NON-NLS-2$
        }
    }

    /**
     * Perform the comparison against between the test and gold file.
     * 
     * 
     * @param goldFile
     * @param testFile
     */
    private void doCompare(IFile goldFile, IFile testFile) throws Exception {
        Assert.assertTrue(String.format("Gold File '%1s' not found", //$NON-NLS-1$
                goldFile.getName()), (goldFile != null && goldFile.exists()));
        Assert.assertTrue(String.format("Test File '%1s' not found", //$NON-NLS-1$
                testFile.getName()), (testFile != null && testFile.exists()));

        XpdlDiff xpdlDiff = initXPDLDiff(testFile, goldFile);
        boolean similar = xpdlDiff.similar();

        Assert.assertTrue(
                goldFile.getName()
                        + "Converted XPDL must be identical to the gold XPDL!!" //$NON-NLS-1$
                        + xpdlDiff.toString(),
                similar);

    }

    /**
     * Initialize xpdl diff to test the conversion.
     * 
     * @param convertedFile
     * @param goldFile
     * @return Initialized object of XpdlDiff
     * @throws IOException
     * @throws CoreException
     * @throws SAXException
     */
    protected XpdlDiff initXPDLDiff(IFile convertedFile, IFile goldFile)
            throws IOException, CoreException, SAXException {
        InputStream goldStream = goldFile.getContents();
        InputSource goldSource = new InputSource(goldStream);

        InputStream testStream = convertedFile.getContents();
        InputSource testSource = new InputSource(testStream);

        XpdlDiff xpdlDiff = new FormatVersionInXpdlDiff(goldSource, testSource);

        return xpdlDiff;
    }

    /**
     * @see com.tibco.customer.api.test.iprocess.amxbpm.AbstractIProcessConversionTest#getTestResources()
     * 
     * @return
     */
    @Override
    protected TestResourceInfo[] getTestResources() {

        List<TestResourceInfo> resources = new ArrayList<TestResourceInfo>();

        TestResourceInfo[] importResourcesInfo = getImportResourcesInfo();
        if (importResourcesInfo != null) {
            for (TestResourceInfo testResourceInfo : importResourcesInfo) {
                resources.add(testResourceInfo);
            }
        }

        TestResourceInfo[] otherResourcesInfo = getGoldResourcesInfo();
        if (otherResourcesInfo != null) {
            for (TestResourceInfo testResourceInfo : otherResourcesInfo) {
                resources.add(testResourceInfo);
            }
        }

        return resources.toArray(new TestResourceInfo[0]);
    }
}
