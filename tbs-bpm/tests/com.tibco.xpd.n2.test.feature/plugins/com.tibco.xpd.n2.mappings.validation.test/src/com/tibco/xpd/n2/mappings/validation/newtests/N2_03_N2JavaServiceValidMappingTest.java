/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.n2.mappings.validation.newtests;

import java.util.Collections;
import java.util.List;

import org.eclipse.core.resources.IFile;

import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.core.test.validations.ValidationsTestProblemMarkerInfo;
import com.tibco.xpd.n2.mappings.validation.test.Activator;
import com.tibco.xpd.n2.test.core.validation.AbstractN2BaseValidationTest;
import com.tibco.xpd.resources.util.ProjectImporter;

/**
 * N2JavaServiceValidMappingTest
 * <p>
 * N2JavaServiceValidMappingTest - Test selected validations are correctly
 * raised.
 * </p>
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 * 
 * Test valid java pojo service mappings
 * 
 * @author aallway
 * @since 3.4.2
 */
public class N2_03_N2JavaServiceValidMappingTest extends AbstractN2BaseValidationTest {

    private static String[] ISSUE_ID_EXTRACTS =
            new String[] { "abstractMappingRule\\..*" }; //$NON-NLS-1$

    public N2_03_N2JavaServiceValidMappingTest() {
        super(true);
    }

    @Override
    protected void setUp() throws Exception {
        /*
         * Import pojo project before running test
         */
        ProjectImporter importPojo =
                ProjectImporter
                        .createPluginProjectImporter(Activator.PLUGIN_ID,
                                Collections
                                        .singletonList("resources/Pojo/myPojo.zip"));//$NON-NLS-1$
        importPojo.performImport();

        super.setUp();

        return;
    }

    /**
     * Override to check against specific validations being raised.
     */
    @Override
    protected void doTestValidations() throws Exception {
        String failures = ""; //$NON-NLS-1$
        TestResourceInfo[] testResources = getTestResources();

        for (TestResourceInfo testResourceInfo : testResources) {
            IFile testFile = testResourceInfo.getTestFile();
            if (testFile == null || !testFile.exists()) {
                fail("Unable to find resource '" + testResourceInfo.getTestFilePath() //$NON-NLS-1$
                        + "' for  test problem markers"); //$NON-NLS-1$
            }

            List<ValidationsTestProblemMarkerInfo> problemMarkers =
                    getProblemMarkers(testFile);
            for (ValidationsTestProblemMarkerInfo markerInfo : problemMarkers) {
                String problemId = markerInfo.getProblemId();

                for (String issueIdPattern : ISSUE_ID_EXTRACTS) {
                    if (problemId.matches(issueIdPattern)) {
                        failures +=
                                String
                                        .format("Expected no occurrences of issue '%s'\n  (matches issue id pattern '%s'; found in resource: '%s').\n", //$NON-NLS-1$
                                                markerInfo.getProblemText(),
                                                issueIdPattern,
                                                testResourceInfo
                                                        .getTestFilePath());
                    }
                }
            }
        }

        if (failures.length() > 0) {
            fail(failures);
        }
        return;
    }

    /**
     * N2JavaServiceValidMappingTest
     * 
     * @throws Exception
     */
    public void testN2JavaServiceValidMappingTest() throws Exception {
        doTestValidations();
        return;
    }

    @Override
    protected ValidationsTestProblemMarkerInfo[] getValidationProblemMarkerInfos() {
        ValidationsTestProblemMarkerInfo[] markerInfos =
                new ValidationsTestProblemMarkerInfo[] {

                };
        return markerInfos;
    }

    @Override
    protected String getTestName() {
        return "N2JavaServiceValidMappingTest"; //$NON-NLS-1$
    }

    @Override
    protected String getTestPlugInId() {
        return "com.tibco.xpd.n2.mappings.validation.test"; //$NON-NLS-1$
    }

    @Override
    protected TestResourceInfo[] getTestResources() {
        TestResourceInfo[] testResources =
                new TestResourceInfo[] {
                        new TestResourceInfo(
                                "resources/N2 Java Service Valid Mapping", "TestJavaServiceValidMapping/Business Objects{bom}/TestJavaServiceValidMapping.bom"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/N2 Java Service Valid Mapping", "TestJavaServiceValidMapping/Process Packages{processes}/TestJavaServiceValidMapping.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                        new TestResourceInfo(
                                "resources/N2 Java Service Valid Mapping", "TestJavaServiceValidMapping/Process Packages{processes}/TestJavaServiceValidMapping.xpdl"), //$NON-NLS-1$ //$NON-NLS-2$
                };

        return testResources;
    }

}
