/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
package com.tibco.xpd.n2.test.general;

import java.io.IOException;
import java.io.InputStream;

import org.eclipse.core.resources.IFile;
import org.eclipse.emf.common.command.CompoundCommand;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.xml.sax.InputSource;

import com.tibco.xpd.core.test.util.AbstractBaseResourceTest;
import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.core.xmlunit.XmlDiff;
import com.tibco.xpd.resources.WorkingCopy;
import com.tibco.xpd.resources.util.WorkingCopyUtil;
import com.tibco.xpd.xpdExtension.DynamicOrgIdentifierRef;
import com.tibco.xpd.xpdExtension.DynamicOrganizationMapping;
import com.tibco.xpd.xpdExtension.DynamicOrganizationMappings;
import com.tibco.xpd.xpdExtension.XpdExtensionFactory;
import com.tibco.xpd.xpdExtension.XpdExtensionPackage;
import com.tibco.xpd.xpdl2.Package;
import com.tibco.xpd.xpdl2.Process;
import com.tibco.xpd.xpdl2.util.Xpdl2ModelUtil;

/**
 * N2_05_DynamicOrgMappingsGenerationTest
 * <p>
 * N2_05_DynamicOrgMappingsGenerationTest - Base test with Business Studio
 * resources class.
 * </p>
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 * 
 * @author kthombar
 * @since 3.7
 */
public class N2_05_DynamicOrgMappingsGenerationTest
        extends AbstractBaseResourceTest {

    /*
     * Input test file
     */
    private final String TEST_FILE = "DynamicIdentifiers.xpdl"; //$NON-NLS-1$

    private final String IDENTIFIER_ID = "ID"; //$NON-NLS-1$

    private final String IDENTIFIER_NAME = "Identifier name"; //$NON-NLS-1$

    private final String IDENTIFIER_PATH = "Path"; //$NON-NLS-1$

    private final String SOURCE_PATH = "Source Name"; //$NON-NLS-1$

    /*
     * Gold File
     */
    private final String GOLD_FILE = "Gold.xpdl"; //$NON-NLS-1$

    /**
     * N2_05_DynamicOrgMappingsGenerationTest
     * 
     * @throws Exception
     */
    public void testTestNameTest() throws Exception {
        // Check all files created correctly.
        checkTestFilesCreated();

        StringBuilder failureLog = new StringBuilder();

        IFile testFile = getTestFile(TEST_FILE);
        WorkingCopy wc = WorkingCopyUtil.getWorkingCopy(testFile);

        /*
         * Create the Dynamic Participant Mappings
         */
        createDynamicParticipantMappingsCommand(wc);

        IFile goldFile = getTestFile(GOLD_FILE);

        /*
         * Compare the Gold file with the test file using 'XmlDiff' util, check
         * if they are identical.
         */
        compareGoldAndTestFiles(failureLog, testFile, goldFile);

        return;
    }

    /**
     * Compares the Gold file with the test file using XmlDiff Util.
     * 
     * @param failureLog
     * @param testFile
     * @param goldFile
     * @throws IOException
     */
    private void compareGoldAndTestFiles(StringBuilder failureLog,
            IFile testFile, IFile goldFile) throws IOException {
        failureLog.append(compareGoldAndTest(goldFile, testFile));

        if (failureLog.length() != 0) {
            failureLog.insert(0, "Test Failed:\n"); //$NON-NLS-1$
            fail(failureLog.toString());
        }
    }

    /**
     * Compare the two given xpdl files for REST Services (ignores other parts
     * of the package)
     * 
     * @param goldFile
     * @param testFile
     * 
     * @return empty string buffer on success else it will contain the failure
     *         state of failed comparisons.
     * @throws IOException
     */
    private StringBuffer compareGoldAndTest(IFile goldFile, IFile testFile)
            throws IOException {

        StringBuffer errorResults = new StringBuffer();

        if (!goldFile.exists()) {

            fail("Gold File does not exist."); //$NON-NLS-1$

        }

        if (!testFile.exists()) {
            fail("Test File does not exist."); //$NON-NLS-1$
        }

        InputStream goldStream = null;
        InputStream testStream = null;

        try {

            goldStream = goldFile.getContents();
            InputSource goldSource = new InputSource(goldStream);

            testStream = testFile.getContents();
            InputSource testSource = new InputSource(testStream);

            XmlDiff xmlDiff =
                    new FormatVersionInXpdlDiff(goldSource, testSource);

            if (!xmlDiff.similar()) {
                errorResults.append(String.format(
                        "Gold file '%1$s' and Test file '%2$s' do not match: ", //$NON-NLS-1$
                        goldFile.getName(),
                        testFile.getName()));
                xmlDiff.appendMessage(errorResults);
                errorResults.append(
                        "-------------------------------------------------------------------\n\n"); //$NON-NLS-1$

            }

        } catch (Exception e) {
            fail(e.getMessage());
        } finally {
            if (goldStream != null) {
                goldStream.close();
            }
            if (testStream != null) {
                testStream.close();
            }
        }

        return errorResults;
    }

    /**
     * @param wc
     */
    private void createDynamicParticipantMappingsCommand(WorkingCopy wc)
            throws IOException {
        if (wc != null && wc.getRootElement() instanceof Package) {
            Package pckg = (Package) wc.getRootElement();
            Process process = pckg.getProcesses().get(0);

            DynamicOrganizationMappings participantMappings =
                    XpdExtensionFactory.eINSTANCE
                            .createDynamicOrganizationMappings();

            /*
             * Creating 2 Dynamic Organization Mapping
             */
            for (int indexForParticipantMapping =
                    1; indexForParticipantMapping < 3; indexForParticipantMapping++) {
                DynamicOrganizationMapping eachParticipantMapping =
                        XpdExtensionFactory.eINSTANCE
                                .createDynamicOrganizationMapping();
                eachParticipantMapping.setSourcePath(
                        SOURCE_PATH + indexForParticipantMapping);

                DynamicOrgIdentifierRef dynOrgIdentifierRef =
                        XpdExtensionFactory.eINSTANCE
                                .createDynamicOrgIdentifierRef();

                dynOrgIdentifierRef.setDynamicOrgId(
                        IDENTIFIER_ID + indexForParticipantMapping);
                dynOrgIdentifierRef.setIdentifierName(
                        IDENTIFIER_NAME + indexForParticipantMapping);
                dynOrgIdentifierRef.setOrgModelPath(
                        IDENTIFIER_PATH + indexForParticipantMapping);

                eachParticipantMapping
                        .setDynamicOrgIdentifierRef(dynOrgIdentifierRef);

                participantMappings.getDynamicOrganizationMapping()
                        .add(eachParticipantMapping);
            }

            EditingDomain ed = wc.getEditingDomain();

            CompoundCommand cmd = new CompoundCommand();
            cmd.setLabel("Create Dynamic Participant Mappings."); //$NON-NLS-1$
            cmd.append(Xpdl2ModelUtil.getSetOtherElementCommand(ed,
                    process,
                    XpdExtensionPackage.eINSTANCE
                            .getDocumentRoot_DynamicOrganizationMappings(),
                    participantMappings));

            if (cmd.canExecute()) {
                ed.getCommandStack().execute(cmd);
                wc.save();
            } else {
                fail("Command could not be executed."); //$NON-NLS-1$

            }

        }

    }

    @Override
    protected String getTestName() {
        return "N2_05_DynamicOrgMappingsGenerationTest"; //$NON-NLS-1$
    }

    @Override
    protected String getTestPlugInId() {
        return "com.tibco.xpd.n2.test"; //$NON-NLS-1$
    }

    @Override
    protected TestResourceInfo[] getTestResources() {
        TestResourceInfo[] testResources = new TestResourceInfo[] {
                new TestResourceInfo(
                        "resources/N2_05_DynamicOrgMappingsGenerationTest", //$NON-NLS-1$
                        "DynamicIdentifiersProject/Process Packages{processes}/DynamicIdentifiers.xpdl"), //$NON-NLS-1$

                new TestResourceInfo(
                        "resources/N2_05_DynamicOrgMappingsGenerationTest", //$NON-NLS-1$
                        "DynamicIdentifiersProject/Gold Files/Gold.xpdl"), //$NON-NLS-1$
        };

        return testResources;
    }

}
