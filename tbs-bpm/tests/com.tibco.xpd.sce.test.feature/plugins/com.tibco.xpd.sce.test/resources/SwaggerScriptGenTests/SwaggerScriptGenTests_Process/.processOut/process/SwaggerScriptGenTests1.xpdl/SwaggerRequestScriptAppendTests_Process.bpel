<?xml version="1.0" encoding="UTF-8"?>
<bpws:process exitOnStandardFault="no"
    name="SwaggerRequestScriptAppendTests_Process"
    suppressJoinFailure="yes" tibex:bxVersion="11.6.0"
    tibex:dataFieldDescriptorClass="com.example.swaggerscriptgentests_process.SwaggerScriptGenTests_Process.SwaggerRequestScriptAppendTests_Process"
    tibex:dataFieldDescriptorScript="process-js/SwaggerScriptGenTests_Process/SwaggerRequestScriptAppendTests_Process/SwaggerRequestScriptAppendTests_Process.js"
    tibex:explicitCompensation="yes"
    tibex:xpdlId="_1aipPoe3Ee-WYIK8ko4sbQ"
    xmlns:bpws="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:tibex="http://www.tibco.com/bpel/2007/extensions" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <tibex:VariableDescriptor type="PersistentBatching"/>
    <bpws:documentation>*** Generated by TIBCO Business Studio.</bpws:documentation>
    <bpws:variables>
        <bpws:variable name="TextField04"
            tibex:xpdlId="_1aipSoe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="Field11"
            tibex:xpdlId="_1aipS4e3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="Field12"
            tibex:xpdlId="_1aipTIe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="Field10"
            tibex:xpdlId="_1aipTYe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TextField02"
            tibex:xpdlId="_1aipToe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TextField01"
            tibex:xpdlId="_1aipT4e3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TextArray" tibex:array="yes"
            tibex:xpdlId="_1aipUIe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TextField09"
            tibex:xpdlId="_1aipUYe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TextField03"
            tibex:xpdlId="_1aipUoe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="IntegerField01"
            tibex:xpdlId="_1aipU4e3Ee-WYIK8ko4sbQ" type="xsd:long"/>
        <bpws:variable name="TextField08"
            tibex:xpdlId="_1aipVIe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TextField05"
            tibex:xpdlId="_1aipVYe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TextField07"
            tibex:xpdlId="_1aipVoe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
        <bpws:variable name="TagsField" tibex:array="yes"
            tibex:class="com.example.SwaggerScriptGenTests_data.Tag"
            tibex:classVersion="1" tibex:xpdlId="_1aipV4e3Ee-WYIK8ko4sbQ"/>
        <bpws:variable name="TextField06"
            tibex:xpdlId="_1aipWIe3Ee-WYIK8ko4sbQ" type="xsd:string"/>
    </bpws:variables>
    <bpws:extensions>
        <bpws:extension mustUnderstand="yes" namespace="http://www.tibco.com/bpel/2007/extensions"/>
    </bpws:extensions>
    <bpws:eventHandlers/>
    <bpws:flow name="_BX_flow_mXZYEIfNEe-WYIK8ko4sbQ">
        <bpws:links>
            <bpws:link name="StartEvent to singleSuccessResponsePO" tibex:xpdlId="_1aipR4e3Ee-WYIK8ko4sbQ"/>
            <bpws:link
                name="singleSuccessResponsePO to noInputDataPUTnoInputData" tibex:xpdlId="_1aipSYe3Ee-WYIK8ko4sbQ"/>
            <bpws:link name="noInputDataPUTnoInputData to EndEvent" tibex:xpdlId="_1aipSIe3Ee-WYIK8ko4sbQ"/>
        </bpws:links>
        <bpws:extensionActivity>
            <tibex:receiveEvent createInstance="yes" eventTimeout="0"
                name="StartEvent" tibex:type="startEvent"
                tibex:xpdlId="_1aipP4e3Ee-WYIK8ko4sbQ" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:sources>
                    <bpws:source linkName="StartEvent to singleSuccessResponsePO"/>
                </bpws:sources>
                <tibex:eventSource>
                    <tibex:startEvent eventType="Default"/>
                </tibex:eventSource>
            </tibex:receiveEvent>
        </bpws:extensionActivity>
        <bpws:empty name="EndEvent" tibex:migrationAllowed="yes"
            tibex:type="endEvent" tibex:xpdlId="_1aipQIe3Ee-WYIK8ko4sbQ">
            <bpws:targets>
                <bpws:target linkName="noInputDataPUTnoInputData to EndEvent"/>
            </bpws:targets>
        </bpws:empty>
        <bpws:invoke name="singleSuccessResponsePO"
            tibex:invokeType="REST" tibex:migrationAllowed="yes"
            tibex:sharedResourceName="Swagger Petstore"
            tibex:sharedResourceType="HTTPClient"
            tibex:type="serviceTask" tibex:xpdlId="_1aipQYe3Ee-WYIK8ko4sbQ">
            <tibex:restResponseScript expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Get response data.
var REST_STATUS_CODE = REST_RESPONSE.getStatus();

var REST_PAYLOAD_200 = null;

var $REST_RESPONSE_DATA = null;
try {
    if (REST_RESPONSE.getData() != null) {
        $REST_RESPONSE_DATA = JSON.parse(REST_RESPONSE.getData());
    }
} catch(ex) {

    // Wrap exception in something more obvious if the response data parse fails (probably not JSON format)
    throw "    JSON Response payload parsing failed (not formatted correctly as JSON string?).\n" + 
        "        Parser Exception: " + ex.message + "\n---------------------------------\n" + 
        "        Payload Text: \n" + REST_RESPONSE.getData() + "\n---------------------------------\n";
    
}

if (REST_STATUS_CODE == '200') {
    REST_PAYLOAD_200 = $REST_RESPONSE_DATA;
}


function pathExists(rootObject, objectPath) { 
    if (objectPath && elementExists(rootObject)) {
        var lastChildStartIdx = objectPath.lastIndexOf('[\'');
        var paths = [];
        // dot-notation
        if (lastChildStartIdx === -1) {       
            // Split and remove the first element because it is the root object e.g. 'obj.child.grandchild' --> obj is the root object
            paths = objectPath.split(".").slice(1); 
        } else {
            // Square-bracket notation
            while(lastChildStartIdx !== -1){            
                var lastChildEndIdx = objectPath.lastIndexOf('\']');
                // Add last child
                paths.unshift(objectPath.substring(lastChildStartIdx + 2, lastChildEndIdx));
                // Update path
                objectPath = objectPath.substring(0, lastChildStartIdx);
                lastChildStartIdx = objectPath.lastIndexOf('[\'');
            }
        }        
        var pathElement = paths.reduce(function(obj, prop){       
            return (elementExists(obj) && elementExists(obj[prop])) ? obj[prop] : undefined;
        }, rootObject);
        return elementExists(pathElement);
    }
    return false;
}
function elementExists(element){
    return typeof(element) !== 'undefined' && element !== null;
}


]]></tibex:restResponseScript>
            <tibex:restRequestScript expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[var REST_PATH_X_Path_With_Bad_JS_Varname_Chars = null;
var REST_PATH_nonProblematicPathName = null;
var REST_QUERY_X_Query_With_Bad_JS_Varname_Chars = null;
var REST_QUERY_nonProblematicQueryName = null;
var REST_HEADER_X_Header_With_Bad_JS_Varname_Chars = null;
var REST_HEADER_nonProblematicHeaderName = null;
var REST_PAYLOAD = null;

// Map from 'TextField01' to 'Path Parameters.X-Path-With-Bad-JS-Varname-Chars'
if (pathExists(data, "data.TextField01")) {
    REST_PATH_X_Path_With_Bad_JS_Varname_Chars = (data.TextField01 != null) ? new String(data.TextField01) : null;
} else {
    REST_PATH_X_Path_With_Bad_JS_Varname_Chars = null;
}

// Map from 'TextField02' to 'Path Parameters.nonProblematicPathName'
if (pathExists(data, "data.TextField02")) {
    REST_PATH_nonProblematicPathName = (data.TextField02 != null) ? new String(data.TextField02) : null;
} else {
    REST_PATH_nonProblematicPathName = null;
}

// Map from 'TextField03' to 'Query Parameters.X-Query-With-Bad-JS-Varname-Chars'
if (pathExists(data, "data.TextField03")) {
    REST_QUERY_X_Query_With_Bad_JS_Varname_Chars = (data.TextField03 != null) ? new String(data.TextField03) : null;
} else {
    REST_QUERY_X_Query_With_Bad_JS_Varname_Chars = null;
}

// Map from 'TextField04' to 'Header Parameters.X-Header-With-Bad-JS-Varname-Chars'
if (pathExists(data, "data.TextField04")) {
    REST_HEADER_X_Header_With_Bad_JS_Varname_Chars = (data.TextField04 != null) ? new String(data.TextField04) : null;
} else {
    REST_HEADER_X_Header_With_Bad_JS_Varname_Chars = null;
}

// Map from 'TextField05' to 'Header Parameters.nonProblematicHeaderName'
if (pathExists(data, "data.TextField05")) {
    REST_HEADER_nonProblematicHeaderName = (data.TextField05 != null) ? new String(data.TextField05) : null;
} else {
    REST_HEADER_nonProblematicHeaderName = null;
}


function pathExists(rootObject, objectPath) { 
    if (objectPath && elementExists(rootObject)) {
        var lastChildStartIdx = objectPath.lastIndexOf('[\'');
        var paths = [];
        // dot-notation
        if (lastChildStartIdx === -1) {       
            // Split and remove the first element because it is the root object e.g. 'obj.child.grandchild' --> obj is the root object
            paths = objectPath.split(".").slice(1); 
        } else {
            // Square-bracket notation
            while(lastChildStartIdx !== -1){            
                var lastChildEndIdx = objectPath.lastIndexOf('\']');
                // Add last child
                paths.unshift(objectPath.substring(lastChildStartIdx + 2, lastChildEndIdx));
                // Update path
                objectPath = objectPath.substring(0, lastChildStartIdx);
                lastChildStartIdx = objectPath.lastIndexOf('[\'');
            }
        }        
        var pathElement = paths.reduce(function(obj, prop){       
            return (elementExists(obj) && elementExists(obj[prop])) ? obj[prop] : undefined;
        }, rootObject);
        return elementExists(pathElement);
    }
    return false;
}
function elementExists(element){
    return typeof(element) !== 'undefined' && element !== null;
}

// Build request URI.
function __filterQueryParams(__all_params){
    return __all_params.filter(function(__filter_param){
        return __filter_param.mandatory||eval(__filter_param.path)!=null;
    });
}
function __encodeQueryParams(__all_params){
    var __filtered_params = __filterQueryParams(__all_params);
    var __mapped_params = __filtered_params.map(function(__filtered_param){
        return __filtered_param.name+'='+encodeURIComponent(eval(__filtered_param.path));
    });
    return __filtered_params.length>0?'?'+__mapped_params.join('&'):'';
}
var REST_REQUEST_URI = encodeURI('/inputWithAllParamTypes');

// Set request fields.
REST_REQUEST.setHeader('Content-Type','application/json');
REST_REQUEST.setHeader('Accept','application/json');
REST_REQUEST.setHeader('X-Header-With-Bad-JS-Varname-Chars',REST_HEADER_X_Header_With_Bad_JS_Varname_Chars);
REST_REQUEST.setHeader('nonProblematicHeaderName',REST_HEADER_nonProblematicHeaderName);
REST_REQUEST.setUrl(REST_REQUEST_URI);
REST_REQUEST.setMethod('PUT');
if (REST_PAYLOAD) {
    REST_REQUEST.setData(JSON.stringify(REST_PAYLOAD));
}


]]></tibex:restRequestScript>
            <bpws:targets>
                <bpws:target linkName="StartEvent to singleSuccessResponsePO"/>
            </bpws:targets>
            <bpws:sources>
                <bpws:source linkName="singleSuccessResponsePO to noInputDataPUTnoInputData"/>
            </bpws:sources>
        </bpws:invoke>
        <bpws:invoke name="noInputDataPUTnoInputData"
            tibex:invokeType="REST" tibex:migrationAllowed="yes"
            tibex:sharedResourceName="Swagger Petstore"
            tibex:sharedResourceType="HTTPClient"
            tibex:type="serviceTask" tibex:xpdlId="_1aipRIe3Ee-WYIK8ko4sbQ">
            <tibex:restResponseScript expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Get response data.
var REST_STATUS_CODE = REST_RESPONSE.getStatus();

var REST_PAYLOAD_200 = null;

var $REST_RESPONSE_DATA = null;
try {
    if (REST_RESPONSE.getData() != null) {
        $REST_RESPONSE_DATA = JSON.parse(REST_RESPONSE.getData());
    }
} catch(ex) {

    // Wrap exception in something more obvious if the response data parse fails (probably not JSON format)
    throw "    JSON Response payload parsing failed (not formatted correctly as JSON string?).\n" + 
        "        Parser Exception: " + ex.message + "\n---------------------------------\n" + 
        "        Payload Text: \n" + REST_RESPONSE.getData() + "\n---------------------------------\n";
    
}

if (REST_STATUS_CODE == '200') {
    REST_PAYLOAD_200 = $REST_RESPONSE_DATA;
}


function pathExists(rootObject, objectPath) { 
    if (objectPath && elementExists(rootObject)) {
        var lastChildStartIdx = objectPath.lastIndexOf('[\'');
        var paths = [];
        // dot-notation
        if (lastChildStartIdx === -1) {       
            // Split and remove the first element because it is the root object e.g. 'obj.child.grandchild' --> obj is the root object
            paths = objectPath.split(".").slice(1); 
        } else {
            // Square-bracket notation
            while(lastChildStartIdx !== -1){            
                var lastChildEndIdx = objectPath.lastIndexOf('\']');
                // Add last child
                paths.unshift(objectPath.substring(lastChildStartIdx + 2, lastChildEndIdx));
                // Update path
                objectPath = objectPath.substring(0, lastChildStartIdx);
                lastChildStartIdx = objectPath.lastIndexOf('[\'');
            }
        }        
        var pathElement = paths.reduce(function(obj, prop){       
            return (elementExists(obj) && elementExists(obj[prop])) ? obj[prop] : undefined;
        }, rootObject);
        return elementExists(pathElement);
    }
    return false;
}
function elementExists(element){
    return typeof(element) !== 'undefined' && element !== null;
}


]]></tibex:restResponseScript>
            <tibex:restRequestScript expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[

function pathExists(rootObject, objectPath) { 
    if (objectPath && elementExists(rootObject)) {
        var lastChildStartIdx = objectPath.lastIndexOf('[\'');
        var paths = [];
        // dot-notation
        if (lastChildStartIdx === -1) {       
            // Split and remove the first element because it is the root object e.g. 'obj.child.grandchild' --> obj is the root object
            paths = objectPath.split(".").slice(1); 
        } else {
            // Square-bracket notation
            while(lastChildStartIdx !== -1){            
                var lastChildEndIdx = objectPath.lastIndexOf('\']');
                // Add last child
                paths.unshift(objectPath.substring(lastChildStartIdx + 2, lastChildEndIdx));
                // Update path
                objectPath = objectPath.substring(0, lastChildStartIdx);
                lastChildStartIdx = objectPath.lastIndexOf('[\'');
            }
        }        
        var pathElement = paths.reduce(function(obj, prop){       
            return (elementExists(obj) && elementExists(obj[prop])) ? obj[prop] : undefined;
        }, rootObject);
        return elementExists(pathElement);
    }
    return false;
}
function elementExists(element){
    return typeof(element) !== 'undefined' && element !== null;
}

// Build request URI.
function __filterQueryParams(__all_params){
    return __all_params.filter(function(__filter_param){
        return __filter_param.mandatory||eval(__filter_param.path)!=null;
    });
}
function __encodeQueryParams(__all_params){
    var __filtered_params = __filterQueryParams(__all_params);
    var __mapped_params = __filtered_params.map(function(__filtered_param){
        return __filtered_param.name+'='+encodeURIComponent(eval(__filtered_param.path));
    });
    return __filtered_params.length>0?'?'+__mapped_params.join('&'):'';
}
var REST_REQUEST_URI = encodeURI('/noInputData');

// Set request fields.
REST_REQUEST.setUrl(REST_REQUEST_URI);
REST_REQUEST.setMethod('GET');


]]></tibex:restRequestScript>
            <bpws:targets>
                <bpws:target linkName="singleSuccessResponsePO to noInputDataPUTnoInputData"/>
            </bpws:targets>
            <bpws:sources>
                <bpws:source linkName="noInputDataPUTnoInputData to EndEvent"/>
            </bpws:sources>
        </bpws:invoke>
    </bpws:flow>
</bpws:process>
