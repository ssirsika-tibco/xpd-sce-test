{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.7",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/multipleSuccessAndDefaultResponse": {
      "post": {
        "tags": [
          "multipleSuccessAndDefaultResponse"
        ],
        "summary": "multipleSuccessAndDefaultResponse",
        "description": "",
        "operationId": "multipleSuccessAndDefaultResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "234": {
            "description": "successful operation",
            "headers": {
              "Hdr_234_1": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "Hdr_234_2": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          },
          "405": {
            "description": "Invalid input"
          },
          "default": {
            "description": "successful operation",
            "headers": {
              "DefaultHdr_Default_1": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "DefaultHdr_Default_2": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/singleSuccessDefaultResponse": {
      "post": {
        "tags": [
          "singleSuccessDefaultResponse"
        ],
        "summary": "singleSuccessDefaultResponse",
        "description": "",
        "operationId": "singleSuccessDefaultResponse",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username/password supplied"
          },
          "405": {
            "description": "Invalid input"
          },
          "default": {
            "description": "successful operation",
            "headers": {
              "DefaultHdr_201_1": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "DefaultHdr_201_2": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/singleSuccessResponse": {
      "post": {
        "tags": [
          "singleSuccessResponse"
        ],
        "summary": "singleSuccessResponse",
        "description": "",
        "operationId": "singleSuccessResponse",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "headers": {
              "ErrorOccurredTime": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "405": {
            "description": "Invalid input",
            "headers": {
              "ErrorOccurredInfo": {
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AllPropertyTypesAsGrandChildren"
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/inputWithAllParamTypes/{X-Path-With-Bad-JS-Varname-Chars}/{nonProblematicPathName}": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "inputWithAllParamTypess",
        "operationId": "inputWithAllParamTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Header-With-Bad-JS-Varname-Chars",
            "in": "header",
            "description": "Header param with bad JS cvar name chars (that could mess up scripting)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nonProblematicHeaderName",
            "in": "header",
            "description": "Header param with no problematic name",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-Query-With-Bad-JS-Varname-Chars",
            "in": "query",
            "description": "Query param with bad JS cvar name chars (that could mess up scripting)",
            "required": true,
            "type": "string"
          },
          {
            "name": "nonProblematicQueryName",
            "in": "query",
            "description": "Query param with no problematic name",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-Path-With-Bad-JS-Varname-Chars",
            "in": "path",
            "description": "Path param with bad JS cvar name chars (that could mess up scripting)",
            "required": true,
            "type": "string"
          },
          {
            "name": "nonProblematicPathName",
            "in": "path",
            "description": "Path param with no problematic name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payload Body param with bad JS cvar name chars (that could mess up scripting)",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/inputWithAllHeaderTypes": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "inputWithAllHeaderTypes",
        "operationId": "inputWithAllHeaderTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringHeader",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "booleanHeader",
            "in": "header",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "numberDoubleHeader",
            "in": "header",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "numberFloatHeader",
            "in": "header",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "integerHeader",
            "in": "header",
            "required": false,
            "type": "integer"
          },
          {
            "name": "dateHeader",
            "in": "header",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "dateTimeHeader",
            "in": "header",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/stringInputMultipleOutput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "stringInputMultipleOutput",
        "operationId": "stringInputMultipleOutput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "String payload body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return",
            "schema": {
              "type": "string"
            },
            "headers": {
              "HeaderParam": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "successful number (double) return",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "headers": {
              "HeaderParam": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "202": {
            "description": "successful number (float) return",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "headers": {
              "HeaderParam": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "203": {
            "description": "successful integer return",
            "schema": {
              "type": "integer"
            },
            "headers": {
              "HeaderParam": {
                "type": "integer"
              }
            }
          },
          "204": {
            "description": "successful boolean return",
            "schema": {
              "type": "boolean"
            },
            "headers": {
              "HeaderParam": {
                "type": "boolean"
              }
            }
          },
          "205": {
            "description": "successful date return",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "headers": {
              "HeaderParam": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "206": {
            "description": "successful date-time return",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "headers": {
              "HeaderParam": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "207": {
            "description": "successful complex return",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/stringArrayInputMultipleOutput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "stringArrayInputMultipleOutput",
        "operationId": "stringArrayInputMultipleOutput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "String payload body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "successful number (double) return",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "202": {
            "description": "successful number (float) return",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "203": {
            "description": "successful integer return",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "204": {
            "description": "successful boolean return",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          "205": {
            "description": "successful date return",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "206": {
            "description": "successful date-time return",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "207": {
            "description": "successful complex return",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/numberFloatInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "numberFloatInput",
        "operationId": "numberFloatInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Number(double) input body",
            "schema": {
              "type": "number",
              "format": "float"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/numberDoubleInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "numberDoubleInput",
        "operationId": "numberDoubleInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Number(double) input body",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/integerInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "integerInput",
        "operationId": "integerInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Integer input body",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/numberFloatArrayInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "numberFloatArrayInput",
        "operationId": "numberFloatArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Number(double) input body",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/numberDoubleArrayInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "numberDoubleArrayInput",
        "operationId": "numberDoubleArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Number(double) input body",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/integerArrayInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "integerArrayInput",
        "operationId": "integerArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Integer input body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/booleanInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "booleanInput",
        "operationId": "booleanInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Boolean input body",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/booleanArrayInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "booleanArrayInput",
        "operationId": "booleanArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Boolean input body",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/dateInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "dateInput",
        "operationId": "dateInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Date input body",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/dateArrayInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "dateArrayInput",
        "operationId": "dateArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Date input body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/dateTimeInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "dateTimeInput",
        "operationId": "dateTimeInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Date input body",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/dateTimeArrayInput": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "dateTimeArrayInput",
        "operationId": "dateTimeArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Date input body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful string return"
          }
        }
      }
    },
    "/complexInputMultipleOutput/{stringPath}": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "complexInputMultipleOutput",
        "operationId": "complexInputMultipleOutput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringHeader",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "stringPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stringQuery",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Complex payload body",
            "schema": {
              "$ref": "#/definitions/AllPropertyTypesAsGrandChildren"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful complex return",
            "schema": {
              "$ref": "#/definitions/AllPropertyTypesAsGrandChildren"
            },
            "headers": {
              "HeaderParam": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "successful complex return",
            "schema": {
              "$ref": "#/definitions/AllPropertyTypesAsChildren"
            },
            "headers": {
              "HeaderParam": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/complexArrayInputMultipleOutput/{stringPath}": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "complexArrayInputMultipleOutput",
        "operationId": "complexArrayInputMultipleOutput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringHeader",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "stringPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stringQuery",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "description": "Complex array payload body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllPropertyTypesAsGrandChildren"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful complex return",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllPropertyTypesAsGrandChildren"
              }
            },
            "headers": {
              "HeaderParam": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "successful complex return",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllPropertyTypesAsChildren"
              }
            },
            "headers": {
              "HeaderParam": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/complexInlineTypeInputOutput/{stringPath}": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "complexInlineTypeInputOutput",
        "operationId": "complexInlineTypeInputOutput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringHeader",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "stringPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stringQuery",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Anonymous inline type payload body",
            "schema": {
              "properties": {
                "string": {
                  "type": "string"
                },
                "stringArray": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "childComplex": {
                  "$ref": "#/definitions/AllPropertyTypesAsChildren"
                },
                "childComplexArray": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AllPropertyTypesAsChildren"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful complex return",
            "schema": {
              "$ref": "#/definitions/AllPropertyTypesAsGrandChildren"
            },
            "headers": {
              "HeaderParam": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "successful complex return",
            "schema": {
              "$ref": "#/definitions/AllPropertyTypesAsChildren"
            },
            "headers": {
              "HeaderParam": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/noInputData": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "noInputData",
        "operationId": "noInputData",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  },
  "definitions": {
    "AllPropertyTypesAsChildren": {
      "type": "object",
      "properties": {
        "string": {
          "type": "string"
        },
        "stringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "dateArray": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "dateTime": {
          "type": "string",
          "format": "date-time"
        },
        "dateTimeArray": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          }
        },
        "numberDouble": {
          "type": "number",
          "format": "double"
        },
        "numberDoubleArray": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "numberFloat": {
          "type": "number",
          "format": "float"
        },
        "numberFloatArray": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "integer": {
          "type": "integer"
        },
        "integerArray": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "bool": {
          "type": "boolean"
        },
        "boolArray": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        }
      }
    },
    "AllPropertyTypesAsGrandChildren": {
      "type": "object",
      "properties": {
        "childComplex": {
          "$ref": "#/definitions/AllPropertyTypesAsChildren"
        },
        "childComplexArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllPropertyTypesAsChildren"
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "type": "string",
            "xml": {
              "name": "photoUrl"
            }
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "xml": {
              "name": "tag"
            },
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}