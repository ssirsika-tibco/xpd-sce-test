<?xml version="1.0" encoding="UTF-8"?>
<bpws:process exitOnStandardFault="no"
    name="DataWrappingMappingsTestsProcess" suppressJoinFailure="yes"
    tibex:bxVersion="11.0.0"
    tibex:dataFieldDescriptorClass="com.example.datawrappingmappertests.DataWrappingMappingsTests.DataWrappingMappingsTestsProcess"
    tibex:dataFieldDescriptorScript="process-js/DataWrappingMappingsTests/DataWrappingMappingsTestsProcess/DataWrappingMappingsTestsProcess.js"
    tibex:explicitCompensation="yes"
    tibex:xpdlId="_9JPIoIheEemL0JNuli1Mqw"
    xmlns:bpws="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:tibex="http://www.tibco.com/bpel/2007/extensions" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <tibex:VariableDescriptor type="PersistentBatching">
        <task name="_BX_SPOutput_Directsubprocessmappings">
            <startingVariables>
                <variable>ClassField</variable>
                <variable>NumberField</variable>
                <variable>TimeField</variable>
                <variable>DateTimeField</variable>
                <variable>PerformerField</variable>
                <variable>SimpleListField</variable>
                <variable>BooleanField</variable>
                <variable>DateField</variable>
                <variable>TextField</variable>
                <variable>FixedPointNumberField</variable>
                <variable>ComplexListField</variable>
            </startingVariables>
        </task>
        <task name="_BX_SPInput_Inflatesubprocessmappings">
            <startingVariables>
                <variable>ClassField</variable>
                <variable>NumberField</variable>
                <variable>TimeField</variable>
                <variable>DateTimeField</variable>
                <variable>PerformerField</variable>
                <variable>BooleanField</variable>
                <variable>SimpleListField</variable>
                <variable>DateField</variable>
                <variable>TextField</variable>
                <variable>FixedPointNumberField</variable>
                <variable>ComplexListField</variable>
            </startingVariables>
        </task>
        <task name="_BX_SPOutput_Inflatesubprocessmappings">
            <startingVariables>
                <variable>NumberField</variable>
                <variable>TimeField</variable>
                <variable>DateTimeField</variable>
                <variable>PerformerField</variable>
                <variable>BooleanField</variable>
                <variable>SimpleListField</variable>
                <variable>DateField</variable>
                <variable>TextField</variable>
                <variable>FixedPointNumberField</variable>
                <variable>ClassFieldtoInflate</variable>
                <variable>ComplexListField</variable>
            </startingVariables>
        </task>
        <task name="DirectScriptMappings">
            <startingVariables>
                <variable>MergingPartialComplexListField</variable>
                <variable>MergingSimpleListField</variable>
                <variable>BooleanField</variable>
                <variable>Copy_Of_DateTimeField</variable>
                <variable>DateField</variable>
                <variable>Copy_Of_TimeField</variable>
                <variable>Copy_Of_NumberField</variable>
                <variable>Copy_Of_ComplexListField</variable>
                <variable>TimeField</variable>
                <variable>TextField</variable>
                <variable>Copy_Of_ClassField</variable>
                <variable>FixedPointNumberField</variable>
                <variable>ComplexListField</variable>
                <variable>ClassField</variable>
                <variable>Copy_Of_DateField</variable>
                <variable>Copy_Of_PerformerField</variable>
                <variable>Copy_Of_TextField</variable>
                <variable>DateTimeField</variable>
                <variable>MergingComplexListField</variable>
                <variable>SimpleListField</variable>
                <variable>Copy_Of_ListFixedNumberTypeDecl</variable>
                <variable>ListFixedNumberTypeDecl</variable>
                <variable>Copy_Of_SimpleListField</variable>
                <variable>Copy_Of_MergingComplexListField</variable>
                <variable>NumberField</variable>
                <variable>Copy_Of_ClassFieldtoInflate</variable>
                <variable>Copy_Of_BooleanField</variable>
                <variable>FixedNumberTypeDecl</variable>
                <variable>PerformerField</variable>
                <variable>Copy_Of_MergingSimpleListField</variable>
                <variable>Copy_Of_FixedNumberTypeDecl</variable>
                <variable>ClassFieldtoInflate</variable>
                <variable>Copy_Of_MergingPartialComplexListField</variable>
                <variable>Copy_Of_FixedPointNumberField</variable>
            </startingVariables>
        </task>
        <task name="UserTask">
            <startingVariables>
                <variable>MergingPartialComplexListField</variable>
                <variable>MergingSimpleListField</variable>
                <variable>BooleanField</variable>
                <variable>TextField2</variable>
                <variable>DateField</variable>
                <variable>Copy_Of_DateTimeField</variable>
                <variable>Copy_Of_TimeField</variable>
                <variable>Copy_Of_NumberField</variable>
                <variable>Copy_Of_ComplexListField</variable>
                <variable>TimeField</variable>
                <variable>TextField</variable>
                <variable>Copy_Of_ClassField</variable>
                <variable>FixedPointNumberField</variable>
                <variable>ComplexListField</variable>
                <variable>ClassField</variable>
                <variable>Copy_Of_DateField</variable>
                <variable>Copy_Of_PerformerField</variable>
                <variable>Copy_Of_TextField</variable>
                <variable>DateTimeField</variable>
                <variable>SimpleListField</variable>
                <variable>MergingComplexListField</variable>
                <variable>Copy_Of_ListFixedNumberTypeDecl</variable>
                <variable>ListFixedNumberTypeDecl</variable>
                <variable>Copy_Of_SimpleListField</variable>
                <variable>Copy_Of_MergingComplexListField</variable>
                <variable>NumberField</variable>
                <variable>Copy_Of_ClassFieldtoInflate</variable>
                <variable>Copy_Of_BooleanField</variable>
                <variable>FixedNumberTypeDecl</variable>
                <variable>PerformerField</variable>
                <variable>Copy_Of_MergingSimpleListField</variable>
                <variable>Copy_Of_FixedNumberTypeDecl</variable>
                <variable>ClassFieldtoInflate</variable>
                <variable>Copy_Of_FixedPointNumberField</variable>
                <variable>Copy_Of_MergingPartialComplexListField</variable>
            </startingVariables>
        </task>
        <task name="_BX_SPInput_Directsubprocessmappings">
            <startingVariables>
                <variable>ClassField</variable>
                <variable>NumberField</variable>
                <variable>TimeField</variable>
                <variable>DateTimeField</variable>
                <variable>PerformerField</variable>
                <variable>SimpleListField</variable>
                <variable>BooleanField</variable>
                <variable>DateField</variable>
                <variable>TextField</variable>
                <variable>FixedPointNumberField</variable>
                <variable>ComplexListField</variable>
            </startingVariables>
        </task>
    </tibex:VariableDescriptor>
    <tibex:AuditDescriptor>
        <auditAttribute name="attribute2" type="Complex" value="ClassField.text"/>
        <auditAttribute name="attribute3" type="Complex" value="ClassField.complexChild.attribute1"/>
        <auditAttribute name="attribute4" type="Complex" value="ClassField.complexChild.attribute2"/>
        <auditAttribute name="attribute5" type="Complex" value="ClassField.fixed"/>
        <auditAttribute name="attribute6" type="Complex" value="ClassField.dateTimeTz"/>
        <auditAttribute name="attribute7" type="Simple" value="DateTimeField"/>
    </tibex:AuditDescriptor>
    <bpws:documentation>*** Generated by TIBCO Business Studio.</bpws:documentation>
    <bpws:variables>
        <bpws:variable name="BooleanField"
            tibex:xpdlId="_Qs58kIhfEemL0JNuli1Mqw" type="xsd:boolean"/>
        <bpws:variable name="SimpleListField" tibex:array="yes"
            tibex:xpdlId="_Qs58kYhfEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="DateTimeField"
            tibex:xpdlId="_Qs58kohfEemL0JNuli1Mqw" type="xsd:dateTime"/>
        <bpws:variable name="DateField"
            tibex:xpdlId="_Qs58k4hfEemL0JNuli1Mqw" type="xsd:date"/>
        <bpws:variable name="ClassField"
            tibex:class="com.example.data.DataTypes" tibex:xpdlId="_Qs58lIhfEemL0JNuli1Mqw"/>
        <bpws:variable name="PerformerField"
            tibex:xpdlId="_Qs58lYhfEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="TimeField"
            tibex:xpdlId="_Qs58lohfEemL0JNuli1Mqw" type="xsd:time"/>
        <bpws:variable name="FixedPointNumberField"
            tibex:xpdlId="_Qs58l4hfEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="NumberField"
            tibex:xpdlId="_Qs58mIhfEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="ComplexListField" tibex:array="yes"
            tibex:class="com.example.data.DataTypes" tibex:xpdlId="_Qs58mohfEemL0JNuli1Mqw"/>
        <bpws:variable name="ListFixedNumberTypeDecl" tibex:array="yes"
            tibex:xpdlId="_Qs58m4hfEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="FixedNumberTypeDecl"
            tibex:xpdlId="_Qs58nIhfEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="TextField"
            tibex:xpdlId="_Qs58nYhfEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="Copy_Of_PerformerField"
            tibex:xpdlId="_bqM7L4hgEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="Copy_Of_DateTimeField"
            tibex:xpdlId="_bqM7MIhgEemL0JNuli1Mqw" type="xsd:dateTime"/>
        <bpws:variable name="Copy_Of_ComplexListField" tibex:array="yes"
            tibex:class="com.example.data.DataTypes" tibex:xpdlId="_bqM7MYhgEemL0JNuli1Mqw"/>
        <bpws:variable name="Copy_Of_ClassField"
            tibex:class="com.example.data.DataTypes" tibex:xpdlId="_bqM7MohgEemL0JNuli1Mqw"/>
        <bpws:variable name="Copy_Of_BooleanField"
            tibex:xpdlId="_bqM7M4hgEemL0JNuli1Mqw" type="xsd:boolean"/>
        <bpws:variable name="Copy_Of_FixedPointNumberField"
            tibex:xpdlId="_bqM7NIhgEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="Copy_Of_FixedNumberTypeDecl"
            tibex:xpdlId="_bqM7NYhgEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="Copy_Of_SimpleListField" tibex:array="yes"
            tibex:xpdlId="_bqM7NohgEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="Copy_Of_NumberField"
            tibex:xpdlId="_bqM7N4hgEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="Copy_Of_TextField"
            tibex:xpdlId="_bqM7OIhgEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="Copy_Of_ListFixedNumberTypeDecl"
            tibex:array="yes" tibex:xpdlId="_bqM7OYhgEemL0JNuli1Mqw" type="xsd:double"/>
        <bpws:variable name="Copy_Of_DateField"
            tibex:xpdlId="_bqM7OohgEemL0JNuli1Mqw" type="xsd:date"/>
        <bpws:variable name="Copy_Of_TimeField"
            tibex:xpdlId="_bqM7O4hgEemL0JNuli1Mqw" type="xsd:time"/>
        <bpws:variable name="MergingSimpleListField" tibex:array="yes"
            tibex:xpdlId="_lMbtEYhlEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="MergingComplexListField" tibex:array="yes"
            tibex:class="com.example.data.DataTypes" tibex:xpdlId="_oD5CYYhlEemL0JNuli1Mqw"/>
        <bpws:variable name="Copy_Of_MergingComplexListField"
            tibex:array="yes" tibex:class="com.example.data.DataTypes" tibex:xpdlId="_qzDXUIhlEemL0JNuli1Mqw"/>
        <bpws:variable name="Copy_Of_MergingSimpleListField"
            tibex:array="yes" tibex:xpdlId="_qzDXUYhlEemL0JNuli1Mqw" type="xsd:string"/>
        <bpws:variable name="Copy_Of_MergingPartialComplexListField"
            tibex:array="yes" tibex:class="com.example.data.DataTypes" tibex:xpdlId="_ymOYsohlEemL0JNuli1Mqw"/>
        <bpws:variable name="MergingPartialComplexListField"
            tibex:array="yes" tibex:class="com.example.data.DataTypes" tibex:xpdlId="_ymOYs4hlEemL0JNuli1Mqw"/>
        <bpws:variable name="ClassFieldtoInflate"
            tibex:class="com.example.data.DataTypes" tibex:xpdlId="_I2QaEYkHEemL0JNuli1Mqw"/>
        <bpws:variable name="Copy_Of_ClassFieldtoInflate"
            tibex:class="com.example.data.DataTypes" tibex:xpdlId="_MN5rUYkHEemL0JNuli1Mqw"/>
        <bpws:variable name="TextField2"
            tibex:xpdlId="_MdMqQJQ5EemDnPS3BM6Yfw" type="xsd:string"/>
    </bpws:variables>
    <bpws:extensions>
        <bpws:extension mustUnderstand="yes" namespace="http://www.tibco.com/bpel/2007/extensions"/>
    </bpws:extensions>
    <bpws:eventHandlers/>
    <bpws:flow name="_BX_flow_gIsVwJQ_EemDnPS3BM6Yfw">
        <bpws:links>
            <bpws:link
                name="Inflatesubprocessmappings to DirectScriptMappings" tibex:xpdlId="_cm2JkIhgEemL0JNuli1Mqw"/>
            <bpws:link name="RESTCall to Directsubprocessmappings" tibex:xpdlId="_SuO7IIhfEemL0JNuli1Mqw"/>
            <bpws:link
                name="Directsubprocessmappings to Inflatesubprocessmappings" tibex:xpdlId="_BgKBIIt2EemO5bbkB2KC9w"/>
            <bpws:link name="StartEvent to RESTCall" tibex:xpdlId="_FBFwQIuBEemO5bbkB2KC9w"/>
            <bpws:link
                name="DirectScriptMappings to thisiswhatitshouldlooklike" tibex:xpdlId="_p2SPsJQvEemyk_o9zDEVZQ"/>
            <bpws:link
                name="thisiswhatitshouldlooklike to _y7TLkIk7EembeLH2VJH52Q" tibex:xpdlId="_0gsEQJQsEemyk_o9zDEVZQ"/>
            <bpws:link name="_y7TLkIk7EembeLH2VJH52Q to UserTask" tibex:xpdlId="_APHj0ZQ5EemDnPS3BM6Yfw"/>
        </bpws:links>
        <bpws:extensionActivity>
            <tibex:receiveEvent createInstance="yes" eventTimeout="0"
                name="StartEvent" tibex:type="startEvent"
                tibex:xpdlId="__f-9koheEemL0JNuli1Mqw" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:sources>
                    <bpws:source linkName="StartEvent to RESTCall"/>
                </bpws:sources>
                <tibex:eventSource>
                    <tibex:startEvent eventType="Default"/>
                </tibex:eventSource>
            </tibex:receiveEvent>
        </bpws:extensionActivity>
        <bpws:scope name="Directsubprocessmappings"
            tibex:migrationAllowed="yes" tibex:type="reusableSubProcess" tibex:xpdlId="_SuLQwIhfEemL0JNuli1Mqw">
            <bpws:targets>
                <bpws:target linkName="RESTCall to Directsubprocessmappings"/>
            </bpws:targets>
            <bpws:sources>
                <bpws:source linkName="Directsubprocessmappings to Inflatesubprocessmappings"/>
            </bpws:sources>
            <bpws:variables>
                <bpws:variable name="_BX_NumberParameter" type="xsd:double"/>
                <bpws:variable name="_BX_DateParameter" type="xsd:date"/>
                <bpws:variable name="_BX_DateTimeParameter" type="xsd:dateTime"/>
                <bpws:variable name="_BX_FixedPointNumberParameter" type="xsd:double"/>
                <bpws:variable name="_BX_ComplexListParameter"
                    tibex:array="yes" tibex:class="com.example.data.DataTypes"/>
                <bpws:variable name="_BX_TimeParameter" type="xsd:time"/>
                <bpws:variable name="_BX_PerformerParameter" type="xsd:string"/>
                <bpws:variable name="_BX_SimpleListParameter"
                    tibex:array="yes" type="xsd:string"/>
                <bpws:variable name="_BX_TextParameter" type="xsd:string"/>
                <bpws:variable name="_BX_ClassParameter" tibex:class="com.example.data.DataTypes"/>
                <bpws:variable name="_BX_BooleanParameter" type="xsd:boolean"/>
            </bpws:variables>
            <bpws:sequence name="_BX_sequence">
                <bpws:extensionActivity>
                    <tibex:extActivity
                        name="_BX_SPInput_Directsubprocessmappings" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                        <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Map from 'BooleanField' to 'BooleanParameter'
if (data != null) {
    _BX_BooleanParameter = data.BooleanField;
} else {
    _BX_BooleanParameter = null;
}

// Map from 'ClassField' to 'ClassParameter'
if (data != null) {
    _BX_ClassParameter = data.ClassField;
} else {
    _BX_ClassParameter = null;
}

// Map from 'ComplexListField' to 'ComplexListParameter'

// Overwrite list: ComplexListParameter
_BX_ComplexListParameter.length = 0;

if (data != null && data.ComplexListField != null) {

    for (var i1 = 0; i1 < data.ComplexListField.length; i1++) { 
        var $sVi1 = data.ComplexListField[i1];
        
        _BX_ComplexListParameter.push($sVi1);
    }
}

// Map from 'DateField' to 'DateParameter'
if (data != null) {
    _BX_DateParameter = data.DateField;
} else {
    _BX_DateParameter = null;
}

// Map from 'DateTimeField' to 'DateTimeParameter'
if (data != null) {
    _BX_DateTimeParameter = data.DateTimeField;
} else {
    _BX_DateTimeParameter = null;
}

// Map from 'FixedPointNumberField' to 'FixedPointNumberParameter'
if (data != null) {
    _BX_FixedPointNumberParameter = data.FixedPointNumberField;
} else {
    _BX_FixedPointNumberParameter = null;
}

// Map from 'NumberField' to 'NumberParameter'
if (data != null) {
    _BX_NumberParameter = data.NumberField;
} else {
    _BX_NumberParameter = null;
}

// Map from 'PerformerField' to 'PerformerParameter'
if (data != null) {
    _BX_PerformerParameter = data.PerformerField;
} else {
    _BX_PerformerParameter = null;
}

// Map from 'SimpleListField' to 'SimpleListParameter'

// Overwrite list: SimpleListParameter
_BX_SimpleListParameter.length = 0;

if (data != null && data.SimpleListField != null) {

    for (var i2 = 0; i2 < data.SimpleListField.length; i2++) { 
        var $sVi2 = data.SimpleListField[i2];
        
        _BX_SimpleListParameter.push($sVi2);
    }
}

// Map from 'TextField' to 'TextParameter'
if (data != null) {
    _BX_TextParameter = data.TextField;
} else {
    _BX_TextParameter = null;
}

// Map from 'TimeField' to 'TimeParameter'
if (data != null) {
    _BX_TimeParameter = data.TimeField;
} else {
    _BX_TimeParameter = null;
}


]]></tibex:script>
                    </tibex:extActivity>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <tibex:extActivity name="Directsubprocessmappings" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                        <tibex:callProcess followParentLifecycle="yes"
                            priority="inline" subProcessId="_B6NkUIhfEemL0JNuli1Mqw">
                            <tibex:subProcessInput>
                                <tibex:mapping
                                    field="_BX_NumberParameter" formalParameter="NumberParameter"/>
                                <tibex:mapping field="_BX_DateParameter" formalParameter="DateParameter"/>
                                <tibex:mapping
                                    field="_BX_DateTimeParameter" formalParameter="DateTimeParameter"/>
                                <tibex:mapping
                                    field="_BX_FixedPointNumberParameter" formalParameter="FixedPointNumberParameter"/>
                                <tibex:mapping
                                    field="_BX_ComplexListParameter" formalParameter="ComplexListParameter"/>
                                <tibex:mapping field="_BX_TimeParameter" formalParameter="TimeParameter"/>
                                <tibex:mapping
                                    field="_BX_PerformerParameter" formalParameter="PerformerParameter"/>
                                <tibex:mapping
                                    field="_BX_SimpleListParameter" formalParameter="SimpleListParameter"/>
                                <tibex:mapping field="_BX_TextParameter" formalParameter="TextParameter"/>
                                <tibex:mapping
                                    field="_BX_ClassParameter" formalParameter="ClassParameter"/>
                                <tibex:mapping
                                    field="_BX_BooleanParameter" formalParameter="BooleanParameter"/>
                            </tibex:subProcessInput>
                            <tibex:subProcessOutput>
                                <tibex:mapping
                                    field="_BX_NumberParameter" formalParameter="NumberParameter"/>
                                <tibex:mapping field="_BX_DateParameter" formalParameter="DateParameter"/>
                                <tibex:mapping
                                    field="_BX_DateTimeParameter" formalParameter="DateTimeParameter"/>
                                <tibex:mapping
                                    field="_BX_FixedPointNumberParameter" formalParameter="FixedPointNumberParameter"/>
                                <tibex:mapping
                                    field="_BX_ComplexListParameter" formalParameter="ComplexListParameter"/>
                                <tibex:mapping field="_BX_TimeParameter" formalParameter="TimeParameter"/>
                                <tibex:mapping
                                    field="_BX_PerformerParameter" formalParameter="PerformerParameter"/>
                                <tibex:mapping
                                    field="_BX_SimpleListParameter" formalParameter="SimpleListParameter"/>
                                <tibex:mapping field="_BX_TextParameter" formalParameter="TextParameter"/>
                                <tibex:mapping
                                    field="_BX_ClassParameter" formalParameter="ClassParameter"/>
                                <tibex:mapping
                                    field="_BX_BooleanParameter" formalParameter="BooleanParameter"/>
                            </tibex:subProcessOutput>
                        </tibex:callProcess>
                    </tibex:extActivity>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <tibex:extActivity
                        name="_BX_SPOutput_Directsubprocessmappings" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                        <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Map from 'BooleanParameter' to 'BooleanField'
data.BooleanField = _BX_BooleanParameter;

// Map from 'ClassParameter' to 'ClassField'
data.ClassField = _BX_ClassParameter;

// Map from 'ComplexListParameter' to 'ComplexListField'

// Overwrite list: ComplexListField
data.ComplexListField.length = 0;

if (_BX_ComplexListParameter != null) {

    for (var i1 = 0; i1 < _BX_ComplexListParameter.length; i1++) { 
        var $sVi1 = _BX_ComplexListParameter[i1];
        
        data.ComplexListField.push($sVi1);
    }
}

// Map from 'DateParameter' to 'DateField'
data.DateField = _BX_DateParameter;

// Map from 'DateTimeParameter' to 'DateTimeField'
data.DateTimeField = _BX_DateTimeParameter;

// Map from 'FixedPointNumberParameter' to 'FixedPointNumberField'
data.FixedPointNumberField = _BX_FixedPointNumberParameter;

// Map from 'NumberParameter' to 'NumberField'
data.NumberField = _BX_NumberParameter;

// Map from 'PerformerParameter' to 'PerformerField'
data.PerformerField = _BX_PerformerParameter;

// Map from 'SimpleListParameter' to 'SimpleListField'

// Overwrite list: SimpleListField
data.SimpleListField.length = 0;

if (_BX_SimpleListParameter != null) {

    for (var i2 = 0; i2 < _BX_SimpleListParameter.length; i2++) { 
        var $sVi2 = _BX_SimpleListParameter[i2];
        
        data.SimpleListField.push($sVi2);
    }
}

// Map from 'TextParameter' to 'TextField'
data.TextField = _BX_TextParameter;

// Map from 'TimeParameter' to 'TimeField'
data.TimeField = _BX_TimeParameter;


]]></tibex:script>
                    </tibex:extActivity>
                </bpws:extensionActivity>
            </bpws:sequence>
        </bpws:scope>
        <bpws:extensionActivity>
            <tibex:extActivity name="DirectScriptMappings"
                tibex:migrationAllowed="yes" tibex:type="scriptTask"
                tibex:xpdlId="_cm07cIhgEemL0JNuli1Mqw" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:targets>
                    <bpws:target linkName="Inflatesubprocessmappings to DirectScriptMappings"/>
                </bpws:targets>
                <bpws:sources>
                    <bpws:source linkName="DirectScriptMappings to thisiswhatitshouldlooklike"/>
                </bpws:sources>
                <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Map from 'BooleanField' to 'Copy_Of_BooleanField'
if (data != null) {
    data.Copy_Of_BooleanField = data.BooleanField;
} else {
    data.Copy_Of_BooleanField = null;
}

// Map from 'ClassField' to 'Copy_Of_ClassField'
if (data != null) {
    data.Copy_Of_ClassField = data.ClassField;
} else {
    data.Copy_Of_ClassField = null;
}

// Create target 'Copy_Of_ClassFieldtoInflate' if it doesn't exist.
if (data.Copy_Of_ClassFieldtoInflate == null) {
    data.Copy_Of_ClassFieldtoInflate = factory.com_example_data.createDataTypes();
}

// Map from 'ClassFieldtoInflate.URI' to 'Copy_Of_ClassFieldtoInflate.URI'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.URI = data.ClassFieldtoInflate.URI;
} else {
    data.Copy_Of_ClassFieldtoInflate.URI = null;
}

// Map from 'ClassFieldtoInflate.boolean1' to 'Copy_Of_ClassFieldtoInflate.boolean1'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.boolean1 = data.ClassFieldtoInflate.boolean1;
} else {
    data.Copy_Of_ClassFieldtoInflate.boolean1 = null;
}

// Map from 'ClassFieldtoInflate.date' to 'Copy_Of_ClassFieldtoInflate.date'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.date = data.ClassFieldtoInflate.date;
} else {
    data.Copy_Of_ClassFieldtoInflate.date = null;
}

// Map from 'ClassFieldtoInflate.dateTimeTz' to 'Copy_Of_ClassFieldtoInflate.dateTimeTz'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.dateTimeTz = data.ClassFieldtoInflate.dateTimeTz;
} else {
    data.Copy_Of_ClassFieldtoInflate.dateTimeTz = null;
}

// Map from 'ClassFieldtoInflate.enum1' to 'Copy_Of_ClassFieldtoInflate.enum1'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.enum1 = data.ClassFieldtoInflate.enum1;
} else {
    data.Copy_Of_ClassFieldtoInflate.enum1 = null;
}

// Map from 'ClassFieldtoInflate.fixed' to 'Copy_Of_ClassFieldtoInflate.fixed'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.fixed = data.ClassFieldtoInflate.fixed;
} else {
    data.Copy_Of_ClassFieldtoInflate.fixed = null;
}

// Map from 'ClassFieldtoInflate.float1' to 'Copy_Of_ClassFieldtoInflate.float1'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.float1 = data.ClassFieldtoInflate.float1;
} else {
    data.Copy_Of_ClassFieldtoInflate.float1 = null;
}

// Map from 'ClassFieldtoInflate.text' to 'Copy_Of_ClassFieldtoInflate.text'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.text = data.ClassFieldtoInflate.text;
} else {
    data.Copy_Of_ClassFieldtoInflate.text = null;
}

// Map from 'ClassFieldtoInflate.time' to 'Copy_Of_ClassFieldtoInflate.time'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.time = data.ClassFieldtoInflate.time;
} else {
    data.Copy_Of_ClassFieldtoInflate.time = null;
}

// Create target 'Copy_Of_ClassFieldtoInflate.complexChild' if it doesn't exist.
if (data.Copy_Of_ClassFieldtoInflate.complexChild == null) {
    data.Copy_Of_ClassFieldtoInflate.complexChild = factory.com_example_data.createChild();
}

// Map from 'ClassFieldtoInflate.complexChild.attribute1' to 'Copy_Of_ClassFieldtoInflate.complexChild.attribute1'
if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.complexChild != null) {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute1 = data.ClassFieldtoInflate.complexChild.attribute1;
} else {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute1 = null;
}

// Map from 'ClassFieldtoInflate.complexChild.attribute2' to 'Copy_Of_ClassFieldtoInflate.complexChild.attribute2'
if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.complexChild != null) {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute2 = data.ClassFieldtoInflate.complexChild.attribute2;
} else {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute2 = null;
}

// Overwrite list: Copy_Of_ClassFieldtoInflate.complexList
data.Copy_Of_ClassFieldtoInflate.complexList.length = 0;

if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.complexList != null) {

    for (var i1 = 0; i1 < data.ClassFieldtoInflate.complexList.length; i1++) { 
        var $sVi1 = data.ClassFieldtoInflate.complexList[i1];
        var $tVi1 = factory.com_example_data.createChild();

        // Map from 'ClassFieldtoInflate.complexList.attribute1' to 'Copy_Of_ClassFieldtoInflate.complexList.attribute1'
        $tVi1.attribute1 = $sVi1.attribute1;

        // Map from 'ClassFieldtoInflate.complexList.attribute2' to 'Copy_Of_ClassFieldtoInflate.complexList.attribute2'
        $tVi1.attribute2 = $sVi1.attribute2;
        
        data.Copy_Of_ClassFieldtoInflate.complexList.push($tVi1);
    }
}

// Map from 'ClassFieldtoInflate.enumList' to 'Copy_Of_ClassFieldtoInflate.enumList'

// Overwrite list: Copy_Of_ClassFieldtoInflate.enumList
data.Copy_Of_ClassFieldtoInflate.enumList.length = 0;

if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.enumList != null) {

    for (var i2 = 0; i2 < data.ClassFieldtoInflate.enumList.length; i2++) { 
        var $sVi2 = data.ClassFieldtoInflate.enumList[i2];
        
        data.Copy_Of_ClassFieldtoInflate.enumList.push($sVi2);
    }
}

// Map from 'ClassFieldtoInflate.textList' to 'Copy_Of_ClassFieldtoInflate.textList'

// Overwrite list: Copy_Of_ClassFieldtoInflate.textList
data.Copy_Of_ClassFieldtoInflate.textList.length = 0;

if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.textList != null) {

    for (var i3 = 0; i3 < data.ClassFieldtoInflate.textList.length; i3++) { 
        var $sVi3 = data.ClassFieldtoInflate.textList[i3];
        
        data.Copy_Of_ClassFieldtoInflate.textList.push($sVi3);
    }
}

// Map from 'ComplexListField' to 'Copy_Of_ComplexListField'

// Overwrite list: Copy_Of_ComplexListField
data.Copy_Of_ComplexListField.length = 0;

if (data != null && data.ComplexListField != null) {

    for (var i4 = 0; i4 < data.ComplexListField.length; i4++) { 
        var $sVi4 = data.ComplexListField[i4];
        
        data.Copy_Of_ComplexListField.push($sVi4);
    }
}

// Map from 'DateField' to 'Copy_Of_DateField'
if (data != null) {
    data.Copy_Of_DateField = data.DateField;
} else {
    data.Copy_Of_DateField = null;
}

// Map from 'DateTimeField' to 'Copy_Of_DateTimeField'
if (data != null) {
    data.Copy_Of_DateTimeField = data.DateTimeField;
} else {
    data.Copy_Of_DateTimeField = null;
}

// Map from 'FixedNumberTypeDecl' to 'Copy_Of_FixedNumberTypeDecl'
if (data != null) {
    data.Copy_Of_FixedNumberTypeDecl = data.FixedNumberTypeDecl;
} else {
    data.Copy_Of_FixedNumberTypeDecl = null;
}

// Map from 'FixedPointNumberField' to 'Copy_Of_FixedPointNumberField'
if (data != null) {
    data.Copy_Of_FixedPointNumberField = data.FixedPointNumberField;
} else {
    data.Copy_Of_FixedPointNumberField = null;
}

// Map from 'ListFixedNumberTypeDecl' to 'Copy_Of_ListFixedNumberTypeDecl'

// Overwrite list: Copy_Of_ListFixedNumberTypeDecl
data.Copy_Of_ListFixedNumberTypeDecl.length = 0;

if (data != null && data.ListFixedNumberTypeDecl != null) {

    for (var i5 = 0; i5 < data.ListFixedNumberTypeDecl.length; i5++) { 
        var $sVi5 = data.ListFixedNumberTypeDecl[i5];
        
        data.Copy_Of_ListFixedNumberTypeDecl.push($sVi5);
    }
}

// Map from 'MergingComplexListField' to 'Copy_Of_MergingComplexListField'

// Merge list content: Copy_Of_MergingComplexListField

if (data != null && data.MergingComplexListField != null) {

    for (var i6 = 0; i6 < data.MergingComplexListField.length; i6++) { 
        var $sVi6 = data.MergingComplexListField[i6];

        // Overwrite existing target elements from source with same index (else append when there are additional source elements)
        if (i6 < data.Copy_Of_MergingComplexListField.length) {
            data.Copy_Of_MergingComplexListField[i6] = $sVi6;
        } else {
            data.Copy_Of_MergingComplexListField.push($sVi6);
        }
    }
}

// Merge list content: Copy_Of_MergingPartialComplexListField

if (data != null && data.MergingPartialComplexListField != null) {

    for (var i7 = 0; i7 < data.MergingPartialComplexListField.length; i7++) { 
        var $sVi7 = data.MergingPartialComplexListField[i7];

        // Map to existing target elements from source with same index (else append new targets when there are additional source elements)
        var $tVi7;
        if (i7 < data.Copy_Of_MergingPartialComplexListField.length) {
            $tVi7 = data.Copy_Of_MergingPartialComplexListField[i7];
        } else {
            $tVi7 = factory.com_example_data.createDataTypes();
        }

        // Map from 'MergingPartialComplexListField.URI' to 'Copy_Of_MergingPartialComplexListField.URI'
        $tVi7.URI = $sVi7.URI;

        // Map from 'MergingPartialComplexListField.date' to 'Copy_Of_MergingPartialComplexListField.date'
        $tVi7.date = $sVi7.date;

        // Map from 'MergingPartialComplexListField.enum1' to 'Copy_Of_MergingPartialComplexListField.enum1'
        $tVi7.enum1 = $sVi7.enum1;

        // Map from 'MergingPartialComplexListField.float1' to 'Copy_Of_MergingPartialComplexListField.float1'
        $tVi7.float1 = $sVi7.float1;

        // Map from 'MergingPartialComplexListField.time' to 'Copy_Of_MergingPartialComplexListField.time'
        $tVi7.time = $sVi7.time;

        // Create target 'Copy_Of_MergingPartialComplexListField.complexChild' if it doesn't exist.
        if ($tVi7.complexChild == null) {
            $tVi7.complexChild = factory.com_example_data.createChild();
        }

        // Map from 'MergingPartialComplexListField.complexChild.attribute1' to 'Copy_Of_MergingPartialComplexListField.complexChild.attribute1'
        if ($sVi7.complexChild != null) {
            $tVi7.complexChild.attribute1 = $sVi7.complexChild.attribute1;
        } else {
            $tVi7.complexChild.attribute1 = null;
        }

        // Merge list content: Copy_Of_MergingPartialComplexListField.complexList
        
        if ($sVi7.complexList != null) {
        
            for (var i8 = 0; i8 < $sVi7.complexList.length; i8++) { 
                var $sVi8 = $sVi7.complexList[i8];

                // Map to existing target elements from source with same index (else append new targets when there are additional source elements)
                var $tVi8;
                if (i8 < $tVi7.complexList.length) {
                    $tVi8 = $tVi7.complexList[i8];
                } else {
                    $tVi8 = factory.com_example_data.createChild();
                }

                // Map from 'MergingPartialComplexListField.complexList.attribute1' to 'Copy_Of_MergingPartialComplexListField.complexList.attribute1'
                $tVi8.attribute1 = $sVi8.attribute1;
                
                if (i8 >= $tVi7.complexList.length) {
                    $tVi7.complexList.push($tVi8);
                }
            }
        }

        // Map from 'MergingPartialComplexListField.enumList' to 'Copy_Of_MergingPartialComplexListField.enumList'

        // Overwrite list: Copy_Of_MergingPartialComplexListField.enumList
        $tVi7.enumList.length = 0;
        
        if ($sVi7.enumList != null) {
        
            for (var i9 = 0; i9 < $sVi7.enumList.length; i9++) { 
                var $sVi9 = $sVi7.enumList[i9];
                
                $tVi7.enumList.push($sVi9);
            }
        }

        // Map from 'MergingPartialComplexListField.textList' to 'Copy_Of_MergingPartialComplexListField.textList'

        // Append to list: Copy_Of_MergingPartialComplexListField.textList
        
        if ($sVi7.textList != null) {
        
            for (var i10 = 0; i10 < $sVi7.textList.length; i10++) { 
                var $sVi10 = $sVi7.textList[i10];
                
                $tVi7.textList.push($sVi10);
            }
        }
        
        if (i7 >= data.Copy_Of_MergingPartialComplexListField.length) {
            data.Copy_Of_MergingPartialComplexListField.push($tVi7);
        }
    }
}

// Map from 'MergingSimpleListField' to 'Copy_Of_MergingSimpleListField'

// Merge list content: Copy_Of_MergingSimpleListField

if (data != null && data.MergingSimpleListField != null) {

    for (var i11 = 0; i11 < data.MergingSimpleListField.length; i11++) { 
        var $sVi11 = data.MergingSimpleListField[i11];

        // Overwrite existing target elements from source with same index (else append when there are additional source elements)
        if (i11 < data.Copy_Of_MergingSimpleListField.length) {
            data.Copy_Of_MergingSimpleListField[i11] = $sVi11;
        } else {
            data.Copy_Of_MergingSimpleListField.push($sVi11);
        }
    }
}

// Map from 'NumberField' to 'Copy_Of_NumberField'
if (data != null) {
    data.Copy_Of_NumberField = data.NumberField;
} else {
    data.Copy_Of_NumberField = null;
}

// Map from 'PerformerField' to 'Copy_Of_PerformerField'
if (data != null) {
    data.Copy_Of_PerformerField = data.PerformerField;
} else {
    data.Copy_Of_PerformerField = null;
}

// Map from 'SimpleListField' to 'Copy_Of_SimpleListField'

// Overwrite list: Copy_Of_SimpleListField
data.Copy_Of_SimpleListField.length = 0;

if (data != null && data.SimpleListField != null) {

    for (var i12 = 0; i12 < data.SimpleListField.length; i12++) { 
        var $sVi12 = data.SimpleListField[i12];
        
        data.Copy_Of_SimpleListField.push($sVi12);
    }
}

// Map from 'TextField' to 'Copy_Of_TextField'
if (data != null) {
    data.Copy_Of_TextField = data.TextField;
} else {
    data.Copy_Of_TextField = null;
}

// Map from 'TimeField' to 'Copy_Of_TimeField'
if (data != null) {
    data.Copy_Of_TimeField = data.TimeField;
} else {
    data.Copy_Of_TimeField = null;
}


]]></tibex:script>
            </tibex:extActivity>
        </bpws:extensionActivity>
        <bpws:empty name="Whatitusedtolooklikeseedescription"
            tibex:migrationAllowed="yes" tibex:type="task" tibex:xpdlId="_y7TLkIk7EembeLH2VJH52Q">
            <bpws:documentation>// Map from 'BooleanField' to 'Copy_Of_BooleanField'&#xd;
Copy_Of_BooleanField = BooleanField;&#xd;
&#xd;
// Map from 'ClassField' to 'Copy_Of_ClassField'&#xd;
Copy_Of_ClassField = ScriptUtil.copy(ClassField);&#xd;
&#xd;
// Create target 'Copy_Of_ClassFieldtoInflate' if it doesn't exist.&#xd;
if (Copy_Of_ClassFieldtoInflate == null) {&#xd;
    Copy_Of_ClassFieldtoInflate = com_example_data_Factory.createDataTypes();&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.URI' to 'Copy_Of_ClassFieldtoInflate.URI'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.URI = ClassFieldtoInflate.URI;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.URI = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.boolean1' to 'Copy_Of_ClassFieldtoInflate.boolean1'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.boolean1 = ClassFieldtoInflate.boolean1;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.boolean1 = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.date' to 'Copy_Of_ClassFieldtoInflate.date'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.date = ClassFieldtoInflate.date;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.date = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.dateTimeTz' to 'Copy_Of_ClassFieldtoInflate.dateTimeTz'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.dateTimeTz = ClassFieldtoInflate.dateTimeTz;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.dateTimeTz = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.enum1' to 'Copy_Of_ClassFieldtoInflate.enum1'&#xd;
if (ClassFieldtoInflate != null &amp;&amp; ClassFieldtoInflate.enum1 != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.enum1 = com_example_data_Enumeration1.get(String(String(ClassFieldtoInflate.enum1)));&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.enum1 = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.fixed' to 'Copy_Of_ClassFieldtoInflate.fixed'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.fixed = ClassFieldtoInflate.fixed;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.fixed = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.float1' to 'Copy_Of_ClassFieldtoInflate.float1'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.float1 = ClassFieldtoInflate.float1;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.float1 = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.text' to 'Copy_Of_ClassFieldtoInflate.text'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.text = ClassFieldtoInflate.text;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.text = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.time' to 'Copy_Of_ClassFieldtoInflate.time'&#xd;
if (ClassFieldtoInflate != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.time = ClassFieldtoInflate.time;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.time = null;&#xd;
}&#xd;
&#xd;
// Create target 'Copy_Of_ClassFieldtoInflate.complexChild' if it doesn't exist.&#xd;
if (Copy_Of_ClassFieldtoInflate.complexChild == null) {&#xd;
    Copy_Of_ClassFieldtoInflate.complexChild = com_example_data_Factory.createChild();&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.complexChild.attribute1' to 'Copy_Of_ClassFieldtoInflate.complexChild.attribute1'&#xd;
if (ClassFieldtoInflate != null &amp;&amp; ClassFieldtoInflate.complexChild != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.complexChild.attribute1 = ClassFieldtoInflate.complexChild.attribute1;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.complexChild.attribute1 = null;&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.complexChild.attribute2' to 'Copy_Of_ClassFieldtoInflate.complexChild.attribute2'&#xd;
if (ClassFieldtoInflate != null &amp;&amp; ClassFieldtoInflate.complexChild != null) {&#xd;
    Copy_Of_ClassFieldtoInflate.complexChild.attribute2 = ClassFieldtoInflate.complexChild.attribute2;&#xd;
} else {&#xd;
    Copy_Of_ClassFieldtoInflate.complexChild.attribute2 = null;&#xd;
}&#xd;
&#xd;
// Overwrite list: Copy_Of_ClassFieldtoInflate.complexList&#xd;
Copy_Of_ClassFieldtoInflate.complexList.clear();&#xd;
&#xd;
if (ClassFieldtoInflate != null &amp;&amp; ClassFieldtoInflate.complexList != null) {&#xd;
&#xd;
    for (var i1 = 0; i1 &lt; ClassFieldtoInflate.complexList.size(); i1++) { &#xd;
        var $sVi1 = ScriptUtil.copy(ClassFieldtoInflate.complexList.get(i1));&#xd;
        var $tVi1 = com_example_data_Factory.createChild();&#xd;
&#xd;
        // Map from 'ClassFieldtoInflate.complexList.attribute1' to 'Copy_Of_ClassFieldtoInflate.complexList.attribute1'&#xd;
        $tVi1.attribute1 = $sVi1.attribute1;&#xd;
&#xd;
        // Map from 'ClassFieldtoInflate.complexList.attribute2' to 'Copy_Of_ClassFieldtoInflate.complexList.attribute2'&#xd;
        $tVi1.attribute2 = $sVi1.attribute2;&#xd;
        &#xd;
        Copy_Of_ClassFieldtoInflate.complexList.add($tVi1);&#xd;
    }&#xd;
}&#xd;
&#xd;
// Map from 'ClassFieldtoInflate.textList' to 'Copy_Of_ClassFieldtoInflate.textList'&#xd;
&#xd;
// Overwrite list: Copy_Of_ClassFieldtoInflate.textList&#xd;
Copy_Of_ClassFieldtoInflate.textList.clear();&#xd;
&#xd;
if (ClassFieldtoInflate != null &amp;&amp; ClassFieldtoInflate.textList != null) {&#xd;
&#xd;
    for (var i2 = 0; i2 &lt; ClassFieldtoInflate.textList.size(); i2++) { &#xd;
        var $sVi2 = ClassFieldtoInflate.textList.get(i2);&#xd;
        &#xd;
        Copy_Of_ClassFieldtoInflate.textList.add($sVi2);&#xd;
    }&#xd;
}&#xd;
&#xd;
// Map from 'ComplexListField' to 'Copy_Of_ComplexListField'&#xd;
&#xd;
// Overwrite list: Copy_Of_ComplexListField&#xd;
Copy_Of_ComplexListField.clear();&#xd;
&#xd;
if (ComplexListField != null) {&#xd;
&#xd;
    for (var i3 = 0; i3 &lt; ComplexListField.size(); i3++) { &#xd;
        var $sVi3 = ScriptUtil.copy(ComplexListField.get(i3));&#xd;
        &#xd;
        Copy_Of_ComplexListField.add($sVi3);&#xd;
    }&#xd;
}&#xd;
&#xd;
// Map from 'DateField' to 'Copy_Of_DateField'&#xd;
Copy_Of_DateField = DateField;&#xd;
&#xd;
// Map from 'DateTimeField' to 'Copy_Of_DateTimeField'&#xd;
Copy_Of_DateTimeField = DateTimeField;&#xd;
&#xd;
// Map from 'FixedNumberTypeDecl' to 'Copy_Of_FixedNumberTypeDecl'&#xd;
Copy_Of_FixedNumberTypeDecl = FixedNumberTypeDecl;&#xd;
&#xd;
// Map from 'FixedPointNumberField' to 'Copy_Of_FixedPointNumberField'&#xd;
Copy_Of_FixedPointNumberField = FixedPointNumberField;&#xd;
&#xd;
// Map from 'ListFixedNumberTypeDecl' to 'Copy_Of_ListFixedNumberTypeDecl'&#xd;
&#xd;
// Overwrite list: Copy_Of_ListFixedNumberTypeDecl&#xd;
Copy_Of_ListFixedNumberTypeDecl.clear();&#xd;
&#xd;
if (ListFixedNumberTypeDecl != null) {&#xd;
&#xd;
    for (var i4 = 0; i4 &lt; ListFixedNumberTypeDecl.size(); i4++) { &#xd;
        var $sVi4 = ListFixedNumberTypeDecl.get(i4);&#xd;
        &#xd;
        Copy_Of_ListFixedNumberTypeDecl.add($sVi4);&#xd;
    }&#xd;
}&#xd;
&#xd;
// Map from 'MergingComplexListField' to 'Copy_Of_MergingComplexListField'&#xd;
&#xd;
// Merge list content: Copy_Of_MergingComplexListField&#xd;
&#xd;
if (MergingComplexListField != null) {&#xd;
&#xd;
    for (var i5 = 0; i5 &lt; MergingComplexListField.size(); i5++) { &#xd;
        var $sVi5 = ScriptUtil.copy(MergingComplexListField.get(i5));&#xd;
&#xd;
        // Overwrite existing target elements from source with same index (else append when there are additional source elements)&#xd;
        if (i5 &lt; Copy_Of_MergingComplexListField.size()) {&#xd;
            Copy_Of_MergingComplexListField.set(i5, $sVi5);&#xd;
        } else {&#xd;
            Copy_Of_MergingComplexListField.add($sVi5);&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
// Overwrite list: Copy_Of_MergingPartialComplexListField&#xd;
Copy_Of_MergingPartialComplexListField.clear();&#xd;
&#xd;
if (MergingPartialComplexListField != null) {&#xd;
&#xd;
    for (var i6 = 0; i6 &lt; MergingPartialComplexListField.size(); i6++) { &#xd;
        var $sVi6 = ScriptUtil.copy(MergingPartialComplexListField.get(i6));&#xd;
        var $tVi6 = com_example_data_Factory.createDataTypes();&#xd;
&#xd;
        // Map from 'MergingPartialComplexListField.URI' to 'Copy_Of_MergingPartialComplexListField.URI'&#xd;
        $tVi6.URI = $sVi6.URI;&#xd;
&#xd;
        // Map from 'MergingPartialComplexListField.date' to 'Copy_Of_MergingPartialComplexListField.date'&#xd;
        $tVi6.date = $sVi6.date;&#xd;
&#xd;
        // Map from 'MergingPartialComplexListField.enum1' to 'Copy_Of_MergingPartialComplexListField.enum1'&#xd;
        if ($sVi6.enum1 != null) {&#xd;
            $tVi6.enum1 = com_example_data_Enumeration1.get(String(String($sVi6.enum1)));&#xd;
        } else {&#xd;
            $tVi6.enum1 = null;&#xd;
        }&#xd;
&#xd;
        // Map from 'MergingPartialComplexListField.float1' to 'Copy_Of_MergingPartialComplexListField.float1'&#xd;
        $tVi6.float1 = $sVi6.float1;&#xd;
&#xd;
        // Map from 'MergingPartialComplexListField.time' to 'Copy_Of_MergingPartialComplexListField.time'&#xd;
        $tVi6.time = $sVi6.time;&#xd;
&#xd;
        // Create target 'Copy_Of_MergingPartialComplexListField.complexChild' if it doesn't exist.&#xd;
        if ($tVi6.complexChild == null) {&#xd;
            $tVi6.complexChild = com_example_data_Factory.createChild();&#xd;
        }&#xd;
&#xd;
        // Map from 'MergingPartialComplexListField.complexChild.attribute1' to 'Copy_Of_MergingPartialComplexListField.complexChild.attribute1'&#xd;
        if ($sVi6.complexChild != null) {&#xd;
            $tVi6.complexChild.attribute1 = $sVi6.complexChild.attribute1;&#xd;
        } else {&#xd;
            $tVi6.complexChild.attribute1 = null;&#xd;
        }&#xd;
&#xd;
        // Merge list content: Copy_Of_MergingPartialComplexListField.complexList&#xd;
        &#xd;
        if ($sVi6.complexList != null) {&#xd;
        &#xd;
            for (var i7 = 0; i7 &lt; $sVi6.complexList.size(); i7++) { &#xd;
                var $sVi7 = ScriptUtil.copy($sVi6.complexList.get(i7));&#xd;
&#xd;
                // Map to existing target elements from source with same index (else append new targets when there are additional source elements)&#xd;
                var $tVi7;&#xd;
                if (i7 &lt; $tVi6.complexList.size()) {&#xd;
                    $tVi7 = $tVi6.complexList.get(i7);&#xd;
                } else {&#xd;
                    $tVi7 = com_example_data_Factory.createChild();&#xd;
                }&#xd;
&#xd;
                // Map from 'MergingPartialComplexListField.complexList.attribute1' to 'Copy_Of_MergingPartialComplexListField.complexList.attribute1'&#xd;
                $tVi7.attribute1 = $sVi7.attribute1;&#xd;
                &#xd;
                if (i7 &gt;= $tVi6.complexList.size()) {&#xd;
                    $tVi6.complexList.add($tVi7);&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
&#xd;
        // Map from 'MergingPartialComplexListField.textList' to 'Copy_Of_MergingPartialComplexListField.textList'&#xd;
&#xd;
        // Append to list: Copy_Of_MergingPartialComplexListField.textList&#xd;
        &#xd;
        if ($sVi6.textList != null) {&#xd;
        &#xd;
            for (var i8 = 0; i8 &lt; $sVi6.textList.size(); i8++) { &#xd;
                var $sVi8 = $sVi6.textList.get(i8);&#xd;
                &#xd;
                $tVi6.textList.add($sVi8);&#xd;
            }&#xd;
        }&#xd;
        &#xd;
        Copy_Of_MergingPartialComplexListField.add($tVi6);&#xd;
    }&#xd;
}&#xd;
&#xd;
// Map from 'MergingSimpleListField' to 'Copy_Of_MergingSimpleListField'&#xd;
&#xd;
// Merge list content: Copy_Of_MergingSimpleListField&#xd;
&#xd;
if (MergingSimpleListField != null) {&#xd;
&#xd;
    for (var i9 = 0; i9 &lt; MergingSimpleListField.size(); i9++) { &#xd;
        var $sVi9 = MergingSimpleListField.get(i9);&#xd;
&#xd;
        // Overwrite existing target elements from source with same index (else append when there are additional source elements)&#xd;
        if (i9 &lt; Copy_Of_MergingSimpleListField.size()) {&#xd;
            Copy_Of_MergingSimpleListField.set(i9, $sVi9);&#xd;
        } else {&#xd;
            Copy_Of_MergingSimpleListField.add($sVi9);&#xd;
        }&#xd;
    }&#xd;
}&#xd;
&#xd;
// Map from 'NumberField' to 'Copy_Of_NumberField'&#xd;
Copy_Of_NumberField = NumberField;&#xd;
&#xd;
// Map from 'PerformerField' to 'Copy_Of_PerformerField'&#xd;
Copy_Of_PerformerField = PerformerField;&#xd;
&#xd;
// Map from 'SimpleListField' to 'Copy_Of_SimpleListField'&#xd;
&#xd;
// Overwrite list: Copy_Of_SimpleListField&#xd;
Copy_Of_SimpleListField.clear();&#xd;
&#xd;
if (SimpleListField != null) {&#xd;
&#xd;
    for (var i10 = 0; i10 &lt; SimpleListField.size(); i10++) { &#xd;
        var $sVi10 = SimpleListField.get(i10);&#xd;
        &#xd;
        Copy_Of_SimpleListField.add($sVi10);&#xd;
    }&#xd;
}&#xd;
&#xd;
// Map from 'TextField' to 'Copy_Of_TextField'&#xd;
Copy_Of_TextField = TextField;&#xd;
&#xd;
// Map from 'TimeField' to 'Copy_Of_TimeField'&#xd;
Copy_Of_TimeField = TimeField;&#xd;
&#xd;
&#xd;
</bpws:documentation>
            <bpws:targets>
                <bpws:target linkName="thisiswhatitshouldlooklike to _y7TLkIk7EembeLH2VJH52Q"/>
            </bpws:targets>
            <bpws:sources>
                <bpws:source linkName="_y7TLkIk7EembeLH2VJH52Q to UserTask"/>
            </bpws:sources>
        </bpws:empty>
        <bpws:scope name="Inflatesubprocessmappings"
            tibex:migrationAllowed="yes" tibex:type="reusableSubProcess" tibex:xpdlId="_BgIzAIt2EemO5bbkB2KC9w">
            <bpws:targets>
                <bpws:target linkName="Directsubprocessmappings to Inflatesubprocessmappings"/>
            </bpws:targets>
            <bpws:sources>
                <bpws:source linkName="Inflatesubprocessmappings to DirectScriptMappings"/>
            </bpws:sources>
            <bpws:variables>
                <bpws:variable name="_BX_NumberParameter" type="xsd:double"/>
                <bpws:variable name="_BX_DateParameter" type="xsd:date"/>
                <bpws:variable name="_BX_DateTimeParameter" type="xsd:dateTime"/>
                <bpws:variable name="_BX_FixedPointNumberParameter" type="xsd:double"/>
                <bpws:variable name="_BX_ComplexListParameter"
                    tibex:array="yes" tibex:class="com.example.data.DataTypes"/>
                <bpws:variable name="_BX_TimeParameter" type="xsd:time"/>
                <bpws:variable name="_BX_PerformerParameter" type="xsd:string"/>
                <bpws:variable name="_BX_SimpleListParameter"
                    tibex:array="yes" type="xsd:string"/>
                <bpws:variable name="_BX_TextParameter" type="xsd:string"/>
                <bpws:variable name="_BX_ClassParameter" tibex:class="com.example.data.DataTypes"/>
                <bpws:variable name="_BX_BooleanParameter" type="xsd:boolean"/>
            </bpws:variables>
            <bpws:sequence name="_BX_sequence_2">
                <bpws:extensionActivity>
                    <tibex:extActivity
                        name="_BX_SPInput_Inflatesubprocessmappings" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                        <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Map from 'BooleanField' to 'BooleanParameter'
if (data != null) {
    _BX_BooleanParameter = data.BooleanField;
} else {
    _BX_BooleanParameter = null;
}

// Create target 'ClassParameter' if it doesn't exist.
if (_BX_ClassParameter == null) {
    _BX_ClassParameter = factory.com_example_data.createDataTypes();
}

// Map from 'ClassField.URI' to 'ClassParameter.URI'
if (data != null && data.ClassField != null) {
    _BX_ClassParameter.URI = data.ClassField.URI;
} else {
    _BX_ClassParameter.URI = null;
}

// Map from 'ClassField.date' to 'ClassParameter.date'
if (data != null && data.ClassField != null) {
    _BX_ClassParameter.date = data.ClassField.date;
} else {
    _BX_ClassParameter.date = null;
}

// Map from 'ClassField.enum1' to 'ClassParameter.enum1'
if (data != null && data.ClassField != null) {
    _BX_ClassParameter.enum1 = data.ClassField.enum1;
} else {
    _BX_ClassParameter.enum1 = null;
}

// Map from 'ClassField.float1' to 'ClassParameter.float1'
if (data != null && data.ClassField != null) {
    _BX_ClassParameter.float1 = data.ClassField.float1;
} else {
    _BX_ClassParameter.float1 = null;
}

// Map from 'ClassField.time' to 'ClassParameter.time'
if (data != null && data.ClassField != null) {
    _BX_ClassParameter.time = data.ClassField.time;
} else {
    _BX_ClassParameter.time = null;
}

// Create target 'ClassParameter.complexChild' if it doesn't exist.
if (_BX_ClassParameter.complexChild == null) {
    _BX_ClassParameter.complexChild = factory.com_example_data.createChild();
}

// Map from 'ClassField.complexChild.attribute1' to 'ClassParameter.complexChild.attribute1'
if (data != null && data.ClassField != null && data.ClassField.complexChild != null) {
    _BX_ClassParameter.complexChild.attribute1 = data.ClassField.complexChild.attribute1;
} else {
    _BX_ClassParameter.complexChild.attribute1 = null;
}

// Overwrite list: ClassParameter.complexList
_BX_ClassParameter.complexList.length = 0;

if (data != null && data.ClassField != null && data.ClassField.complexList != null) {

    for (var i1 = 0; i1 < data.ClassField.complexList.length; i1++) { 
        var $sVi1 = data.ClassField.complexList[i1];
        var $tVi1 = factory.com_example_data.createChild();

        // Map from 'ClassField.complexList.attribute1' to 'ClassParameter.complexList.attribute1'
        $tVi1.attribute1 = $sVi1.attribute1;
        
        _BX_ClassParameter.complexList.push($tVi1);
    }
}

// Map from 'ClassField.textList' to 'ClassParameter.textList'

// Overwrite list: ClassParameter.textList
_BX_ClassParameter.textList.length = 0;

if (data != null && data.ClassField != null && data.ClassField.textList != null) {

    for (var i2 = 0; i2 < data.ClassField.textList.length; i2++) { 
        var $sVi2 = data.ClassField.textList[i2];
        
        _BX_ClassParameter.textList.push($sVi2);
    }
}

// Overwrite list: ComplexListParameter
_BX_ComplexListParameter.length = 0;

if (data != null && data.ComplexListField != null) {

    for (var i3 = 0; i3 < data.ComplexListField.length; i3++) { 
        var $sVi3 = data.ComplexListField[i3];
        var $tVi3 = factory.com_example_data.createDataTypes();

        // Map from 'ComplexListField.boolean1' to 'ComplexListParameter.boolean1'
        $tVi3.boolean1 = $sVi3.boolean1;

        // Map from 'ComplexListField.dateTimeTz' to 'ComplexListParameter.dateTimeTz'
        $tVi3.dateTimeTz = $sVi3.dateTimeTz;

        // Map from 'ComplexListField.fixed' to 'ComplexListParameter.fixed'
        $tVi3.fixed = $sVi3.fixed;

        // Map from 'ComplexListField.text' to 'ComplexListParameter.text'
        $tVi3.text = $sVi3.text;

        // Create target 'ComplexListParameter.complexChild' if it doesn't exist.
        if ($tVi3.complexChild == null) {
            $tVi3.complexChild = factory.com_example_data.createChild();
        }

        // Map from 'ComplexListField.complexChild.attribute2' to 'ComplexListParameter.complexChild.attribute2'
        if ($sVi3.complexChild != null) {
            $tVi3.complexChild.attribute2 = $sVi3.complexChild.attribute2;
        } else {
            $tVi3.complexChild.attribute2 = null;
        }

        // Overwrite list: ComplexListParameter.complexList
        $tVi3.complexList.length = 0;
        
        if ($sVi3.complexList != null) {
        
            for (var i4 = 0; i4 < $sVi3.complexList.length; i4++) { 
                var $sVi4 = $sVi3.complexList[i4];
                var $tVi4 = factory.com_example_data.createChild();

                // Map from 'ComplexListField.complexList.attribute2' to 'ComplexListParameter.complexList.attribute2'
                $tVi4.attribute2 = $sVi4.attribute2;
                
                $tVi3.complexList.push($tVi4);
            }
        }

        // Map from 'ComplexListField.textList' to 'ComplexListParameter.textList'

        // Overwrite list: ComplexListParameter.textList
        $tVi3.textList.length = 0;
        
        if ($sVi3.textList != null) {
        
            for (var i5 = 0; i5 < $sVi3.textList.length; i5++) { 
                var $sVi5 = $sVi3.textList[i5];
                
                $tVi3.textList.push($sVi5);
            }
        }
        
        _BX_ComplexListParameter.push($tVi3);
    }
}

// Map from 'DateField' to 'DateParameter'
if (data != null) {
    _BX_DateParameter = data.DateField;
} else {
    _BX_DateParameter = null;
}

// Map from 'DateTimeField' to 'DateTimeParameter'
if (data != null) {
    _BX_DateTimeParameter = data.DateTimeField;
} else {
    _BX_DateTimeParameter = null;
}

// Map from 'FixedPointNumberField' to 'FixedPointNumberParameter'
if (data != null) {
    _BX_FixedPointNumberParameter = data.FixedPointNumberField;
} else {
    _BX_FixedPointNumberParameter = null;
}

// Map from 'NumberField' to 'NumberParameter'
if (data != null) {
    _BX_NumberParameter = data.NumberField;
} else {
    _BX_NumberParameter = null;
}

// Map from 'PerformerField' to 'PerformerParameter'
if (data != null) {
    _BX_PerformerParameter = data.PerformerField;
} else {
    _BX_PerformerParameter = null;
}

// Map from 'SimpleListField' to 'SimpleListParameter'

// Overwrite list: SimpleListParameter
_BX_SimpleListParameter.length = 0;

if (data != null && data.SimpleListField != null) {

    for (var i6 = 0; i6 < data.SimpleListField.length; i6++) { 
        var $sVi6 = data.SimpleListField[i6];
        
        _BX_SimpleListParameter.push($sVi6);
    }
}

// Map from 'TextField' to 'TextParameter'
if (data != null) {
    _BX_TextParameter = data.TextField;
} else {
    _BX_TextParameter = null;
}

// Map from 'TimeField' to 'TimeParameter'
if (data != null) {
    _BX_TimeParameter = data.TimeField;
} else {
    _BX_TimeParameter = null;
}


]]></tibex:script>
                    </tibex:extActivity>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <tibex:extActivity name="Inflatesubprocessmappings" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                        <tibex:callProcess followParentLifecycle="yes"
                            priority="inline" subProcessId="_B6NkUIhfEemL0JNuli1Mqw">
                            <tibex:subProcessInput>
                                <tibex:mapping
                                    field="_BX_NumberParameter" formalParameter="NumberParameter"/>
                                <tibex:mapping field="_BX_DateParameter" formalParameter="DateParameter"/>
                                <tibex:mapping
                                    field="_BX_DateTimeParameter" formalParameter="DateTimeParameter"/>
                                <tibex:mapping
                                    field="_BX_FixedPointNumberParameter" formalParameter="FixedPointNumberParameter"/>
                                <tibex:mapping
                                    field="_BX_ComplexListParameter" formalParameter="ComplexListParameter"/>
                                <tibex:mapping field="_BX_TimeParameter" formalParameter="TimeParameter"/>
                                <tibex:mapping
                                    field="_BX_PerformerParameter" formalParameter="PerformerParameter"/>
                                <tibex:mapping
                                    field="_BX_SimpleListParameter" formalParameter="SimpleListParameter"/>
                                <tibex:mapping field="_BX_TextParameter" formalParameter="TextParameter"/>
                                <tibex:mapping
                                    field="_BX_ClassParameter" formalParameter="ClassParameter"/>
                                <tibex:mapping
                                    field="_BX_BooleanParameter" formalParameter="BooleanParameter"/>
                            </tibex:subProcessInput>
                            <tibex:subProcessOutput>
                                <tibex:mapping
                                    field="_BX_NumberParameter" formalParameter="NumberParameter"/>
                                <tibex:mapping field="_BX_DateParameter" formalParameter="DateParameter"/>
                                <tibex:mapping
                                    field="_BX_DateTimeParameter" formalParameter="DateTimeParameter"/>
                                <tibex:mapping
                                    field="_BX_FixedPointNumberParameter" formalParameter="FixedPointNumberParameter"/>
                                <tibex:mapping
                                    field="_BX_ComplexListParameter" formalParameter="ComplexListParameter"/>
                                <tibex:mapping field="_BX_TimeParameter" formalParameter="TimeParameter"/>
                                <tibex:mapping
                                    field="_BX_PerformerParameter" formalParameter="PerformerParameter"/>
                                <tibex:mapping
                                    field="_BX_SimpleListParameter" formalParameter="SimpleListParameter"/>
                                <tibex:mapping field="_BX_TextParameter" formalParameter="TextParameter"/>
                                <tibex:mapping
                                    field="_BX_ClassParameter" formalParameter="ClassParameter"/>
                                <tibex:mapping
                                    field="_BX_BooleanParameter" formalParameter="BooleanParameter"/>
                            </tibex:subProcessOutput>
                        </tibex:callProcess>
                    </tibex:extActivity>
                </bpws:extensionActivity>
                <bpws:extensionActivity>
                    <tibex:extActivity
                        name="_BX_SPOutput_Inflatesubprocessmappings" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                        <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Map from 'BooleanParameter' to 'BooleanField'
data.BooleanField = _BX_BooleanParameter;

// Create target 'ClassFieldtoInflate' if it doesn't exist.
if (data.ClassFieldtoInflate == null) {
    data.ClassFieldtoInflate = factory.com_example_data.createDataTypes();
}

// Map from 'ClassParameter.URI' to 'ClassFieldtoInflate.URI'
if (_BX_ClassParameter != null) {
    data.ClassFieldtoInflate.URI = _BX_ClassParameter.URI;
} else {
    data.ClassFieldtoInflate.URI = null;
}

// Map from 'ClassParameter.date' to 'ClassFieldtoInflate.date'
if (_BX_ClassParameter != null) {
    data.ClassFieldtoInflate.date = _BX_ClassParameter.date;
} else {
    data.ClassFieldtoInflate.date = null;
}

// Map from 'ClassParameter.enum1' to 'ClassFieldtoInflate.enum1'
if (_BX_ClassParameter != null) {
    data.ClassFieldtoInflate.enum1 = _BX_ClassParameter.enum1;
} else {
    data.ClassFieldtoInflate.enum1 = null;
}

// Map from 'ClassParameter.float1' to 'ClassFieldtoInflate.float1'
if (_BX_ClassParameter != null) {
    data.ClassFieldtoInflate.float1 = _BX_ClassParameter.float1;
} else {
    data.ClassFieldtoInflate.float1 = null;
}

// Map from 'ClassParameter.time' to 'ClassFieldtoInflate.time'
if (_BX_ClassParameter != null) {
    data.ClassFieldtoInflate.time = _BX_ClassParameter.time;
} else {
    data.ClassFieldtoInflate.time = null;
}

// Create target 'ClassFieldtoInflate.complexChild' if it doesn't exist.
if (data.ClassFieldtoInflate.complexChild == null) {
    data.ClassFieldtoInflate.complexChild = factory.com_example_data.createChild();
}

// Map from 'ClassParameter.complexChild.attribute1' to 'ClassFieldtoInflate.complexChild.attribute1'
if (_BX_ClassParameter != null && _BX_ClassParameter.complexChild != null) {
    data.ClassFieldtoInflate.complexChild.attribute1 = _BX_ClassParameter.complexChild.attribute1;
} else {
    data.ClassFieldtoInflate.complexChild.attribute1 = null;
}

// Overwrite list: ClassFieldtoInflate.complexList
data.ClassFieldtoInflate.complexList.length = 0;

if (_BX_ClassParameter != null && _BX_ClassParameter.complexList != null) {

    for (var i1 = 0; i1 < _BX_ClassParameter.complexList.length; i1++) { 
        var $sVi1 = _BX_ClassParameter.complexList[i1];
        var $tVi1 = factory.com_example_data.createChild();

        // Map from 'ClassParameter.complexList.attribute1' to 'ClassFieldtoInflate.complexList.attribute1'
        $tVi1.attribute1 = $sVi1.attribute1;
        
        data.ClassFieldtoInflate.complexList.push($tVi1);
    }
}

// Map from 'ClassParameter.textList' to 'ClassFieldtoInflate.textList'

// Overwrite list: ClassFieldtoInflate.textList
data.ClassFieldtoInflate.textList.length = 0;

if (_BX_ClassParameter != null && _BX_ClassParameter.textList != null) {

    for (var i2 = 0; i2 < _BX_ClassParameter.textList.length; i2++) { 
        var $sVi2 = _BX_ClassParameter.textList[i2];
        
        data.ClassFieldtoInflate.textList.push($sVi2);
    }
}

// Merge list content: ComplexListField

if (_BX_ComplexListParameter != null) {

    for (var i3 = 0; i3 < _BX_ComplexListParameter.length; i3++) { 
        var $sVi3 = _BX_ComplexListParameter[i3];

        // Map to existing target elements from source with same index (else append new targets when there are additional source elements)
        var $tVi3;
        if (i3 < data.ComplexListField.length) {
            $tVi3 = data.ComplexListField[i3];
        } else {
            $tVi3 = factory.com_example_data.createDataTypes();
        }

        // Map from 'ComplexListParameter.boolean1' to 'ComplexListField.boolean1'
        $tVi3.boolean1 = $sVi3.boolean1;

        // Map from 'ComplexListParameter.dateTimeTz' to 'ComplexListField.dateTimeTz'
        $tVi3.dateTimeTz = $sVi3.dateTimeTz;

        // Map from 'ComplexListParameter.fixed' to 'ComplexListField.fixed'
        $tVi3.fixed = $sVi3.fixed;

        // Map from 'ComplexListParameter.text' to 'ComplexListField.text'
        $tVi3.text = $sVi3.text;

        // Create target 'ComplexListField.complexChild' if it doesn't exist.
        if ($tVi3.complexChild == null) {
            $tVi3.complexChild = factory.com_example_data.createChild();
        }

        // Map from 'ComplexListParameter.complexChild.attribute2' to 'ComplexListField.complexChild.attribute2'
        if ($sVi3.complexChild != null) {
            $tVi3.complexChild.attribute2 = $sVi3.complexChild.attribute2;
        } else {
            $tVi3.complexChild.attribute2 = null;
        }

        // Overwrite list: ComplexListField.complexList
        $tVi3.complexList.length = 0;
        
        if ($sVi3.complexList != null) {
        
            for (var i4 = 0; i4 < $sVi3.complexList.length; i4++) { 
                var $sVi4 = $sVi3.complexList[i4];
                var $tVi4 = factory.com_example_data.createChild();

                // Map from 'ComplexListParameter.complexList.attribute2' to 'ComplexListField.complexList.attribute2'
                $tVi4.attribute2 = $sVi4.attribute2;
                
                $tVi3.complexList.push($tVi4);
            }
        }

        // Map from 'ComplexListParameter.textList' to 'ComplexListField.textList'

        // Overwrite list: ComplexListField.textList
        $tVi3.textList.length = 0;
        
        if ($sVi3.textList != null) {
        
            for (var i5 = 0; i5 < $sVi3.textList.length; i5++) { 
                var $sVi5 = $sVi3.textList[i5];
                
                $tVi3.textList.push($sVi5);
            }
        }
        
        if (i3 >= data.ComplexListField.length) {
            data.ComplexListField.push($tVi3);
        }
    }
}

// Map from 'DateParameter' to 'DateField'
data.DateField = _BX_DateParameter;

// Map from 'DateTimeParameter' to 'DateTimeField'
data.DateTimeField = _BX_DateTimeParameter;

// Map from 'FixedPointNumberParameter' to 'FixedPointNumberField'
data.FixedPointNumberField = _BX_FixedPointNumberParameter;

// Map from 'NumberParameter' to 'NumberField'
data.NumberField = _BX_NumberParameter;

// Map from 'PerformerParameter' to 'PerformerField'
data.PerformerField = _BX_PerformerParameter;

// Map from 'SimpleListParameter' to 'SimpleListField'

// Overwrite list: SimpleListField
data.SimpleListField.length = 0;

if (_BX_SimpleListParameter != null) {

    for (var i6 = 0; i6 < _BX_SimpleListParameter.length; i6++) { 
        var $sVi6 = _BX_SimpleListParameter[i6];
        
        data.SimpleListField.push($sVi6);
    }
}

// Map from 'TextParameter' to 'TextField'
data.TextField = _BX_TextParameter;

// Map from 'TimeParameter' to 'TimeField'
data.TimeField = _BX_TimeParameter;


]]></tibex:script>
                    </tibex:extActivity>
                </bpws:extensionActivity>
            </bpws:sequence>
        </bpws:scope>
        <bpws:invoke name="RESTCall" tibex:invokeType="REST"
            tibex:migrationAllowed="yes"
            tibex:sharedResourceName="DataWrappingREST-Service"
            tibex:sharedResourceType="HTTPClient"
            tibex:type="serviceTask" tibex:xpdlId="_FBDUBIuBEemO5bbkB2KC9w">
            <tibex:restResponseScript expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Get response data.
var REST_HEADER_headerparam1 = REST_RESPONSE.getHeader('headerparam1');
var REST_STATUS_CODE = REST_RESPONSE.getStatus();
var REST_PAYLOAD = null;

try {
    REST_PAYLOAD  = JSON.parse(REST_RESPONSE.getData());
} catch(ex) {

    // Wrap exception in something more obvious if the response data parse fails (probably not JSON format)
    throw "    JSON Response payload parsing failed (not formatted correctly as JSON string?).\n" + 
        "        Parser Exception: " + ex.message + "\n---------------------------------\n" + 
        "        Payload Text: \n" + REST_RESPONSE.getData() + "\n---------------------------------\n";
    
}

// Map from 'Payload.RequestResponse.booleanProperty' to 'BooleanField'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['booleanProperty']) != "undefined" && REST_PAYLOAD['booleanProperty'] != null)) {
    data.BooleanField = REST_PAYLOAD['booleanProperty'];
} else {
    data.BooleanField = null;
}

// Create target 'ClassField' if it doesn't exist.
if (data.ClassField == null) {
    data.ClassField = factory.com_example_data.createDataTypes();
}

// Map from 'Payload.RequestResponse.complexType.booleanProperty' to 'ClassField.boolean1'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['complexType']) != "undefined" && REST_PAYLOAD['complexType'] != null) &&
   (typeof(REST_PAYLOAD['complexType']['booleanProperty']) != "undefined" && REST_PAYLOAD['complexType']['booleanProperty'] != null)) {
    data.ClassField.boolean1 = REST_PAYLOAD['complexType']['booleanProperty'];
} else {
    data.ClassField.boolean1 = null;
}

// Map from 'Payload.RequestResponse.complexType.dataProperty' to 'ClassField.date'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['complexType']) != "undefined" && REST_PAYLOAD['complexType'] != null) &&
   (typeof(REST_PAYLOAD['complexType']['dataProperty']) != "undefined" && REST_PAYLOAD['complexType']['dataProperty'] != null)) {
    data.ClassField.date = REST_PAYLOAD['complexType']['dataProperty'];
} else {
    data.ClassField.date = null;
}

// Map from 'Payload.RequestResponse.complexType.dateTimeProperty' to 'ClassField.dateTimeTz'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['complexType']) != "undefined" && REST_PAYLOAD['complexType'] != null) &&
   (typeof(REST_PAYLOAD['complexType']['dateTimeProperty']) != "undefined" && REST_PAYLOAD['complexType']['dateTimeProperty'] != null)) {
    data.ClassField.dateTimeTz = REST_PAYLOAD['complexType']['dateTimeProperty'];
} else {
    data.ClassField.dateTimeTz = null;
}

// Map from 'Payload.RequestResponse.textToFromEnum' to 'ClassField.enum1'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['textToFromEnum']) != "undefined" && REST_PAYLOAD['textToFromEnum'] != null)) {
    data.ClassField.enum1 = REST_PAYLOAD['textToFromEnum'];
} else {
    data.ClassField.enum1 = null;
}

// Map from 'Payload.RequestResponse.complexType.integerProperty' to 'ClassField.float1'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['complexType']) != "undefined" && REST_PAYLOAD['complexType'] != null) &&
   (typeof(REST_PAYLOAD['complexType']['integerProperty']) != "undefined" && REST_PAYLOAD['complexType']['integerProperty'] != null)) {
    data.ClassField.float1 = REST_PAYLOAD['complexType']['integerProperty'];
} else {
    data.ClassField.float1 = null;
}

// Map from 'Payload.RequestResponse.complexType.textProperty' to 'ClassField.text'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['complexType']) != "undefined" && REST_PAYLOAD['complexType'] != null) &&
   (typeof(REST_PAYLOAD['complexType']['textProperty']) != "undefined" && REST_PAYLOAD['complexType']['textProperty'] != null)) {
    data.ClassField.text = REST_PAYLOAD['complexType']['textProperty'];
} else {
    data.ClassField.text = null;
}

// Map from 'Payload.RequestResponse.complexType.timeProperty' to 'ClassField.time'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['complexType']) != "undefined" && REST_PAYLOAD['complexType'] != null) &&
   (typeof(REST_PAYLOAD['complexType']['timeProperty']) != "undefined" && REST_PAYLOAD['complexType']['timeProperty'] != null)) {
    data.ClassField.time = REST_PAYLOAD['complexType']['timeProperty'];
} else {
    data.ClassField.time = null;
}

// Overwrite list: ClassField.complexList
data.ClassField.complexList.length = 0;

if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['complexTypeList']) != "undefined" && REST_PAYLOAD['complexTypeList'] != null)) {

    for (var i1 = 0; i1 < REST_PAYLOAD['complexTypeList'].length; i1++) { 
        var $sVi1 = REST_PAYLOAD['complexTypeList'][i1];
        var $tVi1 = factory.com_example_data.createChild();

        // Map from 'Payload.RequestResponse.complexTypeList.textProperty' to 'ClassField.complexList.attribute1'
        if ((typeof($sVi1['textProperty']) != "undefined" && $sVi1['textProperty'] != null)) {
            $tVi1.attribute1 = $sVi1['textProperty'];
        } else {
            $tVi1.attribute1 = null;
        }
        
        data.ClassField.complexList.push($tVi1);
    }
}

// Map from 'Payload.RequestResponse.textToFromEnumList' to 'ClassField.enumList'

// Overwrite list: ClassField.enumList
data.ClassField.enumList.length = 0;

if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['textToFromEnumList']) != "undefined" && REST_PAYLOAD['textToFromEnumList'] != null)) {

    for (var i2 = 0; i2 < REST_PAYLOAD['textToFromEnumList'].length; i2++) { 
        var $sVi2 = REST_PAYLOAD['textToFromEnumList'][i2];
        
        data.ClassField.enumList.push($sVi2);
    }
}

// Map from 'Payload.RequestResponse.textList' to 'ClassField.textList'

// Overwrite list: ClassField.textList
data.ClassField.textList.length = 0;

if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['textList']) != "undefined" && REST_PAYLOAD['textList'] != null)) {

    for (var i3 = 0; i3 < REST_PAYLOAD['textList'].length; i3++) { 
        var $sVi3 = REST_PAYLOAD['textList'][i3];
        
        data.ClassField.textList.push($sVi3);
    }
}

// Map from 'Payload.RequestResponse.textProperty' to 'Copy_Of_TextField'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['textProperty']) != "undefined" && REST_PAYLOAD['textProperty'] != null)) {
    data.Copy_Of_TextField = REST_PAYLOAD['textProperty'];
} else {
    data.Copy_Of_TextField = null;
}

// Map from 'Payload.RequestResponse.dateProperty' to 'DateField'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['dateProperty']) != "undefined" && REST_PAYLOAD['dateProperty'] != null)) {
    data.DateField = REST_PAYLOAD['dateProperty'];
} else {
    data.DateField = null;
}

// Map from 'Payload.RequestResponse.dateTimeProperty' to 'DateTimeField'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['dateTimeProperty']) != "undefined" && REST_PAYLOAD['dateTimeProperty'] != null)) {
    data.DateTimeField = REST_PAYLOAD['dateTimeProperty'];
} else {
    data.DateTimeField = null;
}

// Map from 'Payload.RequestResponse.numberProperty' to 'FixedNumberTypeDecl'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['numberProperty']) != "undefined" && REST_PAYLOAD['numberProperty'] != null)) {
    data.FixedNumberTypeDecl = REST_PAYLOAD['numberProperty'];
} else {
    data.FixedNumberTypeDecl = null;
}

// Map from 'Header Parameters.headerparam1' to 'TextField'
data.TextField = REST_HEADER_headerparam1;

// Map from 'Payload.RequestResponse.timeProperty' to 'TimeField'
if ((typeof(REST_PAYLOAD) != "undefined" && REST_PAYLOAD != null) &&
   (typeof(REST_PAYLOAD['timeProperty']) != "undefined" && REST_PAYLOAD['timeProperty'] != null)) {
    data.TimeField = REST_PAYLOAD['timeProperty'];
} else {
    data.TimeField = null;
}


]]></tibex:restResponseScript>
            <tibex:restRequestScript expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Declare local variables.
var REST_HEADER_headerparam2;
var REST_QUERY_queryparam1;
var REST_PAYLOAD;

// Map from 'ClassField.text' to 'Query Parameters.queryparam1'
if (data != null && data.ClassField != null) {
    REST_QUERY_queryparam1 = (data.ClassField.text != null) ? new String(data.ClassField.text) : null;
} else {
    REST_QUERY_queryparam1 = null;
}

// Map from 'ClassField.complexChild.attribute1' to 'Header Parameters.headerparam2'
if (data != null && data.ClassField != null && data.ClassField.complexChild != null) {
    REST_HEADER_headerparam2 = (data.ClassField.complexChild.attribute1 != null) ? new String(data.ClassField.complexChild.attribute1) : null;
} else {
    REST_HEADER_headerparam2 = null;
}

// Create target 'Payload.RequestResponse' if it doesn't exist.
if (REST_PAYLOAD == null) {
    REST_PAYLOAD = {};
}

// Map from 'Copy_Of_ClassField.boolean1' to 'Payload.RequestResponse.booleanProperty'
if (data != null && data.Copy_Of_ClassField != null) {
    REST_PAYLOAD['booleanProperty'] = (data.Copy_Of_ClassField.boolean1 != null) ? data.Copy_Of_ClassField.boolean1 : null;
} else {
    REST_PAYLOAD['booleanProperty'] = null;
}

// Map from 'Copy_Of_ClassField.date' to 'Payload.RequestResponse.dateProperty'
if (data != null && data.Copy_Of_ClassField != null) {
    REST_PAYLOAD['dateProperty'] = (data.Copy_Of_ClassField.date != null) ? data.Copy_Of_ClassField.date.toJSON() : null;
} else {
    REST_PAYLOAD['dateProperty'] = null;
}

// Map from 'Copy_Of_ClassField.dateTimeTz' to 'Payload.RequestResponse.dateTimeProperty'
if (data != null && data.Copy_Of_ClassField != null) {
    REST_PAYLOAD['dateTimeProperty'] = (data.Copy_Of_ClassField.dateTimeTz != null) ? data.Copy_Of_ClassField.dateTimeTz.toJSON() : null;
} else {
    REST_PAYLOAD['dateTimeProperty'] = null;
}

// Map from 'Copy_Of_ClassField.fixed' to 'Payload.RequestResponse.numberProperty'
if (data != null && data.Copy_Of_ClassField != null) {
    REST_PAYLOAD['numberProperty'] = (data.Copy_Of_ClassField.fixed != null) ? Math.round(data.Copy_Of_ClassField.fixed) : null;
} else {
    REST_PAYLOAD['numberProperty'] = null;
}

// Map from 'Copy_Of_ClassField.text' to 'Payload.RequestResponse.textProperty'
if (data != null && data.Copy_Of_ClassField != null) {
    REST_PAYLOAD['textProperty'] = (data.Copy_Of_ClassField.text != null) ? new String(data.Copy_Of_ClassField.text) : null;
} else {
    REST_PAYLOAD['textProperty'] = null;
}

// Map from 'Copy_Of_ClassField.enum1' to 'Payload.RequestResponse.textToFromEnum'
if (data != null && data.Copy_Of_ClassField != null) {
    REST_PAYLOAD['textToFromEnum'] = (data.Copy_Of_ClassField.enum1 != null) ? new String(data.Copy_Of_ClassField.enum1) : null;
} else {
    REST_PAYLOAD['textToFromEnum'] = null;
}

// Map from 'Copy_Of_ClassField.time' to 'Payload.RequestResponse.timeProperty'
if (data != null && data.Copy_Of_ClassField != null) {
    REST_PAYLOAD['timeProperty'] = (data.Copy_Of_ClassField.time != null) ? data.Copy_Of_ClassField.time.toJSON() : null;
} else {
    REST_PAYLOAD['timeProperty'] = null;
}

// Create target 'Payload.RequestResponse.complexType' if it doesn't exist.
if (REST_PAYLOAD['complexType'] == null) {
    REST_PAYLOAD['complexType'] = {};
}

// Map from 'Copy_Of_ClassField.complexChild.attribute1' to 'Payload.RequestResponse.complexType.textProperty'
if (data != null && data.Copy_Of_ClassField != null && data.Copy_Of_ClassField.complexChild != null) {
    REST_PAYLOAD['complexType']['textProperty'] = (data.Copy_Of_ClassField.complexChild.attribute1 != null) ? new String(data.Copy_Of_ClassField.complexChild.attribute1) : null;
} else {
    REST_PAYLOAD['complexType']['textProperty'] = null;
}
if (REST_PAYLOAD['complexTypeList'] == null) {
    REST_PAYLOAD['complexTypeList'] = [];
}

// Overwrite list: Payload.RequestResponse.complexTypeList
REST_PAYLOAD['complexTypeList'] = [];

if (data != null && data.Copy_Of_ClassField != null && data.Copy_Of_ClassField.complexList != null) {

    for (var i1 = 0; i1 < data.Copy_Of_ClassField.complexList.length; i1++) { 
        var $sVi1 = data.Copy_Of_ClassField.complexList[i1];
        var $tVi1 = {};

        // Map from 'Copy_Of_ClassField.complexList.attribute1' to 'Payload.RequestResponse.complexTypeList.textProperty'
        $tVi1['textProperty'] = ($sVi1.attribute1 != null) ? new String($sVi1.attribute1) : null;
        
        REST_PAYLOAD['complexTypeList'].push($tVi1);
    }
}

// Map from 'Copy_Of_ClassField.textList' to 'Payload.RequestResponse.textList'

// Overwrite list: Payload.RequestResponse.textList
REST_PAYLOAD['textList'] = [];

if (data != null && data.Copy_Of_ClassField != null && data.Copy_Of_ClassField.textList != null) {

    for (var i2 = 0; i2 < data.Copy_Of_ClassField.textList.length; i2++) { 
        var $sVi2 = data.Copy_Of_ClassField.textList[i2];
        
        REST_PAYLOAD['textList'].push(($sVi2 != null) ? new String($sVi2) : null);
    }
}

// Map from 'Copy_Of_ClassField.enumList' to 'Payload.RequestResponse.textToFromEnumList'

// Overwrite list: Payload.RequestResponse.textToFromEnumList
REST_PAYLOAD['textToFromEnumList'] = [];

if (data != null && data.Copy_Of_ClassField != null && data.Copy_Of_ClassField.enumList != null) {

    for (var i3 = 0; i3 < data.Copy_Of_ClassField.enumList.length; i3++) { 
        var $sVi3 = data.Copy_Of_ClassField.enumList[i3];
        
        REST_PAYLOAD['textToFromEnumList'].push(($sVi3 != null) ? new String($sVi3) : null);
    }
}

// Build request URI.
function __filterQueryParams(__all_params){
    return __all_params.filter(function(__filter_param){
        return __filter_param.mandatory||eval(__filter_param.path)!=null;
    });
}
function __encodeQueryParams(__all_params){
    var __filtered_params = __filterQueryParams(__all_params);
    var __mapped_params = __filtered_params.map(function(__filtered_param){
        return __filtered_param.name+'='+encodeURIComponent(eval(__filtered_param.path));
    });
    return __filtered_params.length>0?'?'+__mapped_params.join('&'):'';
}
var REST_REQUEST_URI = ''+__encodeQueryParams([{name:'queryparam1',path:'REST_QUERY_queryparam1',mandatory:false}]);

// Set request fields.
REST_REQUEST.setHeader('Content-Type','application/json');
REST_REQUEST.setHeader('Accept','application/json');
REST_REQUEST.setHeader('headerparam2',REST_HEADER_headerparam2);
REST_REQUEST.setUrl(REST_REQUEST_URI);
REST_REQUEST.setMethod('PUT');
if (REST_PAYLOAD) {
    REST_REQUEST.setData(JSON.stringify(REST_PAYLOAD));
}


]]></tibex:restRequestScript>
            <bpws:targets>
                <bpws:target linkName="StartEvent to RESTCall"/>
            </bpws:targets>
            <bpws:sources>
                <bpws:source linkName="RESTCall to Directsubprocessmappings"/>
            </bpws:sources>
        </bpws:invoke>
        <bpws:extensionActivity>
            <tibex:extActivity name="thisiswhatitshouldlooklike"
                tibex:migrationAllowed="yes" tibex:type="scriptTask"
                tibex:xpdlId="_p2PMYJQvEemyk_o9zDEVZQ" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:targets>
                    <bpws:target linkName="DirectScriptMappings to thisiswhatitshouldlooklike"/>
                </bpws:targets>
                <bpws:sources>
                    <bpws:source linkName="thisiswhatitshouldlooklike to _y7TLkIk7EembeLH2VJH52Q"/>
                </bpws:sources>
                <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[// Map from 'BooleanField' to 'Copy_Of_BooleanField'
if (data != null) {
    data.Copy_Of_BooleanField = data.BooleanField;
} else {
    data.Copy_Of_BooleanField = null;
}

// Map from 'ClassField' to 'Copy_Of_ClassField'
if (data != null) {
    data.Copy_Of_ClassField = data.ClassField;
} else {
    data.Copy_Of_ClassField = null;
}

// Create target 'Copy_Of_ClassFieldtoInflate' if it doesn't exist.
if (data.Copy_Of_ClassFieldtoInflate == null) {
    data.Copy_Of_ClassFieldtoInflate = factory.com_example_data.createDataTypes();
}

// Map from 'ClassFieldtoInflate.URI' to 'Copy_Of_ClassFieldtoInflate.URI'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.URI = data.ClassFieldtoInflate.URI;
} else {
    data.Copy_Of_ClassFieldtoInflate.URI = null;
}

// Map from 'ClassFieldtoInflate.boolean1' to 'Copy_Of_ClassFieldtoInflate.boolean1'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.boolean1 = data.ClassFieldtoInflate.boolean1;
} else {
    data.Copy_Of_ClassFieldtoInflate.boolean1 = null;
}

// Map from 'ClassFieldtoInflate.date' to 'Copy_Of_ClassFieldtoInflate.date'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.date = data.ClassFieldtoInflate.date;
} else {
    data.Copy_Of_ClassFieldtoInflate.date = null;
}

// Map from 'ClassFieldtoInflate.dateTimeTz' to 'Copy_Of_ClassFieldtoInflate.dateTimeTz'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.dateTimeTz = data.ClassFieldtoInflate.dateTimeTz;
} else {
    data.Copy_Of_ClassFieldtoInflate.dateTimeTz = null;
}

// Map from 'ClassFieldtoInflate.enum1' to 'Copy_Of_ClassFieldtoInflate.enum1'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.enum1 = data.ClassFieldtoInflate.enum1;
} else {
    data.Copy_Of_ClassFieldtoInflate.enum1 = null;
}

// Map from 'ClassFieldtoInflate.fixed' to 'Copy_Of_ClassFieldtoInflate.fixed'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.fixed = data.ClassFieldtoInflate.fixed;
} else {
    data.Copy_Of_ClassFieldtoInflate.fixed = null;
}

// Map from 'ClassFieldtoInflate.float1' to 'Copy_Of_ClassFieldtoInflate.float1'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.float1 = data.ClassFieldtoInflate.float1;
} else {
    data.Copy_Of_ClassFieldtoInflate.float1 = null;
}

// Map from 'ClassFieldtoInflate.text' to 'Copy_Of_ClassFieldtoInflate.text'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.text = data.ClassFieldtoInflate.text;
} else {
    data.Copy_Of_ClassFieldtoInflate.text = null;
}

// Map from 'ClassFieldtoInflate.time' to 'Copy_Of_ClassFieldtoInflate.time'
if (data != null && data.ClassFieldtoInflate != null) {
    data.Copy_Of_ClassFieldtoInflate.time = data.ClassFieldtoInflate.time;
} else {
    data.Copy_Of_ClassFieldtoInflate.time = null;
}

// Create target 'Copy_Of_ClassFieldtoInflate.complexChild' if it doesn't exist.
if (data.Copy_Of_ClassFieldtoInflate.complexChild == null) {
    data.Copy_Of_ClassFieldtoInflate.complexChild = factory.com_example_data.createChild();
}

// Map from 'ClassFieldtoInflate.complexChild.attribute1' to 'Copy_Of_ClassFieldtoInflate.complexChild.attribute1'
if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.complexChild != null) {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute1 = data.ClassFieldtoInflate.complexChild.attribute1;
} else {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute1 = null;
}

// Map from 'ClassFieldtoInflate.complexChild.attribute2' to 'Copy_Of_ClassFieldtoInflate.complexChild.attribute2'
if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.complexChild != null) {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute2 = data.ClassFieldtoInflate.complexChild.attribute2;
} else {
    data.Copy_Of_ClassFieldtoInflate.complexChild.attribute2 = null;
}

// Overwrite list: Copy_Of_ClassFieldtoInflate.complexList
data.Copy_Of_ClassFieldtoInflate.complexList.length = 0;

if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.complexList != null) {

    for (var i1 = 0; i1 < data.ClassFieldtoInflate.complexList.length; i1++) { 
        var $sVi1 = data.ClassFieldtoInflate.complexList[i1];
        var $tVi1 = factory.com_example_data.createChild();

        // Map from 'ClassFieldtoInflate.complexList.attribute1' to 'Copy_Of_ClassFieldtoInflate.complexList.attribute1'
        $tVi1.attribute1 = $sVi1.attribute1;

        // Map from 'ClassFieldtoInflate.complexList.attribute2' to 'Copy_Of_ClassFieldtoInflate.complexList.attribute2'
        $tVi1.attribute2 = $sVi1.attribute2;
        
        data.Copy_Of_ClassFieldtoInflate.complexList.push($tVi1);
    }
}

// Map from 'ClassFieldtoInflate.enumList' to 'Copy_Of_ClassFieldtoInflate.enumList'

// Overwrite list: Copy_Of_ClassFieldtoInflate.enumList
data.Copy_Of_ClassFieldtoInflate.enumList.length = 0;

if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.enumList != null) {

    for (var i2 = 0; i2 < data.ClassFieldtoInflate.enumList.length; i2++) { 
        var $sVi2 = data.ClassFieldtoInflate.enumList[i2];
        
        data.Copy_Of_ClassFieldtoInflate.enumList.push($sVi2);
    }
}

// Map from 'ClassFieldtoInflate.textList' to 'Copy_Of_ClassFieldtoInflate.textList'

// Overwrite list: Copy_Of_ClassFieldtoInflate.textList
data.Copy_Of_ClassFieldtoInflate.textList.length = 0;

if (data != null && data.ClassFieldtoInflate != null && data.ClassFieldtoInflate.textList != null) {

    for (var i3 = 0; i3 < data.ClassFieldtoInflate.textList.length; i3++) { 
        var $sVi3 = data.ClassFieldtoInflate.textList[i3];
        
        data.Copy_Of_ClassFieldtoInflate.textList.push($sVi3);
    }
}

// Map from 'ComplexListField' to 'Copy_Of_ComplexListField'

// Overwrite list: Copy_Of_ComplexListField
data.Copy_Of_ComplexListField.length = 0;

if (data != null && data.ComplexListField != null) {

    for (var i4 = 0; i4 < data.ComplexListField.length; i4++) { 
        var $sVi4 = data.ComplexListField[i4];
        
        data.Copy_Of_ComplexListField.push($sVi4);
    }
}

// Map from 'DateField' to 'Copy_Of_DateField'
if (data != null) {
    data.Copy_Of_DateField = data.DateField;
} else {
    data.Copy_Of_DateField = null;
}

// Map from 'DateTimeField' to 'Copy_Of_DateTimeField'
if (data != null) {
    data.Copy_Of_DateTimeField = data.DateTimeField;
} else {
    data.Copy_Of_DateTimeField = null;
}

// Map from 'FixedNumberTypeDecl' to 'Copy_Of_FixedNumberTypeDecl'
if (data != null) {
    data.Copy_Of_FixedNumberTypeDecl = data.FixedNumberTypeDecl;
} else {
    data.Copy_Of_FixedNumberTypeDecl = null;
}

// Map from 'FixedPointNumberField' to 'Copy_Of_FixedPointNumberField'
if (data != null) {
    data.Copy_Of_FixedPointNumberField = data.FixedPointNumberField;
} else {
    data.Copy_Of_FixedPointNumberField = null;
}

// Map from 'ListFixedNumberTypeDecl' to 'Copy_Of_ListFixedNumberTypeDecl'

// Overwrite list: Copy_Of_ListFixedNumberTypeDecl
data.Copy_Of_ListFixedNumberTypeDecl.length = 0;

if (data != null && data.ListFixedNumberTypeDecl != null) {

    for (var i5 = 0; i5 < data.ListFixedNumberTypeDecl.length; i5++) { 
        var $sVi5 = data.ListFixedNumberTypeDecl[i5];
        
        data.Copy_Of_ListFixedNumberTypeDecl.push($sVi5);
    }
}

// Map from 'MergingComplexListField' to 'Copy_Of_MergingComplexListField'

// Merge list content: Copy_Of_MergingComplexListField

if (data != null && data.MergingComplexListField != null) {

    for (var i6 = 0; i6 < data.MergingComplexListField.length; i6++) { 
        var $sVi6 = data.MergingComplexListField[i6];

        // Overwrite existing target elements from source with same index (else append when there are additional source elements)
        if (i6 < data.Copy_Of_MergingComplexListField.length) {
            data.Copy_Of_MergingComplexListField[i6] = $sVi6;
        } else {
            data.Copy_Of_MergingComplexListField.push($sVi6);
        }
    }
}

// Merge list content: Copy_Of_MergingPartialComplexListField

if (data != null && data.MergingPartialComplexListField != null) {

    for (var i7 = 0; i7 < data.MergingPartialComplexListField.length; i7++) { 
        var $sVi7 = data.MergingPartialComplexListField[i7];

        // Map to existing target elements from source with same index (else append new targets when there are additional source elements)
        var $tVi7;
        if (i7 < data.Copy_Of_MergingPartialComplexListField.length) {
            $tVi7 = data.Copy_Of_MergingPartialComplexListField[i7];
        } else {
            $tVi7 = factory.com_example_data.createDataTypes();
        }

        // Map from 'MergingPartialComplexListField.URI' to 'Copy_Of_MergingPartialComplexListField.URI'
        $tVi7.URI = $sVi7.URI;

        // Map from 'MergingPartialComplexListField.date' to 'Copy_Of_MergingPartialComplexListField.date'
        $tVi7.date = $sVi7.date;

        // Map from 'MergingPartialComplexListField.enum1' to 'Copy_Of_MergingPartialComplexListField.enum1'
        $tVi7.enum1 = $sVi7.enum1;

        // Map from 'MergingPartialComplexListField.float1' to 'Copy_Of_MergingPartialComplexListField.float1'
        $tVi7.float1 = $sVi7.float1;

        // Map from 'MergingPartialComplexListField.time' to 'Copy_Of_MergingPartialComplexListField.time'
        $tVi7.time = $sVi7.time;

        // Create target 'Copy_Of_MergingPartialComplexListField.complexChild' if it doesn't exist.
        if ($tVi7.complexChild == null) {
            $tVi7.complexChild = factory.com_example_data.createChild();
        }

        // Map from 'MergingPartialComplexListField.complexChild.attribute1' to 'Copy_Of_MergingPartialComplexListField.complexChild.attribute1'
        if ($sVi7.complexChild != null) {
            $tVi7.complexChild.attribute1 = $sVi7.complexChild.attribute1;
        } else {
            $tVi7.complexChild.attribute1 = null;
        }

        // Merge list content: Copy_Of_MergingPartialComplexListField.complexList
        
        if ($sVi7.complexList != null) {
        
            for (var i8 = 0; i8 < $sVi7.complexList.length; i8++) { 
                var $sVi8 = $sVi7.complexList[i8];

                // Map to existing target elements from source with same index (else append new targets when there are additional source elements)
                var $tVi8;
                if (i8 < $tVi7.complexList.length) {
                    $tVi8 = $tVi7.complexList[i8];
                } else {
                    $tVi8 = factory.com_example_data.createChild();
                }

                // Map from 'MergingPartialComplexListField.complexList.attribute1' to 'Copy_Of_MergingPartialComplexListField.complexList.attribute1'
                $tVi8.attribute1 = $sVi8.attribute1;
                
                if (i8 >= $tVi7.complexList.length) {
                    $tVi7.complexList.push($tVi8);
                }
            }
        }

        // Map from 'MergingPartialComplexListField.enumList' to 'Copy_Of_MergingPartialComplexListField.enumList'

        // Overwrite list: Copy_Of_MergingPartialComplexListField.enumList
        $tVi7.enumList.length = 0;
        
        if ($sVi7.enumList != null) {
        
            for (var i9 = 0; i9 < $sVi7.enumList.length; i9++) { 
                var $sVi9 = $sVi7.enumList[i9];
                
                $tVi7.enumList.push($sVi9);
            }
        }

        // Map from 'MergingPartialComplexListField.textList' to 'Copy_Of_MergingPartialComplexListField.textList'

        // Append to list: Copy_Of_MergingPartialComplexListField.textList
        
        if ($sVi7.textList != null) {
        
            for (var i10 = 0; i10 < $sVi7.textList.length; i10++) { 
                var $sVi10 = $sVi7.textList[i10];
                
                $tVi7.textList.push($sVi10);
            }
        }
        
        if (i7 >= data.Copy_Of_MergingPartialComplexListField.length) {
            data.Copy_Of_MergingPartialComplexListField.push($tVi7);
        }
    }
}

// Map from 'MergingSimpleListField' to 'Copy_Of_MergingSimpleListField'

// Merge list content: Copy_Of_MergingSimpleListField

if (data != null && data.MergingSimpleListField != null) {

    for (var i11 = 0; i11 < data.MergingSimpleListField.length; i11++) { 
        var $sVi11 = data.MergingSimpleListField[i11];

        // Overwrite existing target elements from source with same index (else append when there are additional source elements)
        if (i11 < data.Copy_Of_MergingSimpleListField.length) {
            data.Copy_Of_MergingSimpleListField[i11] = $sVi11;
        } else {
            data.Copy_Of_MergingSimpleListField.push($sVi11);
        }
    }
}

// Map from 'NumberField' to 'Copy_Of_NumberField'
if (data != null) {
    data.Copy_Of_NumberField = data.NumberField;
} else {
    data.Copy_Of_NumberField = null;
}

// Map from 'PerformerField' to 'Copy_Of_PerformerField'
if (data != null) {
    data.Copy_Of_PerformerField = data.PerformerField;
} else {
    data.Copy_Of_PerformerField = null;
}

// Map from 'SimpleListField' to 'Copy_Of_SimpleListField'

// Overwrite list: Copy_Of_SimpleListField
data.Copy_Of_SimpleListField.length = 0;

if (data != null && data.SimpleListField != null) {

    for (var i12 = 0; i12 < data.SimpleListField.length; i12++) { 
        var $sVi12 = data.SimpleListField[i12];
        
        data.Copy_Of_SimpleListField.push($sVi12);
    }
}

// Map from 'TextField' to 'Copy_Of_TextField'
if (data != null) {
    data.Copy_Of_TextField = data.TextField;
} else {
    data.Copy_Of_TextField = null;
}

// Map from 'TimeField' to 'Copy_Of_TimeField'
if (data != null) {
    data.Copy_Of_TimeField = data.TimeField;
} else {
    data.Copy_Of_TimeField = null;
}


]]></tibex:script>
            </tibex:extActivity>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <tibex:extActivity name="UserTask"
                tibex:migrationAllowed="yes" tibex:type="userTask"
                tibex:xpdlId="_APHj0JQ5EemDnPS3BM6Yfw" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:targets>
                    <bpws:target linkName="_y7TLkIk7EembeLH2VJH52Q to UserTask"/>
                </bpws:targets>
                <model:UserTaskDataModelType
                    distributionStrategy="OFFER" userTaskPriority="50"
                    workModelID="WM__APHj0JQ5EemDnPS3BM6Yfw"
                    workModelVersionRange="[1.0.0.20190621181325810,1.0.0.20190621181325810]"
                    xmi:version="2.0"
                    xmlns:model="http://model.ut.n2.tibco.com" xmlns:xmi="http://www.omg.org/XMI">
                    <userTaskParticipants>
                        <userTaskParticipant
                            entity="ORGANIZATIONAL_UNIT"
                            modelVersion="1" uniqueId="_0CnxwJQ4EemDnPS3BM6Yfw">
                            <dynamicOrgAttributes>
                                <dynamicOrgAttribute
                                    deName="Identifier2" peName="TextField2"/>
                                <dynamicOrgAttribute
                                    deName="Identifier1" peName="TextField"/>
                            </dynamicOrgAttributes>
                        </userTaskParticipant>
                    </userTaskParticipants>
                    <userTaskParameters>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="BooleanField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="SimpleListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="DateTimeField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="DateField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="ClassField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="PerformerField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="TimeField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="FixedPointNumberField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="NumberField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="ComplexListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="ListFixedNumberTypeDecl"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="FixedNumberTypeDecl"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="TextField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_PerformerField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_DateTimeField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_ComplexListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_ClassField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_BooleanField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_FixedPointNumberField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_FixedNumberTypeDecl"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_SimpleListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_NumberField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_TextField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_ListFixedNumberTypeDecl"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_DateField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_TimeField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="MergingSimpleListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="MergingComplexListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_MergingComplexListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_MergingSimpleListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_MergingPartialComplexListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="MergingPartialComplexListField"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="ClassFieldtoInflate"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="Copy_Of_ClassFieldtoInflate"/>
                        <userTaskParameter mandatory="false"
                            mode="INOUT" name="TextField2"/>
                    </userTaskParameters>
                    <userTaskGroupMemberships/>
                </model:UserTaskDataModelType>
            </tibex:extActivity>
        </bpws:extensionActivity>
    </bpws:flow>
</bpws:process>
