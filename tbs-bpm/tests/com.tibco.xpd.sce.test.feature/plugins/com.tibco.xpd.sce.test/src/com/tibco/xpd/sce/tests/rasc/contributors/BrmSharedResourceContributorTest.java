/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.sce.tests.rasc.contributors;

import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;

import com.tibco.bpm.dt.rasc.PropertyValue;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.xpd.core.test.util.TestUtil;
import com.tibco.xpd.n2.brm.BrmModelsRascContributor;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.resources.util.ProjectImporter;
import com.tibco.xpd.resources.util.ProjectUtil2;
import com.tibco.xpd.sce.tests.rasc.contributors.MockRascWriter.WriterContent;

import junit.framework.TestCase;

/**
 * Test Work Model RASC Contribution.
 *
 * @author aallway
 * @since 12 Apr 2019
 */
@SuppressWarnings("nls")
public class BrmSharedResourceContributorTest extends TestCase {

    /**
     * Test that the hasContributionsFor and RASC generation contribution for
     * BRM work model and work-type model work corectly.
     * 
     * @throws Exception
     */
    public void testProjectWithoutContributions1() throws Exception {

        String projectName = "BrmRascTestProject";

        ProjectImporter projectImporter = importProject(projectName);
        try {
            RascContributor fixture = new BrmModelsRascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(projectName);

            assertTrue(
                    projectName + " project should have BRM RASC contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version(
                    "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            RascContext rascContext = new RascContext() {
                @Override
                public Version getVersion() {
                    return version;
                }
            };
            fixture.process(project, rascContext, null, writer);

            // two BRM artifacts should have been added to the writer
            WriterContent wmArtifact = null;
            WriterContent wtArtifact = null;
            List<WriterContent> artifacts = writer.getArtifacts();
            for (WriterContent artifact : artifacts) {
                if ("workModel.wm".equals(artifact.getArtifactName())) {
                    wmArtifact = artifact;
                } else if ("workType.wt".equals(artifact.getArtifactName())) {
                    wtArtifact = artifact;
                }
            }

            assertTrue(projectName
                    + " project should have a contributed workModel.wm artifact",
                    wmArtifact != null);
            assertTrue(projectName
                    + " project should have a contributed workType.wt artifact",
                    wtArtifact != null);

            // no shared resource should have been added
            assertNull(writer.getManifestAttribute(
                    BrmModelsRascContributor.SHARED_RESOURCE_MANIFEST_ATTR));
        } finally {
            projectImporter.performDelete();
        }
    }

    public void testProjectWithOnlySharedResources() throws Exception {
        String[] locations = new String[] {
                "resources/BrmRascTest/BrmRascSharedResourceTest/SimpleProc/",
                "resources/BrmRascTest/BrmRascSharedResourceTest/SimpleServices/" };
        String[] names = new String[] { "SimpleProc", "SimpleServices" };

        ProjectImporter projectImporter = importProjects(locations, names);
        try {
            RascContributor fixture = new BrmModelsRascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(names[0]);

            assertTrue(names[0] + " project should have BRM RASC contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version(
                    "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            RascContext rascContext = new RascContext() {
                @Override
                public Version getVersion() {
                    return version;
                }
            };
            fixture.process(project, rascContext, null, writer);

            // NO BRM artifacts should have been added to the writer
            assertTrue(writer.getArtifacts().isEmpty());

            // Shared resource should have been added
            PropertyValue[] manifestAttrs = writer.getManifestAttribute(
                    BrmModelsRascContributor.SHARED_RESOURCE_MANIFEST_ATTR);
            assertNotNull(manifestAttrs);
            assertEquals(2, manifestAttrs.length);

            String[][] expectedValues = {
                    { "SimpleProc/Participants/SimpleServicesService_Consumer",
                            "HTTPClient" },
                    { "all_reps@work.com", "EMail" } };
            for (String[] expected : expectedValues) {
                boolean found = false;
                for (PropertyValue actual : manifestAttrs) {
                    if (expected[0].equals(actual.getValue())) {
                        assertEquals(expected[1], actual.getAttribute("type"));
                        found = true;
                        break;
                    }
                }
                assertTrue("Expected " + expected, found);
            }
        } finally {
            projectImporter.performDelete();
        }
    }

    /**
     * Check that a data project doesn't claim to have contributions.
     * 
     * @throws Exception
     */
    public void testProjectWithoutContributions2() throws Exception {

        String projectName = "BrmRascTestProjectWithoutContributions";

        ProjectImporter projectImporter = importProject(projectName);
        try {
            RascContributor fixture = new BrmModelsRascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(projectName);

            assertFalse(
                    projectName
                            + " project should not have BRM RASC contributions",
                    fixture.hasContributionsFor(project));
        } finally {
            projectImporter.performDelete();
        }
    }

    /**
     * Import the given project from test plugin resources.
     * 
     * @param projectName
     * @return
     */
    private ProjectImporter importProject(String projectName) {
        String[] locations =
                new String[] { "resources/BrmRascTest/" + projectName + "/" };
        String[] names = new String[] { projectName };
        return importProjects(locations, names);
    }

    /**
     * Import the given projects from test plugin resources.
     */
    private ProjectImporter importProjects(String[] aProjectLocations,
            String[] aProjectNames) {
        /*
         * Import and mgirate the project
         */
        ProjectImporter projectImporter =
                TestUtil.importProjectsFromZip("com.tibco.xpd.sce.test",
                        aProjectLocations,
                        aProjectNames);

        assertTrue("Failed to load projects " + aProjectNames,
                projectImporter != null);

        for (String name : aProjectNames) {
            IProject project =
                    ResourcesPlugin.getWorkspace().getRoot().getProject(name);
            assertTrue(name + " project does not exist",
                    project.isAccessible());
        }

        TestUtil.buildAndWait();
        return projectImporter;
    }
}
