/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.sce.tests.rasc.contributors;

import static org.junit.Assert.assertArrayEquals;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.xpd.core.test.util.TestUtil;
import com.tibco.xpd.om.transform.de.OrgModelRascContributor;
import com.tibco.xpd.rasc.core.RascAppSummary;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.resources.util.ProjectImporter;
import com.tibco.xpd.resources.util.ProjectUtil2;
import com.tibco.xpd.sce.tests.rasc.contributors.MockRascWriter.WriterContent;

import junit.framework.TestCase;

/**
 * Test Org-Model RASC Contribution.
 *
 * @author pwatson
 * @since 20 Mar 2019
 */
@SuppressWarnings("nls")
public class OrgModelRascContributorTest extends TestCase {

    private ProjectImporter projectImporter;

    /**
     * setup the test.
     */
    @Override
    protected void setUp() {
        projectImporter = TestUtil.importProjectsFromZip(
                "com.tibco.xpd.sce.test", //$NON-NLS-1$
                new String[] { "resources/OrgModelRascTest/OrgModelRascTest/" }, //$NON-NLS-1$
                new String[] { "OrgModelRascTest" }); //$NON-NLS-1$

        assertTrue(
                "Failed to load projects from \"resources/AceBomFactoryValidationsTest/", //$NON-NLS-1$
                projectImporter != null);

    }

    /**
     * @see junit.framework.TestCase#tearDown()
     *
     * @throws Exception
     */
    @Override
    protected void tearDown() throws Exception {
        if (projectImporter != null) {
            projectImporter.performDelete();
        }

    }

    public void testContribution() throws Exception {
        RascContributor fixture = new OrgModelRascContributor();

        IProject project =
                ResourcesPlugin.getWorkspace().getRoot()
                        .getProject("OrgModelRascTest");

        assertTrue(fixture.hasContributionsFor(project));

        // ensure the test data is present
        // create a mock writer to capture contributor's output
        MockRascWriter writer = new MockRascWriter();

        // find the project in which the test data resides
        // call the contributor's process() method
        Version version = new Version(
                "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

        RascContext rascContext = new RascContext() {
            @Override
            public Version getVersion() {
                return version;
            }

            @Override
            public RascAppSummary getAppSummary() {
                return null;
            }
        };
        fixture.process(project, rascContext, null, writer);

        // only one artifact should have been added to the writer
        assertEquals(1, writer.getArtifacts().size());

        // that artifact should be named after the test data file
        // and be targetted to the DE micro-service
        WriterContent artifact = writer.getArtifacts().get(0);
        assertEquals("OrganizationModel.de", artifact.getFullPath());
        assertArrayEquals(new MicroService[] { MicroService.DE },
                artifact.getServices());

        assertEquals(artifact.getArtifactName(), "Organization Model Label");
        assertEquals(artifact.getInternalName(), "OrganizationModelName");

        // some data was written to the artifact
        assertTrue(artifact.getContent().size() > 0);

        // Check has version number set correctly.
        String contentString = artifact.getContent().toString("UTF-8");

        String expectedVersionAttribute =
                "version=\"" + version.toString() + "\"";

        assertTrue(
                project.getName()
                        + " project OrganizationModel.de artifact should have version set to '"
                        + version.toString() + "')",
                contentString.contains(expectedVersionAttribute));

    }
}
