/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.sce.tests.rasc.contributors;

import static org.junit.Assert.assertArrayEquals;

import java.io.ByteArrayOutputStream;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.bpm.dt.rasc.VersionRange;
import com.tibco.xpd.core.test.util.TestResourceInfo;
import com.tibco.xpd.n2.pe.transform.PERascContributor;
import com.tibco.xpd.n2.test.core.AbstractN2BaseResourceTest;
import com.tibco.xpd.rasc.core.RascAppSummary;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.resources.util.ProjectUtil2;
import com.tibco.xpd.sce.tests.rasc.contributors.MockRascWriter.WriterContent;

/**
 * Test Process Engine and Page-Flow RASC Contribution.
 *
 * @author pwatson
 * @since 20 Mar 2019
 */
@SuppressWarnings("nls")
public class PERascContributorTest extends AbstractN2BaseResourceTest {

    private TestResourceInfo[] processResourceInfo = new TestResourceInfo[] {
            new TestResourceInfo("resources/BpelRascTest",
                    "RASC/Process Packages{processes}/TestContributor.xpdl"),
            new TestResourceInfo("resources/BpelRascTest",
                    "RASC/Process Packages{processes}/TestContributor2.xpdl"),
            new TestResourceInfo("resources/BpelRascTest",
                    "RASC/Forms{forms}/ProcessPackage/DuplicatenamedBusinessProcess/UserTask/UserTask.form") };

    /**
     * @see com.tibco.xpd.core.test.util.AbstractBaseResourceTest#getTestName()
     */
    @Override
    protected String getTestName() {
        return "BPEL RASC Transform Test";
    }

    /**
     * @see com.tibco.xpd.core.test.util.AbstractBaseResourceTest#getTestResources()
     */
    @Override
    protected TestResourceInfo[] getTestResources() {
        return processResourceInfo;
    }

    /**
     * @see com.tibco.xpd.core.test.util.AbstractBaseResourceTest#getTestPlugInId()
     */
    @Override
    protected String getTestPlugInId() {
        return "com.tibco.xpd.sce.test";
    }

    public void testHasContributionsFor() throws Exception {
        RascContributor fixture = new PERascContributor();
        checkTestFilesCreated();
        IFile testFile = getTestFile("TestContributor.xpdl");
        if (testFile == null) {
            throw new NullPointerException("Unable to find test file");
        }

        IProject project =
                ResourcesPlugin.getWorkspace().getRoot().getProject("RASC");

        assertTrue(fixture.hasContributionsFor(project));
    }

    public void testProcess() throws Exception {
        // ensure the test data is present
        checkTestFilesCreated();
        if (getTestFile("TestContributor.xpdl") == null) {
            throw new NullPointerException("Unable to find test file");
        }

        // create a mock writer to capture contributor's output
        MockRascWriter writer = new MockRascWriter();

        // find the project in which the test data resides
        IProject project =
                ResourcesPlugin.getWorkspace().getRoot().getProject("RASC");

        // call the contributor's process() method
        RascContributor fixture = new PERascContributor();

        Version version = new Version(
                "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

        RascAppSummary appSummary = new RascAppSummary() {
            @Override
            public String getName() {
                return null;
            }

            @Override
            public String getInternalName() {
                return null;
            }

            @Override
            public Version getVersion() {
                return version;
            }

            @Override
            public Collection<RascAppSummary> getReferencedProjects()
                    throws CoreException {
                return Collections.emptyList();
            }

            @Override
            public boolean hasAssetType(String aAssetTypeId) {
                return false;
            }

            @Override
            public VersionRange getDependencyRange() {
                return null;
            }
        };

        RascContext rascContext = new RascContext() {
            @Override
            public Version getVersion() {
                return version;
            }

            @Override
            public RascAppSummary getAppSummary() {
                return appSummary;
            }
        };
        fixture.process(project, rascContext, null, writer);

        // these are the expected artefacts and their destinations
        Map<String, TestArtifactData> expected = new HashMap<>();
        expected.put(
                "processOut/pageflow/TestContributor.xpdl/TestPageFowProcess.bpel",
                new TestArtifactData("Test PageFow Process",
                        "TestPageFowProcess",
                        new MicroService[] { MicroService.UP }));
        expected.put(
                "processOut/process/TestContributor.xpdl/TestBusinessProcess.bpel",
                new TestArtifactData("Test Business Process",
                        "TestBusinessProcess",
                        new MicroService[] { MicroService.BP }));
        expected.put(
                "processOut/process/TestContributor.xpdl/DuplicatenamedBusinessProcess.bpel",
                new TestArtifactData("Duplicate named Business Process",
                        "DuplicatenamedBusinessProcess",
                        new MicroService[] { MicroService.BP }));
        expected.put(
                "processOut/process/TestContributor2.xpdl/DuplicatenamedBusinessProcess.bpel",
                new TestArtifactData("Duplicate named Business Process",
                        "DuplicatenamedBusinessProcess",
                        new MicroService[] { MicroService.BP }));
        expected.put(
                "processOut/pageflow/TestContributor2.xpdl/TestBusinessService.bpel",
                new TestArtifactData("Test Business Service",
                        "TestBusinessService",
                        new MicroService[] { MicroService.UP }));

        // All the different combo's of service process.
        expected.put(
                "processOut/pageflow/TestContributor.xpdl/TestServiceProcess4BPandPF.bpel",
                new TestArtifactData("Test Service Process 4 BP and PF",
                        "TestServiceProcess4BPandPF",
                        new MicroService[] { MicroService.UP }));
        expected.put(
                "processOut/process/TestContributor.xpdl/TestServiceProcess4BPandPF.bpel",
                new TestArtifactData("Test Service Process 4 BP and PF",
                        "TestServiceProcess4BPandPF",
                        new MicroService[] { MicroService.BP }));
        expected.put(
                "processOut/process/TestContributor.xpdl/TestServiceProcess4BP.bpel",
                new TestArtifactData("Test Service Process 4 BP",
                        "TestServiceProcess4BP",
                        new MicroService[] { MicroService.BP }));
        expected.put(
                "processOut/pageflow/TestContributor.xpdl/TestServiceProcess4PF.bpel",
                new TestArtifactData("Test Service Process 4 PF",
                        "TestServiceProcess4PF",
                        new MicroService[] { MicroService.UP }));

        // artifacts should have been added to the writer
        assertEquals(expected.size(), writer.getArtifacts().size());

        for (WriterContent artifact : writer.getArtifacts()) {
            boolean found = false;
            for (Map.Entry<String, TestArtifactData> entry : expected
                    .entrySet()) {
                if (entry.getKey().equals(artifact.getFullPath())) {
                    assertArrayEquals(entry.getValue().services,
                            artifact.getServices());

                    // some data was written to the artifact
                    ByteArrayOutputStream fileContent = artifact.getContent();

                    assertTrue(fileContent.size() > 0);

                    assertEquals(artifact.getArtifactName(),
                            entry.getValue().artifactName);
                    assertEquals(artifact.getInternalName(),
                            entry.getValue().internalName);

                    /*
                     * Check that user task work model version number
                     * replacement has happened.
                     */
                    String contentString = fileContent.toString("UTF-8");

                    if (contentString.contains("UserTaskDataModelType")) {
                        String expectedWorkModelVersionRange =
                                "workModelVersionRange=\"[" + version.toString()
                                        + "," + version.toString() + "]\"";

                        assertTrue("User task version range not set correctly",
                                contentString.contains(
                                        expectedWorkModelVersionRange));
                    }

                    found = true;
                    break;
                }
            }
            assertTrue("Unexpected artifact: " + artifact.getFullPath(), found);
        }
    }

    /**
     * Little class for storing expected test results.
     *
     *
     * @author aallway
     * @since 2 Apr 2019
     */
    private static class TestArtifactData {
        String artifactName;

        String internalName;

        MicroService[] services;

        /**
         * @param artifactName
         * @param internalName
         * @param services
         */
        public TestArtifactData(String artifactName, String internalName,
                MicroService[] services) {
            super();
            this.artifactName = artifactName;
            this.internalName = internalName;
            this.services = services;
        }

    }
}
