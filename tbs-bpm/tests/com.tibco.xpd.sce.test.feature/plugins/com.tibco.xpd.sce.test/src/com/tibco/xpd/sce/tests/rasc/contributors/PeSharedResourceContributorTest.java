/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.sce.tests.rasc.contributors;

import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.tibco.bpm.dt.rasc.PropertyValue;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.bpm.dt.rasc.VersionRange;
import com.tibco.bpm.dt.rasc.VersionRange.Endpoint;
import com.tibco.xpd.core.test.util.TestUtil;
import com.tibco.xpd.n2.pe.transform.PERascContributor;
import com.tibco.xpd.rasc.core.RascAppSummary;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.resources.util.ProjectImporter;
import com.tibco.xpd.resources.util.ProjectUtil2;
import com.tibco.xpd.sce.tests.rasc.contributors.MockRascWriter.WriterContent;

import junit.framework.TestCase;

/**
 * Test Work Model RASC Contribution.
 *
 * @author aallway
 * @since 12 Apr 2019
 */
@SuppressWarnings("nls")
public class PeSharedResourceContributorTest extends TestCase {

    /**
     * Test that the hasContributionsFor and RASC generation contribution for
     * BRM work model and work-type model work corectly.
     * 
     * @throws Exception
     */
    public void testProjectWithoutContributions1() throws Exception {

        String projectName = "BrmRascTestProject";

        ProjectImporter projectImporter =
                importProject("resources/BrmRascTest/BrmRascTestProject/",
                        projectName);
        try {
            RascContributor fixture = new PERascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(projectName);

            assertTrue(
                    projectName + " project should have PE RASC contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version(
                    "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            RascAppSummary appSummary =
                    mockRascAppSummary("com.tibco.test", version, false);

            RascContext rascContext = mock(RascContext.class);
            when(rascContext.getVersion()).thenReturn(version);
            when(rascContext.getAppSummary()).thenReturn(appSummary);

            fixture.process(project, rascContext, null, writer);

            // these artifacts should have been added to the writer
            String[] expectedArtifacts = { "BrmRascTest-Process2",
                    "BrmRascTest-Process", "BrmRascTest-Process2 - xpdl2",
                    "BrmRascTest-Process - xpdl 2" };
            List<WriterContent> artifacts = writer.getArtifacts();
            assertEquals(expectedArtifacts.length, artifacts.size());
            for (WriterContent artifact : artifacts) {
                boolean found = false;
                for (String expected : expectedArtifacts) {
                    if (expected.equals(artifact.getArtifactName())) {
                        found = true;
                        break;
                    }
                }
                assertTrue("Unexpected artifact: " + artifact.getArtifactName(),
                        found);
            }

            // no shared resource should have been added
            assertNull(writer.getManifestAttribute(
                    PERascContributor.SHARED_RESOURCE_MANIFEST_ATTR));
        } finally {
            projectImporter.performDelete();
        }
    }

    public void testProjectWithSharedResources() throws Exception {
        String[] locations = new String[] {
                "resources/BpelRascTest/PeRascSharedResourceTest/SimpleProc/",
                "resources/BpelRascTest/PeRascSharedResourceTest/SimpleServices/" };
        String[] names = new String[] { "SimpleProc", "SimpleServices" };

        ProjectImporter projectImporter = importProjects(locations, names);
        try {
            RascContributor fixture = new PERascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(names[0]);

            assertTrue(names[0]
                    + " project should have Shared Resource contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version(
                    "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            RascAppSummary appSummary =
                    mockRascAppSummary("com.tibco.test", version, false);

            RascContext rascContext = mock(RascContext.class);
            when(rascContext.getVersion()).thenReturn(version);
            when(rascContext.getAppSummary()).thenReturn(appSummary);

            fixture.process(project, rascContext, null, writer);

            // these artifacts should have been added to the writer
            String[] expectedArtifacts = { "SimpleProc-Process" };
            List<WriterContent> artifacts = writer.getArtifacts();
            assertEquals(expectedArtifacts.length, artifacts.size());
            for (WriterContent artifact : artifacts) {
                boolean found = false;
                for (String expected : expectedArtifacts) {
                    if (expected.equals(artifact.getArtifactName())) {
                        found = true;
                        break;
                    }
                }
                assertTrue("Unexpected artifact: " + artifact.getArtifactName(),
                        found);
            }

            // Shared resource should have been added
            PropertyValue[] manifestAttrs = writer.getManifestAttribute(
                    PERascContributor.SHARED_RESOURCE_MANIFEST_ATTR);
            assertNotNull(manifestAttrs);
            assertEquals(2, manifestAttrs.length);

            String[][] expectedValues = {
                    { "SimpleProc/Participants/SimpleServicesService_Consumer",
                            "HTTPClient" },
                    { "all_reps@work.com", "EMail" } };
            for (String[] expected : expectedValues) {
                boolean found = false;
                for (PropertyValue actual : manifestAttrs) {
                    if (expected[0].equals(actual.getValue())) {
                        assertEquals(expected[1], actual.getAttribute("type"));
                        found = true;
                        break;
                    }
                }
                assertTrue("Expected " + expected, found);
            }
        } finally {
            projectImporter.performDelete();
        }
    }

    @SuppressWarnings("unchecked")
    public void testBpmReferences() throws Exception {
        String[] locations = new String[] {
                "resources/BpelRascTest/PeRascSharedResourceTest/SimpleProc/",
                "resources/BpelRascTest/PeRascSharedResourceTest/SimpleServices/" };
        String[] names = new String[] { "SimpleProc", "SimpleServices" };

        ProjectImporter projectImporter = importProjects(locations, names);
        try {
            RascContributor fixture = new PERascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(names[0]);

            assertTrue(names[0]
                    + " project should have Shared Resource contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version(
                    "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            // create some dependency references - one with a BOM asset
            RascAppSummary bomDependency =
                    mockRascAppSummary("com.test.bom.module",
                            new Version("1.2.3"),
                            true);
            RascAppSummary nonBomDependency =
                    mockRascAppSummary("com.test.nonbom.module",
                            new Version("1.2.4"),
                            false);

            // create an app summary with references to the bom asset dependency
            RascAppSummary appSummary =
                    mockRascAppSummary("com.test.main.module",
                            version,
                            true,
                            nonBomDependency,
                            bomDependency);

            // create rasc context to access app summary
            RascContext rascContext = mock(RascContext.class);
            when(rascContext.getVersion()).thenReturn(version);
            when(rascContext.getAppSummary()).thenReturn(appSummary);

            // call the rasc contribution
            fixture.process(project, rascContext, null, writer);

            // dependency was inspected
            verify(nonBomDependency).hasAssetType(anyString());
            verify(bomDependency).hasAssetType(anyString());

            // check the artifacts added to RASC
            List<WriterContent> artifacts = writer.getArtifacts();
            assertEquals(2, artifacts.size());
            assertNotNull(writer.getArtifact("SimpleProc-Process"));

            WriterContent dataInfo = writer.getArtifact("data-dependencies");
            assertNotNull(dataInfo);

            // parse the dataInfo JSON as a Map and List structure
            Map<String, Object> root = new Gson().fromJson(
                    dataInfo.getContent(StandardCharsets.UTF_8),
                    new TypeToken<Map<String, Object>>() {
                    }.getType());

            assertEquals(1, root.size()); // only one root element

            List<?> dependencies =
                    (List<?>) root.get("dataProjectDependencies");
            assertNotNull(dependencies);

            // traverse entries within the dependency list
            String[] expected =
                    { "com.test.bom.module", "com.test.main.module" };
            assertEquals(expected.length, dependencies.size());
            for (Object entry : dependencies) {
                Map<String, String> ref = (Map<String, String>) entry;

                boolean found = false;
                for (String expect : expected) {
                    if (expect.equals(ref.get("projectId"))) {
                        found = true;
                        assertNotNull(ref.get("version"));
                        break;
                    }
                }

                assertTrue("Unexpected entry: " + ref.get("projectId"), found);
            }

            // Shared resource should have been added
            PropertyValue[] manifestAttrs = writer.getManifestAttribute(
                    PERascContributor.SHARED_RESOURCE_MANIFEST_ATTR);
            assertNotNull(manifestAttrs);
            assertEquals(2, manifestAttrs.length);

        } finally {
            projectImporter.performDelete();
        }
    }

    public void testNoBpmReferences() throws Exception {
        String[] locations = new String[] {
                "resources/BpelRascTest/PeRascSharedResourceTest/SimpleProc/",
                "resources/BpelRascTest/PeRascSharedResourceTest/SimpleServices/" };
        String[] names = new String[] { "SimpleProc", "SimpleServices" };

        ProjectImporter projectImporter = importProjects(locations, names);
        try {
            RascContributor fixture = new PERascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(names[0]);

            assertTrue(names[0]
                    + " project should have Shared Resource contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version(
                    "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            // create some dependency references - NONE with a BOM asset
            RascAppSummary bomDependency =
                    mockRascAppSummary("com.test.bom.module",
                            new Version("1.2.3"),
                            false);
            RascAppSummary nonBomDependency =
                    mockRascAppSummary("com.test.nonbom.module",
                            new Version("1.2.4"),
                            false);

            // create an app summary with references to the bom asset dependency
            RascAppSummary appSummary =
                    mockRascAppSummary("com.test.main.module",
                            version,
                            false,
                            nonBomDependency,
                            bomDependency);

            // create rasc context to access app summary
            RascContext rascContext = mock(RascContext.class);
            when(rascContext.getVersion()).thenReturn(version);
            when(rascContext.getAppSummary()).thenReturn(appSummary);

            // call the rasc contribution
            fixture.process(project, rascContext, null, writer);

            // dependency was inspected
            verify(nonBomDependency).hasAssetType(anyString());
            verify(bomDependency).hasAssetType(anyString());

            // check the artifacts added to RASC
            List<WriterContent> artifacts = writer.getArtifacts();
            assertEquals(1, artifacts.size());
            assertNotNull(writer.getArtifact("SimpleProc-Process"));
            assertNull(writer.getArtifact("data-dependencies"));

            // Shared resource should have been added
            PropertyValue[] manifestAttrs = writer.getManifestAttribute(
                    PERascContributor.SHARED_RESOURCE_MANIFEST_ATTR);
            assertNotNull(manifestAttrs);
            assertEquals(2, manifestAttrs.length);

        } finally {
            projectImporter.performDelete();
        }
    }

    /**
     * Import the given project from test plugin resources.
     * 
     * @param projectName
     * @return
     */
    private ProjectImporter importProject(String aPath, String projectName) {
        String[] locations = new String[] { aPath };
        String[] names = new String[] { projectName };
        return importProjects(locations, names);
    }

    /**
     * Import the given projects from test plugin resources.
     */
    private ProjectImporter importProjects(String[] aProjectLocations,
            String[] aProjectNames) {
        /*
         * Import and mgirate the project
         */
        ProjectImporter projectImporter =
                TestUtil.importProjectsFromZip("com.tibco.xpd.sce.test",
                        aProjectLocations,
                        aProjectNames);

        assertTrue("Failed to load projects " + aProjectNames,
                projectImporter != null);

        for (String name : aProjectNames) {
            IProject project =
                    ResourcesPlugin.getWorkspace().getRoot().getProject(name);
            assertTrue(name + " project does not exist",
                    project.isAccessible());
        }

        TestUtil.buildAndWait();
        return projectImporter;
    }

    private RascAppSummary mockRascAppSummary(String aInternalName,
            Version aVersion, boolean hasBom, RascAppSummary... aDependencies)
            throws CoreException {
        RascAppSummary result = mock(RascAppSummary.class);
        when(result.getInternalName()).thenReturn(aInternalName);
        when(result.getVersion()).thenReturn(aVersion);

        VersionRange dependencyRange = new VersionRange(Endpoint.INCLUSIVE,
                new Version(aVersion.getMajor(), aVersion.getMinor(),
                        aVersion.getMicro(), null),
                new Version(aVersion.getMajor() + 1, 0, 0, null),
                Endpoint.EXCLUSIVE);
        when(result.getDependencyRange()).thenReturn(dependencyRange);

        when(Boolean.valueOf(result.hasAssetType(anyString())))
                .thenReturn(Boolean.valueOf(hasBom));

        when(result.getReferencedProjects())
                .thenReturn((aDependencies == null) ? Collections.emptyList()
                        : Arrays.asList(aDependencies));

        return result;
    }
}
