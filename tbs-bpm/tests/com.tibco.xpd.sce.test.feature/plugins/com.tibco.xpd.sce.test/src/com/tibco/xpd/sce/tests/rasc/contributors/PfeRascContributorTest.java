/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.sce.tests.rasc.contributors;

import static org.junit.Assert.assertArrayEquals;

import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.xpd.core.test.util.TestUtil;
import com.tibco.xpd.n2.brm.PfeModelsRascContributor;
import com.tibco.xpd.rasc.core.RascAppSummary;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.resources.util.ProjectImporter;
import com.tibco.xpd.resources.util.ProjectUtil2;
import com.tibco.xpd.sce.tests.rasc.contributors.MockRascWriter.WriterContent;

import junit.framework.TestCase;

/**
 * Test Pageflow Engine RASC Contribution.
 *
 * @author aallway
 * @since 12 Apr 2019
 */
@SuppressWarnings("nls")
public class PfeRascContributorTest extends TestCase {

    /**
     * Test that the hasContributionsFor and RASC generation contribution for
     * BRM work model and work-type model work corectly.
     * 
     * @throws Exception
     */
    public void testProjectWithContributions() throws Exception {

        ProjectImporter projectImporter = TestUtil.importProjectsFromZip("com.tibco.xpd.sce.test", //$NON-NLS-1$
                new String[] { "resources/PfeRascTest/BizAndCaseServiceOrganisation/", //$NON-NLS-1$
                        "resources/PfeRascTest/BizAndCaseServiceData/", //$NON-NLS-1$
                        "resources/PfeRascTest/BizAndCaseService/" }, //$NON-NLS-1$
                new String[] { "BizAndCaseServiceOrganisation", "BizAndCaseServiceData", "BizAndCaseService" }); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

        assertTrue("Failed to load projects from resources/PfeRascTest/", projectImporter != null); //$NON-NLS-1$
        try {
            TestUtil.buildAndWait();

            String projectName = "BizAndCaseService";

            RascContributor fixture = new PfeModelsRascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot()
                    .getProject(projectName);

            assertTrue(
                    projectName + " project should have PFE RASC contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version(
                    "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            RascContext rascContext = new RascContext() {
                @Override
                public Version getVersion() {
                    return version;
                }

                @Override
                public RascAppSummary getAppSummary() {
                    return null;
                }
            };
            fixture.process(project, rascContext, null, writer);

            // the two BRM artifacts should have been added to the writer
            WriterContent upServiceModel = null;

            List<WriterContent> artifacts = writer.getArtifacts();

            for (WriterContent artifact : artifacts) {
                if (PfeModelsRascContributor.SERVICEMODEL_UP_ARTIFACT_NAME.equals(artifact.getFullPath())) {
                    upServiceModel = artifact;
                }
            }

            assertTrue(projectName
                    + " project should have a contributed serviceModel.up artifact", upServiceModel != null);

            // The work model should be delivered to the Work-Manager service
            assertArrayEquals(projectName
                    + "RASC serviceModel.up artifact should be targeted to the UI-Process-Manager micro-service",
                    new MicroService[] { MicroService.UP },
                    upServiceModel.getServices());

            // parse the dataInfo JSON as a Map and List structure
            String jsonString = upServiceModel.getContent(StandardCharsets.UTF_8);

            Map<String, Object> root = new Gson().fromJson(jsonString,
                    new TypeToken<Map<String, Object>>() {
                    }.getType());

            assertEquals(projectName + " RASC serviceModel.up artifact should have two root elements, but has: "
                    + root.size(), 2,
                    root.size());

            checkBusinessServices(projectName, root);

            checkCaseServices(projectName, root);


        } finally {
            if (projectImporter != null) {
                projectImporter.performDelete();
            }
        }
    }

    /**
     * @param projectName
     * @param root
     */
    public void checkBusinessServices(String projectName, Map<String, Object> root) {
        List<?> bizServices = (List<?>) root.get("businessServices");
        assertTrue(projectName
                + " RASC serviceModel.up artifact should have a 3 elements in 'businessServices' array, but has: "
                + (bizServices != null ? bizServices.size() : "null"),
                bizServices != null && bizServices.size() == 3);

        /*
         * Business Service: Case1CreateCaseData
         */
        Map<String, Object> bizSvc = findElement(bizServices, "processName", "Case1CreateCaseData");

        assertNotNull(projectName
                + " RASC serviceModel.up artifact should have a businessServices.businessService(processName=Case1CreateCaseData)",
                bizSvc);

        assertEquals(".processOut/pageflow/BizAndCaseService2.xpdl/Case1CreateCaseData.bpel",
                bizSvc.get("processFileName"));

        assertEquals("BizAndCaseService/BizAndCaseService2", bizSvc.get("category"));

        assertEquals("Mobile", bizSvc.get("publishType"));

        Object channels = bizSvc.get("channels");
        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels' property in businessService.Case1CreateCaseData with 1 channel element",
                channels instanceof List && ((List) channels).size() == 1);
        
        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels.channel=openspaceGWTPull_DefaultChannel' property in businessService.Case1CreateCaseData",
                findElement((List<?>) channels, "channel", "openspaceGWTPull_DefaultChannel"));

        Object privileges = bizSvc.get("privileges");
        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'privileges' property in businessService.Case1CreateCaseData with 2 privilege elements",
                privileges instanceof List && ((List) privileges).size() == 2);

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'privileges.privilege=_uvrogNlEEem0nrEZm0zHtg' property in businessService.Case1CreateCaseData",
                findElement((List<?>) privileges, "privilege", "_uvrogNlEEem0nrEZm0zHtg"));

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'privileges.privilege=_uxRj8NlEEem0nrEZm0zHtg' property in businessService.Case1CreateCaseData",
                findElement((List<?>) privileges, "privilege", "_uxRj8NlEEem0nrEZm0zHtg"));

        /*
         * Business Service: Case1UpdateCaseData
         */
        bizSvc = findElement(bizServices, "processName", "Case1UpdateCaseData");

        assertNotNull(projectName
                + " RASC serviceModel.up artifact should have a businessServices.businessService(processName=Case1UpdateCaseData)",
                bizSvc);

        assertEquals(".processOut/pageflow/BizAndCaseService2.xpdl/Case1UpdateCaseData.bpel",
                bizSvc.get("processFileName"));

        assertEquals("BizAndCaseService/BizAndCaseService2", bizSvc.get("category"));

        assertEquals("Desktop", bizSvc.get("publishType"));

        channels = bizSvc.get("channels");
        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels' property in businessService.Case1UpdateCaseData with 1 channel element",
                channels instanceof List && ((List) channels).size() == 1);

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels.channel=openspaceGWTPull_DefaultChannel' property in businessService.Case1UpdateCaseData",
                findElement((List<?>) channels, "channel", "openspaceGWTPull_DefaultChannel"));

        privileges = bizSvc.get("privileges");
        assertNull(projectName
                + " RASC serviceModel.up should not have a 'privileges' property in businessService.Case1UpdateCaseData",
                privileges);

        /*
         * Business Service: Case1DeleteCaseData
         */
        bizSvc = findElement(bizServices, "processName", "Case1DeleteCaseData");

        assertNotNull(projectName
                + " RASC serviceModel.up artifact should have a businessServices.businessService(processName=Case1DeleteCaseData)",
                bizSvc);

        assertEquals(".processOut/pageflow/BizAndCaseService.xpdl/Case1DeleteCaseData.bpel",
                bizSvc.get("processFileName"));

        assertEquals("BizAndCaseService/BizAndCaseService", bizSvc.get("category"));

        assertEquals("Mobile", bizSvc.get("publishType"));

        channels = bizSvc.get("channels");
        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels' property in businessService.Case1DeleteCaseData with 1 channel element",
                channels instanceof List && ((List) channels).size() == 1);

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels.channel=openspaceGWTPull_DefaultChannel' property in businessService.Case1DeleteCaseData",
                findElement((List<?>) channels, "channel", "openspaceGWTPull_DefaultChannel"));

        privileges = bizSvc.get("privileges");
        assertNull(projectName
                + " RASC serviceModel.up should not have a 'privileges' property in businessService.Case1DeleteCaseData",
                privileges);
    }


    /**
     * @param projectName
     * @param root
     */
    public void checkCaseServices(String projectName, Map<String, Object> root) {
        List<?> caseServices = (List<?>) root.get("caseServices");
        assertTrue(
                projectName
                        + " RASC serviceModel.up artifact should have a 2 elements in 'caseServices' array, but has: "
                        + (caseServices != null ? caseServices.size() : "null"),
                caseServices != null && caseServices.size() == 2);

        /*
         * Business Service: Case1ViewCaseData
         */
        Map<String, Object> caseSvc = findElement(caseServices, "processName", "Case1ViewCaseData");

        assertNotNull(projectName
                + " RASC serviceModel.up artifact should have a businessServices.businessService(processName=Case1ViewCaseData)",
                caseSvc);

        assertEquals(".processOut/pageflow/BizAndCaseService2.xpdl/Case1ViewCaseData.bpel",
                caseSvc.get("processFileName"));

        assertEquals("_$_TIBCO_CASE_SERVICE_$_", caseSvc.get("category"));

        assertEquals("1", caseSvc.get("caseMajorVersion"));

        assertEquals("com.example.bizandcaseservicedata.Case1", caseSvc.get("caseClassName"));

        assertEquals("Case1-View Case Data", caseSvc.get("caseActionName"));

        assertEquals("Case1Ref", caseSvc.get("caseRefParamName"));

        Object channels = caseSvc.get("channels");
        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels' property in businessService.Case1ViewCaseData with 1 channel element",
                channels instanceof List && ((List) channels).size() == 1);

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels.channel=openspaceGWTPull_DefaultChannel' property in businessService.Case1ViewCaseData",
                findElement((List<?>) channels, "channel", "openspaceGWTPull_DefaultChannel"));

        Object privileges = caseSvc.get("privileges");
        assertNull(projectName
                + " RASC serviceModel.up should not have a 'privileges' property in businessService.Case1ViewCaseData",
                privileges);

        Object caseStates = caseSvc.get("caseStates");
        assertNull(projectName
                + " RASC serviceModel.up should not have a 'caseStates' property in businessService.Case1ViewCaseData",
                caseStates);

        /*
         * Business Service: Case1UpdateCaseData2
         */
        caseSvc = findElement(caseServices, "processName", "Case1UpdateCaseData2");

        assertNotNull(projectName
                + " RASC serviceModel.up artifact should have a businessServices.businessService(processName=Case1UpdateCaseData2)",
                caseSvc);

        assertEquals(".processOut/pageflow/BizAndCaseService.xpdl/Case1UpdateCaseData2.bpel",
                caseSvc.get("processFileName"));

        assertEquals("_$_TIBCO_CASE_SERVICE_$_", caseSvc.get("category"));

        assertEquals("1", caseSvc.get("caseMajorVersion"));

        assertEquals("com.example.bizandcaseservicedata.Case1", caseSvc.get("caseClassName"));

        assertEquals("Case1-Update Case Data2", caseSvc.get("caseActionName"));

        assertEquals("Case1Ref", caseSvc.get("caseRefParamName"));

        channels = caseSvc.get("channels");
        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels' property in businessService.Case1UpdateCaseData2 with 1 channel element",
                channels instanceof List && ((List) channels).size() == 1);

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'channels.channel=openspaceGWTPull_DefaultChannel' property in businessService.Case1UpdateCaseData2",
                findElement((List<?>) channels, "channel", "openspaceGWTPull_DefaultChannel"));

        privileges = caseSvc.get("privileges");
        assertTrue(projectName
                + " RASC serviceModel.up should have a 'privileges' property in businessService.Case1UpdateCaseData2 with 1 privilege element",
                privileges instanceof List && ((List) privileges).size() == 1);

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'privileges.privilege=_uy_bMNlEEem0nrEZm0zHtg' property in businessService.Case1UpdateCaseData2",
                findElement((List<?>) privileges, "privilege", "_uy_bMNlEEem0nrEZm0zHtg"));

        caseStates = caseSvc.get("caseStates");
        assertTrue(projectName
                + " RASC serviceModel.up should have a 'caseStates' property in businessService.Case1UpdateCaseData2 with 2 caseState elements",
                privileges instanceof List && ((List) privileges).size() == 1);

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'caseStates.caseState=$UNSET$' property in businessService.Case1UpdateCaseData2",
                findElement((List<?>) caseStates, "caseState", "$UNSET$"));

        assertNotNull(projectName
                + " RASC serviceModel.up should have a 'caseStates.caseState=ENUMLIT2' property in businessService.Case1UpdateCaseData2",
                findElement((List<?>) caseStates, "caseState", "ENUMLIT2"));

    }

    /**
     * Find an element in the given Gson model level with the given property name equal to the given propery value
     * 
     * @param elementList
     * @param propertyName
     * @param propertyValue
     * 
     * @return an element in the given Gson model level with the given property name equal to the given property value
     */
    private Map<String, Object> findElement(List<?> elementList, String propertyName, String propertyValue) {
        for (Object object : elementList) {
            if (object instanceof Map) {
                Object value = ((Map) object).get(propertyName);

                if (propertyValue.equals(value)) {
                    return (Map<String, Object>) object;
                }
            }
        }
        return null;
    }

}
