/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.sce.tests.rasc.contributors;

import static org.junit.Assert.assertArrayEquals;

import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.xpd.core.test.util.TestUtil;
import com.tibco.xpd.n2.brm.WlfModelsRascContributor;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.resources.util.ProjectImporter;
import com.tibco.xpd.resources.util.ProjectUtil2;
import com.tibco.xpd.sce.tests.rasc.contributors.MockRascWriter.WriterContent;

import junit.framework.TestCase;

/**
 * Test Worklist Facade Model RASC Contribution.
 *
 * @author aallway
 * @since 03 May 2019
 */
@SuppressWarnings("nls")
public class WlfModelRascContributorTest extends TestCase {

    /**
     * Test that the hasContributionsFor and RASC generation contribution for
     * Worklist Facade Model work correctly.
     * 
     * @throws Exception
     */
    public void testProjectWithContributions() throws Exception {


        String projectName = "WlfRascTestProject";

        ProjectImporter projectImporter = importProject(projectName);

        RascContributor fixture = new WlfModelsRascContributor();

        IProject project =
                ResourcesPlugin.getWorkspace().getRoot()
                        .getProject(projectName);

        assertTrue(projectName
                + " project should have Worklist Facade RASC contributions",
                fixture.hasContributionsFor(project));

        // create a mock writer to capture contributor's output
        MockRascWriter writer = new MockRascWriter();

        // call the contributor's process() method
        Version version = new Version(
                "1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

        RascContext rascContext = new RascContext() {
            @Override
            public Version getVersion() {
                return version;
            }
        };
        fixture.process(project, rascContext, null, writer);

        // the worklistFacade.wlf artifact should have been added to the writer
        WriterContent wlfArtifact = null;
        
        List<WriterContent> artifacts = writer.getArtifacts();

        for (WriterContent artifact : artifacts) {
            if ("workListFacade.wlf".equals(artifact.getArtifactName())) {
                wlfArtifact = artifact;
            }
        }

        assertTrue(projectName
                + " project should have a contributed workListFacade.wlf artifact",
                wlfArtifact != null);


        // The work model should be delivered to the Work-Manager service
        assertArrayEquals(projectName
                + " project workListFacade.wlf artifact should be targeted to the Work-manager micro-service",
                // TODO ACE-1048 Add Event-Collector to target services.
                // MicroService.EC
                new MicroService[] { MicroService.WM },
                wlfArtifact.getServices());

        // some data was written to the artifacts
        assertTrue(
                projectName
                        + " project workListFacade.wlf artifact should have content",
                wlfArtifact.getContent().size() > 0);

        projectImporter.performDelete();
    }

    /**
     * Check that a process project with no user tasks doesn't claim to have
     * contributions.
     * 
     * @throws Exception
     */
    public void testProjectWithoutContributions1() throws Exception {

        String projectName = "BrmRascTestProject";

        ProjectImporter projectImporter = importProject(projectName);

        RascContributor fixture = new WlfModelsRascContributor();

        IProject project = ResourcesPlugin.getWorkspace().getRoot()
                .getProject(projectName);

        assertFalse(
                projectName
                        + " project should not have WorkList Facade RASC contributions",
                fixture.hasContributionsFor(project));

        projectImporter.performDelete();
    }


    /**
     * Import the given project from test plugin resources.
     * 
     * @param projectName
     * @return
     */
    private ProjectImporter importProject(String projectName) {
        /*
         * Import and mgirate the project
         */
        ProjectImporter projectImporter = TestUtil.importProjectsFromZip(
                "com.tibco.xpd.sce.test", //$NON-NLS-1$
                new String[] {
                        "resources/BrmRascTest/" + projectName + "/" }, //$NON-NLS-1$ //$NON-NLS-2$
                new String[] { projectName });

        assertTrue(
                "Failed to load projects from \"resources/BrmRascTest/" //$NON-NLS-1$
                        + projectName + "\"", //$NON-NLS-1$
                projectImporter != null);

        IProject project = ResourcesPlugin.getWorkspace().getRoot()
                .getProject(projectName); // $NON-NLS-1$
        assertTrue(projectName + " project does not exist", //$NON-NLS-1$
                project.isAccessible());

        TestUtil.buildAndWait();

        return projectImporter;
    }
}
