/*
 * Copyright (c) TIBCO Software Inc 2004, 2014. All rights reserved.
 */

package com.tibco.xpd.sce.tests.rasc.contributors;

import static org.junit.Assert.assertArrayEquals;

import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;

import com.tibco.bpm.dt.rasc.MicroService;
import com.tibco.bpm.dt.rasc.Version;
import com.tibco.xpd.core.test.util.TestUtil;
import com.tibco.xpd.n2.wp.WpModelsRascContributor;
import com.tibco.xpd.rasc.core.RascAppSummary;
import com.tibco.xpd.rasc.core.RascContext;
import com.tibco.xpd.rasc.core.RascContributor;
import com.tibco.xpd.resources.util.ProjectImporter;
import com.tibco.xpd.resources.util.ProjectUtil2;
import com.tibco.xpd.sce.tests.rasc.contributors.MockRascWriter.WriterContent;

import junit.framework.TestCase;

/**
 * Test Work Presentation Model RASC Contribution.
 *
 * @author aallway
 * @since 03 May 2019
 */
@SuppressWarnings("nls")
public class WpModelRascContributorTest extends TestCase {

    private String mainTestProjectName;

    /**
     * Test that the hasContributionsFor and RASC generation contribution for Work presentation models work correctly.
     * 
     * @throws Exception
     */
    public void testProjectWithContributions() throws Exception {
        ProjectImporter projectImporter = importMainTestProjects();
        try {
            RascContributor fixture = new WpModelsRascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(mainTestProjectName);

            assertTrue(mainTestProjectName + " project should have Work-Presentation RASC contributions",
                    fixture.hasContributionsFor(project));

            // create a mock writer to capture contributor's output
            MockRascWriter writer = new MockRascWriter();

            // call the contributor's process() method
            Version version = new Version("1.0.0." + ProjectUtil2.getAutogeneratedQualifier());

            RascContext rascContext = new RascContext() {
                @Override
                public Version getVersion() {
                    return version;
                }

                @Override
                public RascAppSummary getAppSummary() {
                    return null;
                }
            };
            fixture.process(project, rascContext, null, writer);

            // A few of the expected artifacts...
            // Not everything as we're not here to test WPGenerator!
            WriterContent wpModelArtifact = null;
            WriterContent gwtChannelProperties = null;
            WriterContent emailChannelProperties = null;

            List<WriterContent> artifacts = writer.getArtifacts();

            String baseOtherResourcesFolder = "wp/";
            /*
             * + rascContext.getVersion().toString() + "/";
             * 
             * The RASC folder for output resources other than the WP model itself. CURRENTLY this is exactly the same
             * as ther wpModel.wp file's folder as it was decided that no wp/<project version&timestamp>/ version folder
             * was required because this version is available to WR in the RASC manifest anyway.). If necessary the
             * version folder can be re-introduced by appending {@link #getProjectGenerationVersion()} as a new element
             * after the base path.
             */

            for (WriterContent artifact : artifacts) {
                if ("wp/wpModel.wp".equals(artifact.getFullPath())) {
                    wpModelArtifact = artifact;

                } else if (artifact.getFullPath().equals(
                        baseOtherResourcesFolder + "GIGWTPull_DefaultChannel/GIGWTPull_DefaultChannel.properties")) {
                    gwtChannelProperties = artifact;

                } else if (artifact.getFullPath().equals(baseOtherResourcesFolder
                        + "openspaceEmailPush_DefaultChannel/openspaceEmailPush_DefaultChannel.properties")) {
                    emailChannelProperties = artifact;
                }
            }

            assertTrue(
                    mainTestProjectName + " project should have a contributed wp/wpModel.wp artifact and have content",
                    wpModelArtifact != null && wpModelArtifact.getContent().size() > 0);

            assertTrue(mainTestProjectName
                    + " project should have a contributed openspaceEmailPush_DefaultChannel/openspaceEmailPush_DefaultChannel.properties artifact",
                    emailChannelProperties != null && emailChannelProperties.getContent().size() > 0);

            // The models should be delivered to the Work-Presentation service
            assertArrayEquals(
                    mainTestProjectName
                            + " project wp/wpModel.wp artifact should be targeted to the Work-manager micro-service",
                    new MicroService[] { MicroService.WP },
                    wpModelArtifact.getServices());

            assertArrayEquals(mainTestProjectName
                    + " project openspaceEmailPush_DefaultChannel/openspaceEmailPush_DefaultChannel.properties artifact should be targeted to the Work-manager micro-service",
                    new MicroService[] { MicroService.WP },
                    emailChannelProperties.getServices());

        } finally {
            if (projectImporter != null) {
                projectImporter.performDelete();
            }
        }
    }

    /**
     * Check that a process project with no user tasks doesn't claim to have contributions.
     * 
     * @throws Exception
     */
    public void testProjectWithoutContributions1() throws Exception {

        String projectName = "WpRascTestDataProject";

        ProjectImporter projectImporter = importProject(projectName);
        try {
            RascContributor fixture = new WpModelsRascContributor();

            IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);

            assertFalse(projectName + " project should not have WP RASC contributions",
                    fixture.hasContributionsFor(project));

        } finally {
            if (projectImporter != null) {
                projectImporter.performDelete();
            }
        }
    }

    /**
     * Import all projects from test plugin resources for the main test
     * 
     * @return the project importer
     */
    private ProjectImporter importMainTestProjects() {
        /*
         * Import and mgirate the project
         */
        mainTestProjectName = "WpRascTestProject";
        ProjectImporter projectImporter = TestUtil.importProjectsFromZip("com.tibco.xpd.sce.test", //$NON-NLS-1$
                new String[] { "resources/WpRascTest/" + "WpRascTestDataProject" + "/",
                        "resources/WpRascTest/" + mainTestProjectName + "/" }, //$NON-NLS-1$ //$NON-NLS-2$
                new String[] { "WpRascTestDataProject", mainTestProjectName });

        assertTrue("Failed to load projects from \"resources/WpRascTest/" //$NON-NLS-1$
                + "WpRascTestDataProject or WpRascTestProject" + "\"", //$NON-NLS-1$
                projectImporter != null);

        IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(mainTestProjectName); // $NON-NLS-1$
        assertTrue(mainTestProjectName + " project does not exist", //$NON-NLS-1$
                project.isAccessible());

        TestUtil.buildAndWait();

        return projectImporter;
    }

    /**
     * Import the given project from test plugin resources.
     * 
     * @param projectName
     * @return
     */
    private ProjectImporter importProject(String projectName) {
        /*
         * Import and mgirate the project
         */
        ProjectImporter projectImporter = TestUtil.importProjectsFromZip("com.tibco.xpd.sce.test", //$NON-NLS-1$
                new String[] { "resources/WpRascTest/" + projectName + "/" }, //$NON-NLS-1$ //$NON-NLS-2$
                new String[] { projectName });

        assertTrue("Failed to load projects from \"resources/WpRascTest/" //$NON-NLS-1$
                + projectName + "\"", //$NON-NLS-1$
                projectImporter != null);

        IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName); // $NON-NLS-1$
        assertTrue(projectName + " project does not exist", //$NON-NLS-1$
                project.isAccessible());
        return projectImporter;
    }
}
