<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="4.0.1">
  <include>qfs.qft</include>
  <include>../UtilProcedures/StandardStudioOperationsAndProcedures.qft</include>
  <include>../Procedures/6_MiscellaneousTests_Procedures/6_1_ExportDocumentationTest.qft</include>
  <include>../Procedures/6_MiscellaneousTests_Procedures/6_3_ExportWorkDataModelTest.qft</include>
  <include>../Procedures/6_MiscellaneousTests_Procedures/6_2_ExportDaaTest.qft</include>
  <include>../Procedures/6_MiscellaneousTests_Procedures/6_4_ExportOmToTibcoDETest.qft</include>
  <comment>Test suite that groups all the Miscellaneous test cases mentioned under the confluence http://confluence.tibco.com/display/BPM/6.+Miscellaneous+Tests together and executes them one by one.
This is similar to the "AllTests" class that we have for junits which just basically groups all the Miscellaneous tests together and executes them.
Please note that this suite should not actually contain any tests defined in them rather test cases should be defined separately in their own suite as procedures and 'AllStudioMiscellaneousTests' should 
only call them as procedures.

A sample test structure example is availabe under the Extras node, new test cases should be added exactly in a similar fashion becauuse the sample test deals with exception handling as well.

This suite does the following
1. Loads the properties files 'ArchivedFileLocation.properties' and BusinessStudioProp.properties which contains info of the studio home and test resources resp.
2. Starts studio in a new workspace.
3. Runs Miscellaneous test cases.
4. Stops studio.

@author 	kthombar
@since 	TBS 4.1.0
</comment>
  <Test id="_ut-cP" name="BusinessStudioProperties">
    <comment>Test that loads any properties which will be required during the execution of test cases eg: Studio home location, Workspace location, Test resource location etc...

@author 	kthombar
@since 	TBS 4.1.0</comment>
    <LoadPropertiesStep id="_uu0AI"
                        propertyfile="../Properties/ArchivedFileLocation.properties"
                        resourcename="ArchivedFileLocation">
      <comment>Loads the properties that specify the location of the test resouces.

@author 	kthombar
@since 	TBS 4.1.0</comment>
    </LoadPropertiesStep>
    <LoadPropertiesStep id="_ut-cQ"
                        propertyfile="../Properties/BusinessStudioProp.properties"
                        resourcename="Prop">
      <comment>Loads the properties that specify the studio home location, workspace location, swt jar location etc...

@author 	kthombar
@since 	TBS 4.1.0</comment>
    </LoadPropertiesStep>
  </Test>
  <Test id="_uu0B3" name="Start Studio">
    <comment>This test is responsible to start studio before the execution of test cases.


@author 	kthombar
@since 	TBS 4.1.0</comment>
    <ProcedureCall id="_uu0BA"
                   procedure="business_studio_lifecycle.setupBusinessStudio">
      <comment>Calls procedure that sets up Environment before we can start business studio
Does the following
1. Instruments SWT
2. Stops Business Studio if already running


@author 	kthombar
@since 	TBS 4.1.0</comment>
    </ProcedureCall>
    <ProcedureCall id="_uu0B6"
                   procedure="business_studio_lifecycle.startBusinessStudioProc">
      <variable name="studioHomeDir">${Prop:StudioHomeDirectory}</variable>
      <variable name="workspace">${Prop:StudioWorkspace}</variable>
      <variable name="executable">${Prop:ExecutableFile}</variable>
      <variable name="fileOrDirectoryToDelete">${Prop:StudioWorkspace}</variable>
      <comment>Calls procedure that starts the Business studio with the specicifed workspace
Does the following
1. Deletes the workspace if it is already present.
2. Starts the business studio with the specified workspace location
3. Waits for client to connect.
4. Closes the studio welcome window
5. Maximizes studio window.


@param	studioHomeDir                    the studio home directory
@param 	executable                           the executable name (i.e. TIBCOBusinessStudio.exe)
@param 	workspace                           the workspace to start the studio in
@param         fileOrDirectoryToDelete	the workspace , this needs to be deleted if it is already present.

@author 	kthombar
@since 	TBS 4.1.0</comment>
    </ProcedureCall>
  </Test>
  <TestSet id="_uu1EG" name="6) Miscellaneous Tests (Studio for Developer)">
    <comment>Test set that groups together all miscellaneous tests mentioned under the http://confluence.tibco.com/display/BPM/6.+Miscellaneous+Tests

@author 	kthombar
@since 	TBS 4.1.0</comment>
    <SetupSequence id="_uu1Ei" name="Start Studio if already not running">
      <comment>Setup that gets called before the execution of each test case mentioned under the test set.
This setup checks if the studio is running, if not then it starts studio


@author 	kthombar
@since 	TBS 4.1.0</comment>
      <ProcedureCall id="_uu1Ej"
                     procedure="business_studio_lifecycle.isBusinessStudioPresent"
                     retvarname="isBSPresent">
        <comment>Procedure that checks if the Studio is Running. Variable 'isBSPresent' will be true if the studio is running, else false

@author 	kthombar
@since 	TBS 4.1.0</comment>
      </ProcedureCall>
      <IfSequence id="_uu1Ek" test="$(isBSPresent) == 0">
        <ServerScriptStep id="_uu1El" name="Restarted Studio">
          <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "Studio restarted..."</code>
          <comment>Jython script that simply prints on the scrren that the studio is restarted.

@author 	kthombar
@since 	TBS 4.1.0</comment>
        </ServerScriptStep>
        <ProcedureCall id="_uu1Em"
                       procedure="business_studio_lifecycle.startBusinessStudioProc">
          <variable name="studioHomeDir">${Prop:StudioHomeDirectory}</variable>
          <variable name="workspace">${Prop:StudioWorkspace}</variable>
          <variable name="executable">${Prop:ExecutableFile}</variable>
          <variable name="fileOrDirectoryToDelete">${Prop:StudioWorkspace}</variable>
          <comment>Calls procedure that starts the Business studio with the specicifed workspace
Does the following
1. Deletes the workspace if it is already present.
2. Starts the business studio with the specified workspace location
3. Waits for client to connect.
4. Closes the studio welcome window
5. Maximizes studio window.


@param	studioHomeDir                    the studio home directory
@param 	executable                           the executable name (i.e. TIBCOBusinessStudio.exe)
@param 	workspace                           the workspace to start the studio in
@param         fileOrDirectoryToDelete	the workspace , this needs to be deleted if it is already present.

@author 	kthombar
@since 	TBS 4.1.0</comment>
        </ProcedureCall>
      </IfSequence>
    </SetupSequence>
    <TestCase id="_uu1Fs" name="1) Export Documentation Test">
      <comment>Test case that ensures that the export docuemntation tes works fine as mentioned http://confluence.tibco.com/display/BPM/6.1+Export+Documentation

@author 	kthombar
@since 	TBS 4.1.0</comment>
      <TryStep id="_uu1Ft">
        <ProcedureCall id="_uu1Fu" procedure="1) Export Documentation Test"/>
        <CatchSequence exception="TestException" id="_uu1Fv" maxerror="0">
          <comment>Catch block that deals with the exceptions thrown by the called procedure.
Does the following when an exception is caught
1. Performs exception handling so that studio is brought to the initial stage after any exceptions thrown by the called procedure and hence other test case will not be affected.

@author 	kthombar
@since 	TBS 4.1.0</comment>
          <TryStep id="_uu1Fw">
            <ServerScriptStep id="_uu1Fx" name="Test failed alert!!">
              <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Test '${qftest:testcase.qname}' failed."</code>
              <comment>Jython script that simply prints on the console  that a test has failed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </ServerScriptStep>
            <RethrowStep id="_uu1Fy">
              <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </RethrowStep>
            <FinallySequence id="_uu1Fz">
              <TryStep id="_uu1F+">
                <ProcedureCall id="_uu1F-"
                               procedure="business_studio_operations.cleanup.implicitExceptionHandler">
                  <variable name="client">BusinessStudio</variable>
                  <variable name="exportLocationWithTestName">${Prop:QFTProjectsLocation}\${Prop:FailingProjectLocation}\${qftest:testcase.qname}</variable>
                  <comment>This procedure encompasses the usage of other cleanup procedures in this package and is the recommended operation to perform after an exception occurs and is implicitly caught.
After this procedure is executed the studio should come back to its initial state and other test cases execution shouldn't be affected.
This procedure does the following 
1. Closes all open modal dialogs
2. Closes all menus
3. Resets the studio perspective
4. Closes all the open editors
5. Exports the current projects in studio to the 'FailingProjectsAndLogs' folder so that they can be used to trace the problem
6. Deletes all the STUDIO projects currently present  in the Studio.

@param	client	                                            The name of the SUT client.
@param	exportLocationWithTestName 	The location of the folder where to export the failing projects along with the name of the test case which will be the name of the zip.



@author	kthombar 
@since	4.1.0</comment>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_uu1G0"
                               maxerror="0">
                  <comment>Catch block that catches any exceptions thrown by the 'implicitExceptionHandler' procedure. We need this because there are chances that the procedures executed for exception handling may also throw exception hence that would leave studio into a state which is not fit to run other test cases. In such scenarios we will stop the business studio. The Setup node should take care of starting studio if it is not already running.

@author	kthombar 
@since	4.1.0</comment>
                  <TryStep id="_uu1G1">
                    <RethrowStep id="_uu1G2">
                      <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                    </RethrowStep>
                    <FinallySequence id="_uu1G3">
                      <ServerScriptStep id="_uu1G4"
                                        name="Studio Restarted Aleart">
                        <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Execution of test '${qftest:testcase.qname}' caused studio to go into not-responding state hence closing studio and restarting."</code>
                        <comment>Jython script that simply prints on the console  that the studio is being stopped because 'xyz' test case threw wxception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ServerScriptStep>
                      <ProcedureCall id="_uu1G5"
                                     procedure="business_studio_lifecycle.stopBusinessStudio">
                        <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ProcedureCall>
                    </FinallySequence>
                  </TryStep>
                </CatchSequence>
              </TryStep>
            </FinallySequence>
          </TryStep>
        </CatchSequence>
      </TryStep>
    </TestCase>
    <TestCase id="_uu1Oh" name="2) Export DAA Test">
      <comment>Test case that ensures that the export DAA test works fine as mentioned http://confluence.tibco.com/display/BPM/6.2+DAA+Export+Test

@author 	kthombar
@since 	TBS 4.1.0</comment>
      <TryStep id="_uu1Oi">
        <ProcedureCall id="_uu1Oj" procedure="1) Export DAA Test"/>
        <CatchSequence exception="TestException" id="_uu1Ok" maxerror="0">
          <comment>Catch block that deals with the exceptions thrown by the called procedure.
Does the following when an exception is caught
1. Performs exception handling so that studio is brought to the initial stage after any exceptions thrown by the called procedure and hence other test case will not be affected.

@author 	kthombar
@since 	TBS 4.1.0</comment>
          <TryStep id="_uu1Ol">
            <ServerScriptStep id="_uu1Om" name="Test failed alert!!">
              <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Test '${qftest:testcase.qname}' failed."</code>
              <comment>Jython script that simply prints on the console  that a test has failed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </ServerScriptStep>
            <RethrowStep id="_uu1On">
              <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </RethrowStep>
            <FinallySequence id="_uu1Oo">
              <TryStep id="_uu1Op">
                <ProcedureCall id="_uu1Oq"
                               procedure="business_studio_operations.cleanup.implicitExceptionHandler">
                  <variable name="client">BusinessStudio</variable>
                  <variable name="exportLocationWithTestName">${Prop:QFTProjectsLocation}\${Prop:FailingProjectLocation}\${qftest:testcase.qname}</variable>
                  <comment>This procedure encompasses the usage of other cleanup procedures in this package and is the recommended operation to perform after an exception occurs and is implicitly caught.
After this procedure is executed the studio should come back to its initial state and other test cases execution shouldn't be affected.
This procedure does the following 
1. Closes all open modal dialogs
2. Closes all menus
3. Resets the studio perspective
4. Closes all the open editors
5. Exports the current projects in studio to the 'FailingProjectsAndLogs' folder so that they can be used to trace the problem
6. Deletes all the STUDIO projects currently present  in the Studio.

@param	client	                                            The name of the SUT client.
@param	exportLocationWithTestName 	The location of the folder where to export the failing projects along with the name of the test case which will be the name of the zip.



@author	kthombar 
@since	4.1.0</comment>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_uu1Or"
                               maxerror="0">
                  <comment>Catch block that catches any exceptions thrown by the 'implicitExceptionHandler' procedure. We need this because there are chances that the procedures executed for exception handling may also throw exception hence that would leave studio into a state which is not fit to run other test cases. In such scenarios we will stop the business studio. The Setup node should take care of starting studio if it is not already running.

@author	kthombar 
@since	4.1.0</comment>
                  <TryStep id="_uu1Os">
                    <RethrowStep id="_uu1Ot">
                      <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                    </RethrowStep>
                    <FinallySequence id="_uu1Ou">
                      <ServerScriptStep id="_uu1Ov"
                                        name="Studio Restarted Aleart">
                        <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Execution of test '${qftest:testcase.qname}' caused studio to go into not-responding state hence closing studio and restarting."</code>
                        <comment>Jython script that simply prints on the console  that the studio is being stopped because 'xyz' test case threw wxception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ServerScriptStep>
                      <ProcedureCall id="_uu1Ow"
                                     procedure="business_studio_lifecycle.stopBusinessStudio">
                        <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ProcedureCall>
                    </FinallySequence>
                  </TryStep>
                </CatchSequence>
              </TryStep>
            </FinallySequence>
          </TryStep>
        </CatchSequence>
      </TryStep>
    </TestCase>
    <TestCase id="_uu1OR" name="3) Export Work Data Model Test">
      <comment>Test case that ensures that the export work data model works fine as mentioned http://confluence.tibco.com/display/BPM/6.1+Export+Documentation

@author 	kthombar
@since 	TBS 4.1.0</comment>
      <TryStep id="_uu1OS">
        <ProcedureCall id="_uu1OT"
                       procedure="1) Export Work Data Model Test"/>
        <CatchSequence exception="TestException" id="_uu1OU" maxerror="0">
          <comment>Catch block that deals with the exceptions thrown by the called procedure.
Does the following when an exception is caught
1. Performs exception handling so that studio is brought to the initial stage after any exceptions thrown by the called procedure and hence other test case will not be affected.

@author 	kthombar
@since 	TBS 4.1.0</comment>
          <TryStep id="_uu1OV">
            <ServerScriptStep id="_uu1OW" name="Test failed alert!!">
              <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Test '${qftest:testcase.qname}' failed."</code>
              <comment>Jython script that simply prints on the console  that a test has failed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </ServerScriptStep>
            <RethrowStep id="_uu1OX">
              <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </RethrowStep>
            <FinallySequence id="_uu1OY">
              <TryStep id="_uu1OZ">
                <ProcedureCall id="_uu1Oa"
                               procedure="business_studio_operations.cleanup.implicitExceptionHandler">
                  <variable name="client">BusinessStudio</variable>
                  <variable name="exportLocationWithTestName">${Prop:QFTProjectsLocation}\${Prop:FailingProjectLocation}\${qftest:testcase.qname}</variable>
                  <comment>This procedure encompasses the usage of other cleanup procedures in this package and is the recommended operation to perform after an exception occurs and is implicitly caught.
After this procedure is executed the studio should come back to its initial state and other test cases execution shouldn't be affected.
This procedure does the following 
1. Closes all open modal dialogs
2. Closes all menus
3. Resets the studio perspective
4. Closes all the open editors
5. Exports the current projects in studio to the 'FailingProjectsAndLogs' folder so that they can be used to trace the problem
6. Deletes all the STUDIO projects currently present  in the Studio.

@param	client	                                            The name of the SUT client.
@param	exportLocationWithTestName 	The location of the folder where to export the failing projects along with the name of the test case which will be the name of the zip.



@author	kthombar 
@since	4.1.0</comment>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_uu1Ob"
                               maxerror="0">
                  <comment>Catch block that catches any exceptions thrown by the 'implicitExceptionHandler' procedure. We need this because there are chances that the procedures executed for exception handling may also throw exception hence that would leave studio into a state which is not fit to run other test cases. In such scenarios we will stop the business studio. The Setup node should take care of starting studio if it is not already running.

@author	kthombar 
@since	4.1.0</comment>
                  <TryStep id="_uu1Oc">
                    <RethrowStep id="_uu1Od">
                      <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                    </RethrowStep>
                    <FinallySequence id="_uu1Oe">
                      <ServerScriptStep id="_uu1Of"
                                        name="Studio Restarted Aleart">
                        <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Execution of test '${qftest:testcase.qname}' caused studio to go into not-responding state hence closing studio and restarting."</code>
                        <comment>Jython script that simply prints on the console  that the studio is being stopped because 'xyz' test case threw wxception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ServerScriptStep>
                      <ProcedureCall id="_uu1Og"
                                     procedure="business_studio_lifecycle.stopBusinessStudio">
                        <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ProcedureCall>
                    </FinallySequence>
                  </TryStep>
                </CatchSequence>
              </TryStep>
            </FinallySequence>
          </TryStep>
        </CatchSequence>
      </TryStep>
    </TestCase>
    <TestCase id="_uu1Ox" name="4) Export Om to Tibco Directory Engine Test">
      <comment>Test case that ensures that the export export OM to TIBCO DE works fine as mentioned http://confluence.tibco.com/display/BPM/6.4+Export+OM+to+TIBCO+Directory+Engine+Test

@author 	kthombar
@since 	TBS 4.1.0</comment>
      <TryStep id="_uu1Oy">
        <ProcedureCall id="_uu1Oz"
                       procedure="1) Export Om to Tibco Directory Engine Test"/>
        <CatchSequence exception="TestException" id="_uu1O+" maxerror="0">
          <comment>Catch block that deals with the exceptions thrown by the called procedure.
Does the following when an exception is caught
1. Performs exception handling so that studio is brought to the initial stage after any exceptions thrown by the called procedure and hence other test case will not be affected.

@author 	kthombar
@since 	TBS 4.1.0</comment>
          <TryStep id="_uu1O-">
            <ServerScriptStep id="_uu1P0" name="Test failed alert!!">
              <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Test '${qftest:testcase.qname}' failed."</code>
              <comment>Jython script that simply prints on the console  that a test has failed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </ServerScriptStep>
            <RethrowStep id="_uu1P1">
              <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            </RethrowStep>
            <FinallySequence id="_uu1P2">
              <TryStep id="_uu1P3">
                <ProcedureCall id="_uu1P4"
                               procedure="business_studio_operations.cleanup.implicitExceptionHandler">
                  <variable name="client">BusinessStudio</variable>
                  <variable name="exportLocationWithTestName">${Prop:QFTProjectsLocation}\${Prop:FailingProjectLocation}\${qftest:testcase.qname}</variable>
                  <comment>This procedure encompasses the usage of other cleanup procedures in this package and is the recommended operation to perform after an exception occurs and is implicitly caught.
After this procedure is executed the studio should come back to its initial state and other test cases execution shouldn't be affected.
This procedure does the following 
1. Closes all open modal dialogs
2. Closes all menus
3. Resets the studio perspective
4. Closes all the open editors
5. Exports the current projects in studio to the 'FailingProjectsAndLogs' folder so that they can be used to trace the problem
6. Deletes all the STUDIO projects currently present  in the Studio.

@param	client	                                            The name of the SUT client.
@param	exportLocationWithTestName 	The location of the folder where to export the failing projects along with the name of the test case which will be the name of the zip.



@author	kthombar 
@since	4.1.0</comment>
                </ProcedureCall>
                <CatchSequence exception="TestException" id="_uu1P5"
                               maxerror="0">
                  <comment>Catch block that catches any exceptions thrown by the 'implicitExceptionHandler' procedure. We need this because there are chances that the procedures executed for exception handling may also throw exception hence that would leave studio into a state which is not fit to run other test cases. In such scenarios we will stop the business studio. The Setup node should take care of starting studio if it is not already running.

@author	kthombar 
@since	4.1.0</comment>
                  <TryStep id="_uu1P6">
                    <RethrowStep id="_uu1P7">
                      <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                    </RethrowStep>
                    <FinallySequence id="_uu1P8">
                      <ServerScriptStep id="_uu1P9"
                                        name="Studio Restarted Aleart">
                        <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Execution of test '${qftest:testcase.qname}' caused studio to go into not-responding state hence closing studio and restarting."</code>
                        <comment>Jython script that simply prints on the console  that the studio is being stopped because 'xyz' test case threw wxception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ServerScriptStep>
                      <ProcedureCall id="_uu1PA"
                                     procedure="business_studio_lifecycle.stopBusinessStudio">
                        <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </ProcedureCall>
                    </FinallySequence>
                  </TryStep>
                </CatchSequence>
              </TryStep>
            </FinallySequence>
          </TryStep>
        </CatchSequence>
      </TryStep>
    </TestCase>
    <CleanupSequence id="_uu1En" name="Do Cleanup">
      <comment>Cleanup that gets called after the execution of each test case mentioned under the test set.
This setup checks if the studio is running, if yes then it closes any open modal shells and resets the modelling perspective so that all the changes made by the test are no cleaned.


@author 	kthombar
@since 	TBS 4.1.0</comment>
      <ProcedureCall id="_uu1Eo"
                     procedure="business_studio_lifecycle.isBusinessStudioPresent"
                     retvarname="isBSPresent">
        <comment>Procedure that checks if the Studio is Running. Variable 'isBSPresent' will be true if the studio is running, else false

@author 	kthombar
@since 	TBS 4.1.0</comment>
      </ProcedureCall>
      <IfSequence id="_uu1Ep" test="$(isBSPresent) != 0">
        <ProcedureCall id="_uu1Eq"
                       procedure="business_studio_operations.cleanup.closeAllDialogsAndModalShells">
          <variable name="client">BusinessStudio</variable>
          <comment>Call procedure that closes all modal dialogs.
A modal dialog that is left open will cause events for the SUT to be blocked. Ensuring that modal dialogs are closed is a good operation to conduct in a setup/cleanup sequence.
Closing all instances of &lt;code&gt;org.eclipse.swt.widgets.Dialog&lt;/code&gt; and all modal instances of &lt;code&gt;org.eclipse.swt.widgets.Shell&lt;/code&gt;.


@param	client	The name of the SUT client.

@author	kthombar
@since	4.1.0</comment>
        </ProcedureCall>
        <ProcedureCall id="_uu1Er"
                       procedure="business_studio_operations.cleanup.resetPrespective">
          <variable name="client">BusinessStudio</variable>
          <comment>Call procedure that resets the perspective of studio.


@param	client	The name of the SUT client.

@author	kthombar
@since	4.1.0</comment>
        </ProcedureCall>
      </IfSequence>
    </CleanupSequence>
  </TestSet>
  <Test id="_uu0uc" name="Stop Studio">
    <comment>Stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
    <ProcedureCall id="_uu0ud"
                   procedure="business_studio_lifecycle.stopBusinessStudio">
      <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
    </ProcedureCall>
  </Test>
  <PackageRoot id="_3"/>
  <ExtraSequence id="_4">
    <TestSet id="_uu16o" name="Sample Test Set">
      <comment>This is a sample test set, new developed test sets should have the same structure because this test set takes care of setup, cleanup and exception handling.
All we need to do is copy this standard test set and just replace the 'Call Procedure' step inside the Test Case with the one we have developed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
      <SetupSequence id="_uu16p" name="Start Studio if already not running">
        <comment>Setup that gets called before the execution of each test case mentioned under the test set.
This setup checks if the studio is running, if not then it starts studio


@author 	kthombar
@since 	TBS 4.1.0</comment>
        <ProcedureCall id="_uu16q"
                       procedure="business_studio_lifecycle.isBusinessStudioPresent"
                       retvarname="isBSPresent">
          <comment>Procedure that checks if the Studio is Running. Variable 'isBSPresent' will be true if the studio is running, else false

@author 	kthombar
@since 	TBS 4.1.0</comment>
        </ProcedureCall>
        <IfSequence id="_uu16r" test="$(isBSPresent) == 0">
          <ServerScriptStep id="_uu16s" name="Restarted Studio">
            <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "Studio restarted..."</code>
            <comment>Jython script that simply prints on the scrren that the studio is restarted.

@author 	kthombar
@since 	TBS 4.1.0</comment>
          </ServerScriptStep>
          <ProcedureCall id="_uu16t"
                         procedure="business_studio_lifecycle.startBusinessStudioProc">
            <variable name="studioHomeDir">${Prop:StudioHomeDirectory}</variable>
            <variable name="workspace">${Prop:StudioWorkspace}</variable>
            <variable name="executable">${Prop:ExecutableFile}</variable>
            <variable name="fileOrDirectoryToDelete">${Prop:StudioWorkspace}</variable>
            <comment>Calls procedure that starts the Business studio with the specicifed workspace
Does the following
1. Deletes the workspace if it is already present.
2. Starts the business studio with the specified workspace location
3. Waits for client to connect.
4. Closes the studio welcome window
5. Maximizes studio window.


@param	studioHomeDir                    the studio home directory
@param 	executable                           the executable name (i.e. TIBCOBusinessStudio.exe)
@param 	workspace                           the workspace to start the studio in
@param         fileOrDirectoryToDelete	the workspace , this needs to be deleted if it is already present.

@author 	kthombar
@since 	TBS 4.1.0</comment>
          </ProcedureCall>
        </IfSequence>
      </SetupSequence>
      <TestCase id="_uu16u" name="Sample Test Case 1">
        <comment>Test case the ensures that the Local bom tests works fine as mentioned under http://confluence.tibco.com/display/BPM/3.3+BOM+Editor+and+BOM+entities+test

@author 	kthombar
@since 	TBS 4.1.0</comment>
        <TryStep id="_uu16v">
          <ProcedureCall id="_uu16w" procedure="Sample Procedure"/>
          <CatchSequence exception="TestException" id="_uu16x" maxerror="0">
            <comment>Catch block that deals with the exceptions thrown by the called procedure.
Does the following when an exception is caught
1. Performs exception handling so that studio is brought to the initial stage after any exceptions thrown by the called procedure and hence other test case will not be affected.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            <TryStep id="_uu16y">
              <ServerScriptStep id="_uu1Di" name="Test failed alert!!">
                <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Test '${qftest:testcase.qname}' failed."</code>
                <comment>Jython script that simply prints on the console  that a test has failed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
              </ServerScriptStep>
              <RethrowStep id="_uu16z">
                <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
              </RethrowStep>
              <FinallySequence id="_uu16+">
                <TryStep id="_uu16-">
                  <ProcedureCall id="_uu170"
                                 procedure="business_studio_operations.cleanup.implicitExceptionHandler">
                    <variable name="client">BusinessStudio</variable>
                    <variable name="exportLocationWithTestName">${Prop:QFTProjectsLocation}\${Prop:FailingProjectLocation}\${qftest:testcase.qname}</variable>
                    <comment>This procedure encompasses the usage of other cleanup procedures in this package and is the recommended operation to perform after an exception occurs and is implicitly caught.
After this procedure is executed the studio should come back to its initial state and other test cases execution shouldn't be affected.
This procedure does the following 
1. Closes all open modal dialogs
2. Closes all menus
3. Resets the studio perspective
4. Closes all the open editors
5. Exports the current projects in studio to the 'FailingProjectsAndLogs' folder so that they can be used to trace the problem
6. Deletes all the STUDIO projects currently present  in the Studio.

@param	client	                                            The name of the SUT client.
@param	exportLocationWithTestName 	The location of the folder where to export the failing projects along with the name of the test case which will be the name of the zip.



@author	kthombar 
@since	4.1.0</comment>
                  </ProcedureCall>
                  <CatchSequence exception="TestException" id="_uu171"
                                 maxerror="0">
                    <comment>Catch block that catches any exceptions thrown by the 'implicitExceptionHandler' procedure. We need this because there are chances that the procedures executed for exception handling may also throw exception hence that would leave studio into a state which is not fit to run other test cases. In such scenarios we will stop the business studio. The Setup node should take care of starting studio if it is not already running.

@author	kthombar 
@since	4.1.0</comment>
                    <TryStep id="_uu172">
                      <RethrowStep id="_uu173">
                        <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </RethrowStep>
                      <FinallySequence id="_uu174">
                        <ServerScriptStep id="_uu175"
                                          name="Studio Restarted Aleart">
                          <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Execution of test '${qftest:testcase.qname}' caused studio to go into not-responding state hence closing studio and restarting."</code>
                          <comment>Jython script that simply prints on the console  that the studio is being stopped because 'xyz' test case threw wxception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                        </ServerScriptStep>
                        <ProcedureCall id="_uu176"
                                       procedure="business_studio_lifecycle.stopBusinessStudio">
                          <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
                        </ProcedureCall>
                      </FinallySequence>
                    </TryStep>
                  </CatchSequence>
                </TryStep>
              </FinallySequence>
            </TryStep>
          </CatchSequence>
        </TryStep>
      </TestCase>
      <TestCase id="_uu1Dj" name="Sample Test Case 2">
        <comment>Test case the ensures that the Local bom tests works fine as mentioned under http://confluence.tibco.com/display/BPM/3.3+BOM+Editor+and+BOM+entities+test

@author 	kthombar
@since 	TBS 4.1.0</comment>
        <TryStep id="_uu1Dk">
          <ProcedureCall id="_uu1Dl" procedure="Sample Procedure"/>
          <CatchSequence exception="TestException" id="_uu1Dm" maxerror="0">
            <comment>Catch block that deals with the exceptions thrown by the called procedure.
Does the following when an exception is caught
1. Performs exception handling so that studio is brought to the initial stage after any exceptions thrown by the called procedure and hence other test case will not be affected.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            <TryStep id="_uu1Dn">
              <ServerScriptStep id="_uu1Do" name="Test failed alert!!">
                <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Test '${qftest:testcase.qname}' failed."</code>
                <comment>Jython script that simply prints on the console  that a test has failed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
              </ServerScriptStep>
              <RethrowStep id="_uu1Dp">
                <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
              </RethrowStep>
              <FinallySequence id="_uu1Dq">
                <TryStep id="_uu1Dr">
                  <ProcedureCall id="_uu1Ds"
                                 procedure="business_studio_operations.cleanup.implicitExceptionHandler">
                    <variable name="client">BusinessStudio</variable>
                    <variable name="exportLocationWithTestName">${Prop:QFTProjectsLocation}\${Prop:FailingProjectLocation}\${qftest:testcase.qname}</variable>
                    <comment>This procedure encompasses the usage of other cleanup procedures in this package and is the recommended operation to perform after an exception occurs and is implicitly caught.
After this procedure is executed the studio should come back to its initial state and other test cases execution shouldn't be affected.
This procedure does the following 
1. Closes all open modal dialogs
2. Closes all menus
3. Resets the studio perspective
4. Closes all the open editors
5. Exports the current projects in studio to the 'FailingProjectsAndLogs' folder so that they can be used to trace the problem
6. Deletes all the STUDIO projects currently present  in the Studio.

@param	client	                                            The name of the SUT client.
@param	exportLocationWithTestName 	The location of the folder where to export the failing projects along with the name of the test case which will be the name of the zip.



@author	kthombar 
@since	4.1.0</comment>
                  </ProcedureCall>
                  <CatchSequence exception="TestException" id="_uu1Dt"
                                 maxerror="0">
                    <comment>Catch block that catches any exceptions thrown by the 'implicitExceptionHandler' procedure. We need this because there are chances that the procedures executed for exception handling may also throw exception hence that would leave studio into a state which is not fit to run other test cases. In such scenarios we will stop the business studio. The Setup node should take care of starting studio if it is not already running.

@author	kthombar 
@since	4.1.0</comment>
                    <TryStep id="_uu1Du">
                      <RethrowStep id="_uu1Dv">
                        <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </RethrowStep>
                      <FinallySequence id="_uu1Dw">
                        <ServerScriptStep id="_uu1Dx"
                                          name="Studio Restarted Aleart">
                          <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Execution of test '${qftest:testcase.qname}' caused studio to go into not-responding state hence closing studio and restarting."</code>
                          <comment>Jython script that simply prints on the console  that the studio is being stopped because 'xyz' test case threw wxception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                        </ServerScriptStep>
                        <ProcedureCall id="_uu1Dy"
                                       procedure="business_studio_lifecycle.stopBusinessStudio">
                          <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
                        </ProcedureCall>
                      </FinallySequence>
                    </TryStep>
                  </CatchSequence>
                </TryStep>
              </FinallySequence>
            </TryStep>
          </CatchSequence>
        </TryStep>
      </TestCase>
      <TestCase id="_uu1Dz" name="Sample Test Case 3">
        <comment>Test case the ensures that the Local bom tests works fine as mentioned under http://confluence.tibco.com/display/BPM/3.3+BOM+Editor+and+BOM+entities+test

@author 	kthombar
@since 	TBS 4.1.0</comment>
        <TryStep id="_uu1D+">
          <ProcedureCall id="_uu1D-" procedure="Sample Procedure"/>
          <CatchSequence exception="TestException" id="_uu1E0" maxerror="0">
            <comment>Catch block that deals with the exceptions thrown by the called procedure.
Does the following when an exception is caught
1. Performs exception handling so that studio is brought to the initial stage after any exceptions thrown by the called procedure and hence other test case will not be affected.

@author 	kthombar
@since 	TBS 4.1.0</comment>
            <TryStep id="_uu1E1">
              <ServerScriptStep id="_uu1E2" name="Test failed alert!!">
                <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Test '${qftest:testcase.qname}' failed."</code>
                <comment>Jython script that simply prints on the console  that a test has failed.

@author 	kthombar
@since 	TBS 4.1.0</comment>
              </ServerScriptStep>
              <RethrowStep id="_uu1E3">
                <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
              </RethrowStep>
              <FinallySequence id="_uu1E4">
                <TryStep id="_uu1E5">
                  <ProcedureCall id="_uu1E6"
                                 procedure="business_studio_operations.cleanup.implicitExceptionHandler">
                    <variable name="client">BusinessStudio</variable>
                    <variable name="exportLocationWithTestName">${Prop:QFTProjectsLocation}\${Prop:FailingProjectLocation}\${qftest:testcase.qname}</variable>
                    <comment>This procedure encompasses the usage of other cleanup procedures in this package and is the recommended operation to perform after an exception occurs and is implicitly caught.
After this procedure is executed the studio should come back to its initial state and other test cases execution shouldn't be affected.
This procedure does the following 
1. Closes all open modal dialogs
2. Closes all menus
3. Resets the studio perspective
4. Closes all the open editors
5. Exports the current projects in studio to the 'FailingProjectsAndLogs' folder so that they can be used to trace the problem
6. Deletes all the STUDIO projects currently present  in the Studio.

@param	client	                                            The name of the SUT client.
@param	exportLocationWithTestName 	The location of the folder where to export the failing projects along with the name of the test case which will be the name of the zip.



@author	kthombar 
@since	4.1.0</comment>
                  </ProcedureCall>
                  <CatchSequence exception="TestException" id="_uu1E7"
                                 maxerror="0">
                    <comment>Catch block that catches any exceptions thrown by the 'implicitExceptionHandler' procedure. We need this because there are chances that the procedures executed for exception handling may also throw exception hence that would leave studio into a state which is not fit to run other test cases. In such scenarios we will stop the business studio. The Setup node should take care of starting studio if it is not already running.

@author	kthombar 
@since	4.1.0</comment>
                    <TryStep id="_uu1E8">
                      <RethrowStep id="_uu1E9">
                        <comment>Rethrow the exception so that qft has a screen-shot and trace of the exception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                      </RethrowStep>
                      <FinallySequence id="_uu1EA">
                        <ServerScriptStep id="_uu1EB"
                                          name="Studio Restarted Aleart">
                          <code>'''
@author kthombar
@since 	TBS 4.0.1
'''
print  "ALERT!! Execution of test '${qftest:testcase.qname}' caused studio to go into not-responding state hence closing studio and restarting."</code>
                          <comment>Jython script that simply prints on the console  that the studio is being stopped because 'xyz' test case threw wxception.

@author 	kthombar
@since 	TBS 4.1.0</comment>
                        </ServerScriptStep>
                        <ProcedureCall id="_uu1EC"
                                       procedure="business_studio_lifecycle.stopBusinessStudio">
                          <comment>Calls procedure that stops Business Studio if it is already running

@author 	kthombar
@since 	TBS 4.1.0</comment>
                        </ProcedureCall>
                      </FinallySequence>
                    </TryStep>
                  </CatchSequence>
                </TryStep>
              </FinallySequence>
            </TryStep>
          </CatchSequence>
        </TryStep>
      </TestCase>
      <CleanupSequence id="_uu177" name="Do Cleanup">
        <comment>Cleanup that gets called after the execution of each test case mentioned under the test set.
This setup checks if the studio is running, if yes then it closes any open modal shells and resets the modelling perspective so that all the changes made by the test are no cleaned.


@author 	kthombar
@since 	TBS 4.1.0</comment>
        <ProcedureCall id="_uu178"
                       procedure="business_studio_lifecycle.isBusinessStudioPresent"
                       retvarname="isBSPresent">
          <comment>Procedure that checks if the Studio is Running. Variable 'isBSPresent' will be true if the studio is running, else false

@author 	kthombar
@since 	TBS 4.1.0</comment>
        </ProcedureCall>
        <IfSequence id="_uu179" test="$(isBSPresent) != 0">
          <ProcedureCall id="_uu17A"
                         procedure="business_studio_operations.cleanup.closeAllDialogsAndModalShells">
            <variable name="client">BusinessStudio</variable>
            <comment>Call procedure that closes all modal dialogs.
A modal dialog that is left open will cause events for the SUT to be blocked. Ensuring that modal dialogs are closed is a good operation to conduct in a setup/cleanup sequence.
Closing all instances of &lt;code&gt;org.eclipse.swt.widgets.Dialog&lt;/code&gt; and all modal instances of &lt;code&gt;org.eclipse.swt.widgets.Shell&lt;/code&gt;.


@param	client	The name of the SUT client.

@author	kthombar
@since	4.1.0</comment>
          </ProcedureCall>
          <ProcedureCall id="_uu17B"
                         procedure="business_studio_operations.cleanup.resetPrespective">
            <variable name="client">BusinessStudio</variable>
            <comment>Call procedure that resets the perspective of studio.


@param	client	The name of the SUT client.

@author	kthombar
@since	4.1.0</comment>
          </ProcedureCall>
        </IfSequence>
      </CleanupSequence>
    </TestSet>
    <Procedure id="_6" name="Sample Procedure">
      <comment>This is a sample procedure and in general all procedures should be developed in similar fashion and should follow the steps mentioned below in that order.

1. Import the Studio project (Or the test developer wants to create a new project)
2. Perform operations on the created/imported project in step 1
3. Save all (will save all the dirty editors)
4. Inspect the model (can be optional if we really do not want to inspect anything)
5. Export DAA (can be optional)
6. Delete the project imported/created in step 1.

@author 	kthombar
@since 	TBS 4.1.0</comment>
      <ProcedureCall id="_uu15p"
                     procedure="business_studio_operations.projectOperations.importBpmArchivedProjectInStudio">
        <variable name="projectLocationOnDirectory">${ArchivedFileLocation:3_4_OmAndOmEntitiesTestArchivedFileLocation}/OrganizationProject.zip</variable>
      </ProcedureCall>
      <BasicSequence id="_uu0jo" name="Create OM entities.">
        <BasicSequence id="_uu17g" name="Open OM editor">
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject"
                          event="MOUSE_MPRC" id="_uu17h" modifiers="16"
                          x="-29" y="13"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization"
                          event="MOUSE_MPRC" id="_uu17i" modifiers="16"
                          x="-29" y="8"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/OrganizationProject.om"
                          event="MOUSE_MPRC" id="_uu17j" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menu-group.openWith"
                              event="SELECTION" id="_uu17k"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemOrganization_Model_Diagram_Editing"
                              event="SELECTION" id="_uu17l"/>
        </BasicSequence>
        <BasicSequence id="_uu17m" name="Create Dynamic Org">
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas2@/Palette Root/Palette Container (Nodes)/Palette Entry (Dynamic Organization)"
                          event="MOUSE_MPRC" id="_uu17n" modifiers="16" x="41"
                          y="27"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas" event="MOUSE_MPRC"
                          id="_uu17o" modifiers="16" x="222" y="183"/>
        </BasicSequence>
        <BasicSequence id="_uu17p"
                       name="Create Org unit, position and dynamic org unit in normal org">
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/Organization1"
                          event="MOUSE_MPRC" id="_uu17q" modifiers="16" x="13"
                          y="11"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas2@/Palette Root/Palette Container (Nodes)/Palette Entry (Organization Unit)"
                          event="MOUSE_MPRC" id="_uu17r" modifiers="16" x="56"
                          y="12"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas" event="MOUSE_MPRC"
                          id="_uu17s" modifiers="16" x="229" y="37"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas2@/Palette Root/Palette Container (Nodes)/Palette Entry (Position)"
                          event="MOUSE_MPRC" id="_uu17t" modifiers="16" x="32"
                          y="14"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/OrgUnit1/OrgUnitPositionSubCompartment"
                          event="MOUSE_MPRC" id="_uu17u" modifiers="16" x="26"
                          y="16"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas2@/Palette Root/Palette Container (Nodes)/Palette Entry (Dynamic Organization Unit)"
                          event="MOUSE_MPRC" id="_uu17v" modifiers="16" x="60"
                          y="25"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas" event="MOUSE_MPRC"
                          id="_uu17w" modifiers="16" x="162" y="122"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas2@/Palette Root/Palette Container (Links)/Palette Entry (Hierarchy)"
                          event="MOUSE_MPRC" id="_uu17x" modifiers="16" x="69"
                          y="15"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/OrgUnit1/OrgUnitSubDisplayName (OrgUnit1)"
                          event="MOUSE_MOVED" id="_uu17y" modifiers="0" x="1"
                          y="9"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/OrgUnit1/OrgUnitSubDisplayName (OrgUnit1)"
                          event="MOUSE_PRESSED" id="_uu17z" modifiers="16"
                          x="1" y="9"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/DynamicOrgUnit ( - not set -)"
                          event="MOUSE_DRAGGED" id="_uu17+" modifiers="16"
                          x="47" y="30"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/DynamicOrgUnit ( - not set -)"
                          event="MOUSE_RELEASED" id="_uu17-" modifiers="16"
                          x="47" y="30"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/DynamicOrgUnit ( - not set -)"
                          event="MOUSE_MPRC" id="_uu180" modifiers="4"
                          popup="true" x="19" y="13"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menu-showPropertiesViewAction"
                              event="SELECTION" id="_uu181"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="buttonbrowse-button" event="MOUSE_MPRC"
                          id="_uu182" modifiers="16"/>
          <ComponentWaiter client="BusinessStudio"
                           component="CommonPickerDialog" id="_uu183"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="CommonPickerDialog2.tableMatching_items:&amp;0&amp;0"
                          event="MOUSE_MPRC" id="_uu184" modifiers="16"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="buttonOk5" event="MOUSE_MPRC" id="_uu185"
                          modifiers="16"/>
        </BasicSequence>
        <BasicSequence id="_uu186"
                       name="Create Org Identifiers in dynamic org">
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/OrganizationSubBadge (Organization1  Organization Model   )"
                          event="MOUSE_MPRC" id="_uu187" modifiers="16"
                          x="148" y="41"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/DynamicOrganization1"
                          event="MOUSE_MPRC" id="_uu188" modifiers="16" x="12"
                          y="79"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/DynamicOrganization1"
                          event="MOUSE_MPRC" id="_uu189" modifiers="16" x="10"
                          y="16"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas" event="MOUSE_MPRC"
                          id="_uu18A" modifiers="4" popup="true" x="235"
                          y="199"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menu-showPropertiesViewAction"
                              event="SELECTION" id="_uu18B"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Properties2.canvasDynamic_Organization"
                          event="MOUSE_MPRC" id="_uu18C" modifiers="16" x="87"
                          y="8"/>
          <SelectionEventStep client="BusinessStudio"
                              component="toolItemTipAdd_a_Dynamic_Organization_Identifier_(INS)"
                              event="SELECTION" id="_uu18D"/>
          <SelectionEventStep client="BusinessStudio"
                              component="toolItemTipAdd_a_Dynamic_Organization_Identifier_(INS)"
                              event="SELECTION" id="_uu18E"/>
          <SelectionEventStep client="BusinessStudio"
                              component="toolItemTipAdd_a_Dynamic_Organization_Identifier_(INS)"
                              event="SELECTION" id="_uu18F"/>
        </BasicSequence>
        <BasicSequence id="_uu18G" name="Create Org unit in dynamic org">
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas2@/Palette Root/Palette Container (Nodes)/Palette Entry (Organization Unit)"
                          event="MOUSE_MPRC" id="_uu18H" modifiers="16" x="49"
                          y="21"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas" event="MOUSE_MPRC"
                          id="_uu18I" modifiers="16" x="432" y="153"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas2@/Palette Root/Palette Container (Nodes)/Palette Entry (Position)"
                          event="MOUSE_MPRC" id="_uu18J" modifiers="16" x="46"
                          y="9"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Editor3.canvas@/Diagram/OrgUnit1/OrgUnitPositionSubCompartment"
                          event="MOUSE_MPRC" id="_uu18K" modifiers="16" x="47"
                          y="4"/>
        </BasicSequence>
        <BasicSequence id="_uu18L"
                       name="Create Privilege, Capability, Query, Group , Location...">
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om"
                          event="MOUSE_MPRC" id="_uu18M" modifiers="16"
                          x="-29" y="10"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)"
                          event="MOUSE_MPRC" id="_uu18N" modifiers="16"
                          x="-29" y="10"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Capabilities"
                          event="MOUSE_MPRC" id="_uu18O" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18P"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemCapability" event="SELECTION"
                              id="_uu18Q"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Capabilities"
                          event="MOUSE_MPRC" id="_uu18R" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18S"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemCapability_Category"
                              event="SELECTION" id="_uu18T"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Capabilities/Category1 (Category1)"
                          event="MOUSE_MPRC" id="_uu18U" modifiers="16"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Capabilities/Category1 (Category1)"
                          event="MOUSE_MPRC" id="_uu18V" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child3" event="SELECTION"
                              id="_uu18W"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemCapability2"
                              event="SELECTION" id="_uu18X"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Groups"
                          event="MOUSE_MPRC" id="_uu18Y" modifiers="4"
                          popup="true" x="-3" y="8"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18Z"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemGroup" event="SELECTION"
                              id="_uu18a"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Locations"
                          event="MOUSE_MPRC" id="_uu18b" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18c"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemStandard_Location_Type"
                              event="SELECTION" id="_uu18d"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Locations"
                          event="MOUSE_MPRC" id="_uu18e" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18f"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemLocation" event="SELECTION"
                              id="_uu18g"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Privileges"
                          event="MOUSE_MPRC" id="_uu18h" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18i"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemPrivilege" event="SELECTION"
                              id="_uu18j"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Privileges"
                          event="MOUSE_MPRC" id="_uu18k" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18l"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemPrivilege_Category"
                              event="SELECTION" id="_uu18m"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Privileges/Category1 (Category1)"
                          event="MOUSE_MPRC" id="_uu18n" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child3" event="SELECTION"
                              id="_uu18o"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemPrivilege2" event="SELECTION"
                              id="_uu18p"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Queries"
                          event="MOUSE_MPRC" id="_uu18q" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18r"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemOrganization_Query"
                              event="SELECTION" id="_uu18s"/>
          <MouseEventStep clicks="1" client="BusinessStudio"
                          component="Project_Explorer@/OrganizationProject/Organization/* OrganizationProject.om/Organization Model (OrganizationModel)/Resources"
                          event="MOUSE_MPRC" id="_uu18t" modifiers="4"
                          popup="true"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemAdd_Child" event="SELECTION"
                              id="_uu18u"/>
          <SelectionEventStep client="BusinessStudio"
                              component="menuitemHuman_Resource_Type"
                              event="SELECTION" id="_uu18v"/>
        </BasicSequence>
      </BasicSequence>
      <ProcedureCall id="_uu0lC"
                     procedure="business_studio_operations.saveAll"/>
      <TestStep id="_uu0+Q" name="inspectModel">
        <ProcedureCall id="_uu0+U"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].groups[name="Group1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15X"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].capabilityCategories[name="Category1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15Y"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].capabilities[name="Capability1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15a"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].capabilities[name="Capability2"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15b"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].organizations[name="Organization1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15c"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].organizations[name="Organization1"].units[name="OrgUnit1",Impl="OrgUnitImpl"].positions[name="Position1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15d"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].organizations[name="Organization1"].units[Impl="DynamicOrgUnit"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15e"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].organizations[name="DynamicOrganization1"].units[name="OrgUnit1",Impl="OrgUnitImpl"].positions[name="Position1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15f"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].organizations[name="DynamicOrganization1"].dynamicOrgIdentifiers[name="Identifier1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15g"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].organizations[name="DynamicOrganization1"].dynamicOrgIdentifiers[name="Identifier2"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15h"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].organizations[name="DynamicOrganization1"].dynamicOrgIdentifiers[name="Identifier3"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15i"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].locations[name="Location1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15j"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].locations[name="Location2"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15k"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].privileges[name="Privilege1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15m"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].privileges[name="Privilege2"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15n"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].privilegeCategories[name="Category1"]</variable>
        </ProcedureCall>
        <ProcedureCall id="_uu15o"
                       procedure="business_studio_operations.inspectModel">
          <variable name="resourceLocation">OrganizationProject/Organization/OrganizationProject.om</variable>
          <variable name="elementToFind">OrgModel[name="OrganizationModel"].resources[name="Resource1"]</variable>
        </ProcedureCall>
      </TestStep>
      <ProcedureCall id="_uu16n"
                     procedure="business_studio_operations.exportDAA">
        <variable name="projectName">OrganizationProject</variable>
      </ProcedureCall>
      <ProcedureCall id="_uu0v3"
                     procedure="business_studio_operations.projectOperations.deleteProject">
        <variable name="projectName">OrganizationProject</variable>
      </ProcedureCall>
    </Procedure>
  </ExtraSequence>
  <WindowList id="_5"/>
</RootStep>
