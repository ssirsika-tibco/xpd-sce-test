<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions/>
  <description>&lt;b&gt;Takes the Unit Test Target Platform and creates the Test Environment&lt;/b&gt;&#xd;
&lt;p&gt;&#xd;
&lt;i&gt;Triggered by the successul completion of &quot;Build-SCE-Unit-Tests-and-Target-Platform-(beta)&quot;.&lt;/i&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SVN_BRANCH</name>
          <description>Defines the svn branch from which the source will be downloaded.
Also determines the sub-folder within c:/builder/ to features will be compiled.</description>
          <defaultValue>trunk</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SVN_REPO</name>
          <description>Identifies the SVN repository from which source will be downloaded.</description>
          <defaultValue>https://emea-swi-svn.emea.tibco.com/svn/technical/xpd/sce</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TP_CREATOR_JOB</name>
          <description>The name of Jenkins job that creates the Unit Test Target Platform.
This is used to retrieve the Target Platform artifact.</description>
          <defaultValue>Build-SCE-Unit-Tests-and-Target-Platform-(beta)</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <jenkins.triggers.ReverseBuildTrigger>
          <spec></spec>
          <upstreamProjects>Build-SCE-Unit-Tests-and-Target-Platform-(beta), </upstreamProjects>
          <threshold>
            <name>SUCCESS</name>
            <ordinal>0</ordinal>
            <color>BLUE</color>
            <completeBuild>true</completeBuild>
          </threshold>
        </jenkins.triggers.ReverseBuildTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.68">
    <script>node {
  try {
    stage(&quot;Create Test Environment&quot;) {
      updateSandbox(&quot;${SVN_REPO}/${SVN_BRANCH}/tbs-bpm/ExecuteTest&quot;)

      withAnt(installation: &apos;Ant 1.10.5&apos;) {
        if(isUnix()) {
          sh  &quot;ant -buildfile ExecuteTest/build.xml -Dautobuild.branch=${SVN_BRANCH} -Duser.home=/Users/administrator -DjenkinsJobName=${TP_CREATOR_JOB} -Dofficial-release-build=true -Dautobuild.release.substitutions-bypass=true prepareTestEnvironmentOnSlave&quot;
        } else {
          bat &quot;ant -buildfile ExecuteTest/build.xml -Dautobuild.branch=${SVN_BRANCH} -Duser.home=/Users/administrator -DjenkinsJobName=${TP_CREATOR_JOB} -Dofficial-release-build=true -Dautobuild.release.substitutions-bypass=true prepareTestEnvironmentOnSlave&quot;
        }
      }
    }

    // if build failed or previous failure resolved
    def prevResult = (currentBuild.getPreviousBuild() == null) ? &apos;SUCCESS&apos; : currentBuild.getPreviousBuild().result
    if ((currentBuild.result != &apos;SUCCESS&apos;) || (prevResult != &apos;SUCCESS&apos;)) {
      notifyStatus(null)
    }
  } catch (e) {
    notifyStatus(e)
    throw e
  }
}

// sends build notification - success of failure
def notifyStatus(aException) {
  //emailext recipientProviders: [culprits(), developers()], replyTo: &apos;$DEFAULT_REPLYTO&apos;, subject: &apos;$DEFAULT_SUBJECT&apos;, to: &apos;$DEFAULT_RECIPIENTS&apos;,
  //         body: &apos;$DEFAULT_CONTENT&apos;, postsendScript: &apos;$DEFAULT_POSTSEND_SCRIPT&apos;, presendScript: &apos;$DEFAULT_PRESEND_SCRIPT&apos;
}

// performs a checkout (updates only) and returns true if any files were changed; false otherwise.
def updateSandbox(url) {
  def changeSets = currentBuild.changeSets
  def currentSize = changeSets.size()
  
  checkout([$class: &apos;SubversionSCM&apos;, additionalCredentials: [], excludedCommitMessages: &apos;&apos;,
      excludedRegions: &apos;&apos;, excludedRevprop: &apos;&apos;, excludedUsers: &apos;&apos;, filterChangelog: false,
      ignoreDirPropChanges: true, includedRegions: &apos;&apos;, quietOperation: true,
      locations: [[cancelProcessOnExternalsFail: true, credentialsId: &apos;c77ef2cf-d36f-4e2b-9015-a114fe2183c0&apos;,
      depthOption: &apos;infinity&apos;, ignoreExternalsOption: true, remote: url]],
      workspaceUpdater: [$class: &apos;UpdateUpdater&apos;]])

  return currentSize &lt; changeSets.size()
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>