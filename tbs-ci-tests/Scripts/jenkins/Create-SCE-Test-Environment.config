<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions/>
  <description>&lt;b&gt;Creates a Test Environment from the most recent Unit Test Target Platform before running the Unit Tests.&lt;/b&gt;&#xd;
&lt;p&gt;&#xd;
&lt;i&gt;Triggered by the successul completion of &quot;Build-SCE-Unit-Tests-and-Target-Platform-(beta)&quot;.&lt;/i&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SVN_BRANCH</name>
          <description>Defines the svn branch from which the source will be downloaded.
Also determines the sub-folder within c:/builder/ to features will be compiled.</description>
          <defaultValue>trunk</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SVN_REPO</name>
          <description>Identifies the SVN repository from which source will be downloaded.</description>
          <defaultValue>https://emea-swi-svn.emea.tibco.com/svn/technical/xpd/sce</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <jenkins.triggers.ReverseBuildTrigger>
          <spec></spec>
          <upstreamProjects>Build-SCE-Unit-Tests-and-Target-Platform-(beta), </upstreamProjects>
          <threshold>
            <name>SUCCESS</name>
            <ordinal>0</ordinal>
            <color>BLUE</color>
            <completeBuild>true</completeBuild>
          </threshold>
        </jenkins.triggers.ReverseBuildTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.68">
    <script>node {
  try {
    // create a sub-directory for branch and work within that
    dir(&quot;${SVN_BRANCH}&quot;) {
      stage(&quot;Create Test Environment&quot;) {
        def upstreamBuilds = currentBuild.upstreamBuilds;
        if ((upstreamBuilds == null) || (upstreamBuilds.isEmpty())) {
          error &quot;${currentBuild.fullProjectName} cannot be run directly. It must be started from an upstream job&quot;
        }

        updateSandbox(&quot;${SVN_REPO}/${SVN_BRANCH}/tbs-bpm/ExecuteTest&quot;)

        // determine the latest TP archive from the upstream job
        def upstream = upstreamBuilds[0];
        def archivedTargetPlatform = &quot;${upstream.absoluteUrl}artifact/tp-sce-test-${upstream.number}.zip&quot;
        echo &quot;Last TP archive: ${archivedTargetPlatform}&quot;

        withAnt(installation: &apos;Ant 1.10.5&apos;) {
          if(isUnix()) {
            sh  &quot;ant -buildfile ExecuteTest/build.xml -Dautobuild.branch=${SVN_BRANCH} -Duser.home=/Users/administrator -Dresults.dir=${env.WORKSPACE}/${SVN_BRANCH}/results -DlatestStudioBuildLocation=${archivedTargetPlatform} -Dofficial-release-build=true -Dautobuild.release.substitutions-bypass=true -DjunitFeatureList=com.tibco.xpd.sce.test.feature createTestEnvirnmentAndRunJunitTest&quot;
          } else {
            bat &quot;ant -buildfile ExecuteTest/build.xml -Dautobuild.branch=${SVN_BRANCH} -Duser.home=/Users/administrator -Dresults.dir=${env.WORKSPACE}/${SVN_BRANCH}/results -DlatestStudioBuildLocation=${archivedTargetPlatform} -Dofficial-release-build=true -Dautobuild.release.substitutions-bypass=true -DjunitFeatureList=com.tibco.xpd.sce.test.feature createTestEnvirnmentAndRunJunitTest&quot;
          }
        }
      }

      stage(&quot;Archive Artifacts&quot;) {
        archiveArtifacts allowEmptyArchive: false, artifacts: &apos;results/*.xml&apos;,
                         caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: false
      }
      
      stage(&quot;Publish JUnit Result&quot;) {
        junit &quot;results/*/.xml&quot;
      }
    }
    currentBuild.result = &quot;SUCCESS&quot;
  } catch (e) {
  	currentBuild.result = &quot;FAILED&quot;
  	throw e;
  } finally {
    // if build failed or previous failure resolved
    def prevResult = (currentBuild.previousBuild == null) ? &quot;SUCCESS&quot; : currentBuild.previousBuild.result
    if ((currentBuild.result != &quot;SUCCESS&quot;) || (prevResult != &quot;SUCCESS&quot;)) {
      notifyStatus(currentBuild.result)
    }
  }
}

// sends build notification - success or failure
def notifyStatus(aStatus) {
  emailext(
      recipientProviders: [culprits(), developers()],
      replyTo: &apos;$DEFAULT_REPLYTO&apos;,
      subject: &apos;$DEFAULT_SUBJECT&apos;,
      to: &apos;$DEFAULT_RECIPIENTS&apos;,
      body: &apos;$DEFAULT_CONTENT&apos;,
      postsendScript: &apos;$DEFAULT_POSTSEND_SCRIPT&apos;,
      presendScript: &apos;$DEFAULT_PRESEND_SCRIPT&apos;
  )
}

// performs a checkout (updates only) and returns true if any files were changed; false otherwise.
def updateSandbox(url) {
  def currentSize = getChangeSetSize()
  echo &quot;current size: ${currentSize}&quot;

  def scmVars = checkout([
      $class: &apos;SubversionSCM&apos;,
      additionalCredentials: [],
      excludedCommitMessages: &apos;&apos;,
      excludedRegions: &apos;&apos;,
      excludedRevprop: &apos;&apos;,
      excludedUsers: &apos;&apos;,
      filterChangelog: false,
      ignoreDirPropChanges: true,
      includedRegions: &apos;&apos;,
      quietOperation: false,
      locations: [[
        cancelProcessOnExternalsFail: true,
        credentialsId: &apos;c77ef2cf-d36f-4e2b-9015-a114fe2183c0&apos;,
        depthOption: &apos;infinity&apos;,
        ignoreExternalsOption: true,
        remote: url
      ]],
      workspaceUpdater: [$class: &apos;UpdateUpdater&apos;]
  ])
  echo &quot;${scmVars}&quot;

  def updatedSize = getChangeSetSize()
  echo &quot;updated size: ${updatedSize}&quot;
  return currentSize &lt; updatedSize
}

def getChangeSetSize() {
  def changeSets = currentBuild.changeSets
  // for (int i = 0; i &lt; changeSets.size(); i++) {
  //   def entries = changeSets[i].items
  //   echo &quot;Change set ${i}&quot;
  //   for (int j = 0; j &lt; entries.length; j++) {
  //     def entry = entries[j]
  //     echo &quot;${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}&quot;
  //     def files = new ArrayList(entry.affectedFiles)
  //     for (int k = 0; k &lt; files.size(); k++) {
  //       def file = files[k]
  //       echo &quot;  ${file.editType.name} ${file.path}&quot;
  //     }
  //   }
  // }
  return changeSets.size();
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>2</quietPeriod>
  <disabled>false</disabled>
</flow-definition>