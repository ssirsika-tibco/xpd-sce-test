<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="PaletteFactoryGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.List;
import org.eclipse.gef.Tool;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.jface.resource.ImageDescriptor;
<%
importManager.registerInnerClass("LinkToolEntry");
importManager.registerInnerClass("NodeToolEntry");
importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=palette.getFactoryClassName()%> {

	/**
	 * @generated
	 */
	public void fillPalette(PaletteRoot paletteRoot) {
<%
for (int i = 0; i < palette.getGroups().size(); i++) {
	ToolGroup toolGroup = (ToolGroup) palette.getGroups().get(i);%>
		paletteRoot.add(<%=toolGroup.getCreateMethodName()%>());
<%}%>
	}

<%
final LinkedList/*<ToolGroup>*/ toolGroupsQueue = new LinkedList();
toolGroupsQueue.addAll(palette.getGroups());
final LinkedList/*<ToolEntry>*/ toolsQueue = new LinkedList();
while (!toolGroupsQueue.isEmpty()) {
	// TODO with additional counter and hashmap here it's easy to add "unique method name" check here
	ToolGroup toolGroup = (ToolGroup) toolGroupsQueue.removeFirst();
%>

	/**
	 * @generated
	 */
	private PaletteContainer <%=toolGroup.getCreateMethodName()%>() {
<%if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) { %>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer")%>("<%=toolGroup.getTitle()%>");
<%} else if (toolGroup.isStack()) {%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteStack")%>("<%=toolGroup.getTitle()%>");
<%} else {%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup")%>("<%=toolGroup.getTitle()%>");
<%}
if (toolGroup.getDescription() != null) {%>
		paletteContainer.setDescription("<%=toolGroup.getDescription()%>");
<%}%>
<%for (Iterator itGroupItems = toolGroup.getEntries().iterator(); itGroupItems.hasNext(); ) {
	ToolGroupItem groupItem = (ToolGroupItem) itGroupItems.next();
	if (groupItem instanceof ToolEntry) {
		toolsQueue.add(groupItem);%>
		paletteContainer.add(<%=((ToolEntry) groupItem).getCreateMethodName()%>());
<%	} else if (groupItem instanceof ToolGroup) {
		toolGroupsQueue.addLast(groupItem);
	} else if (groupItem instanceof Separator) {%>
		paletteContainer.add(new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator")%>());
<%	} /*else - no more options possible, log warning? */%>
<%} /*for*/%>
		return paletteContainer;
	}
<%
}
final String importedElementTypesClassName = importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName());
final String importedPluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
while (!toolsQueue.isEmpty()) {
	ToolEntry toolEntry = (ToolEntry) toolsQueue.removeFirst();
	GenCommonBase firstGenElement = toolEntry.getElements().isEmpty() ? null : (GenCommonBase) toolEntry.getElements().get(0);
%>

	/**
	 * @generated
	 */
	private ToolEntry <%=toolEntry.getCreateMethodName()%>() {
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;
		<%if (toolEntry.getSmallIconPath() != null) {%>
		smallImage = <%=importedPluginClassName%>.findImageDescriptor("<%=toolEntry.getSmallIconPath()%>");
		<%} else if (firstGenElement != null) {%>
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=firstGenElement.getUniqueIdentifier()%>); 
		<%} else {%>
		smallImage = null;
		<%}%>
		<%if (toolEntry.getLargeIconPath() != null) {%>
		largeImage = <%=importedPluginClassName%>.findImageDescriptor("<%=toolEntry.getLargeIconPath()%>");
		<%} else {%>
		largeImage = smallImage;
		<%}%>
<%
if (toolEntry.getElements().isEmpty()) {%>
		ToolEntry result = new ToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage) {};
<%}
	else if (firstGenElement instanceof GenNode) {
%>
		final <%=importManager.getImportedName("java.util.List")%> elementTypes = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%		for (Iterator genNodesIterator = toolEntry.getGenNodes().iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();
%>
		elementTypes.add(<%=importedElementTypesClassName%>.<%=nextNode.getUniqueIdentifier()%>);
<%		}%>		
		ToolEntry result = new NodeToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, elementTypes);
<%}
	else if (firstGenElement instanceof GenLink) {
%>
		final <%=importManager.getImportedName("java.util.List")%> relationshipTypes = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%		for (Iterator genLinksIterator = toolEntry.getGenLinks().iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();
%>
		relationshipTypes.add(<%=importedElementTypesClassName%>.<%=nextLink.getUniqueIdentifier()%>);
<%		}%>		
		ToolEntry result = new LinkToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, relationshipTypes);
<%} /*else - has no more ideas what's there*/ %>

<%
// there's a problem with qualifieToolName - we should also respect different tools 
// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {%>
		result.setToolClass(<%=importManager.getImportedName(toolEntry.getQualifiedToolName())%>.class);
<%} /*tool class presence*/%>

<%if (!toolEntry.getProperties().isEmpty()) {
	for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
		Map.Entry entry = (Map.Entry) it.next();%>
		result.setToolProperty("<%=entry.getKey()%>", "<%=entry.getValue()%>");
<%	} /*properties iterator*/
} /*properties presence check*/ %>
		return result;
	}

<%} /*while toolsQueue*/ %>
	/**
	 * @generated
	 */
	private static class NodeToolEntry extends ToolEntry {

		/**
		 * @generated
		 */
		private final List elementTypes;

		/**
		 * @generated
		 */
		private NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {
			super(title, description, smallIcon, largeIcon);
			this.elementTypes = elementTypes;
		}

		/**
		 * @generated
		 */
		public Tool createTool() {
			Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool")%>(elementTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}

	/**
	 * @generated
	 */
	private static class LinkToolEntry extends ToolEntry {

		/**
		 * @generated
		 */
		private final List relationshipTypes;

		/**
		 * @generated
		 */
		private LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {
			super(title, description, smallIcon, largeIcon);
			this.relationshipTypes = relationshipTypes;
		}

		/**
		 * @generated
		 */
		public Tool createTool() {
			Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool")%>(relationshipTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
}
<%importManager.emitSortedImports();%>
