<%@ jet package="org.eclipse.gmf.codegen.templates.expressions" class="RegexpExpressionFactoryGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenExpressionInterpreter genInterpreter = (GenExpressionInterpreter) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = genInterpreter.getContainer().getEditorGen().getDiagram();
final String factoryClassName = genInterpreter.getClassName();
final String abstractExpressionClass = genInterpreter.getContainer().getAbstractExpressionQualifiedClassName();
final boolean isNegationRegexp = !GenLanguage.REGEXP_LITERAL.equals(genInterpreter.getLanguage());
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);
importManager.registerInnerClass("Expression");

importManager.addImport("java.util.Collections");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.regex.Matcher");
importManager.addImport("java.util.regex.Pattern");
importManager.addImport("java.util.regex.PatternSyntaxException");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.ecore.EClassifier");
importManager.addImport("org.eclipse.emf.ecore.EDataType");
importManager.addImport("org.eclipse.emf.ecore.util.EcoreUtil");
%>

/**
 * @generated 
 */
public class <%=factoryClassName%> {
	/**
	 * @generated 
	 */
	private <%=factoryClassName%>() {
	}

	/**
	 * @generated 
	 */
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body,
			EClassifier context, Map environment) {
		return new Expression(body, context, environment);
	}

	/**
	 * @generated 
	 */
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body,
			EClassifier context) {
		return getExpression(body, context, Collections.EMPTY_MAP);
	}

	/**
	 * @generated 
	 */
	private static class Expression extends <%=importManager.getImportedName(abstractExpressionClass)%> {
		/**
		 * @generated 
		 */
		private Pattern pattern;

		/**
		 * @generated 
		 */
		public Expression(String body, EClassifier context, Map environment) {
			super(body, context, environment);
			try {
				this.pattern = Pattern.compile(body);
			} catch (PatternSyntaxException e) {
				setStatus(IStatus.ERROR, e.getMessage(), e);
			}
		}

		/**
		 * @generated 
		 */
		protected Object doEvaluate(Object contextInstance, Map env) {
			if (pattern == null) {
				return null;
			}
			
			if(context() instanceof EDataType) {
				contextInstance = EcoreUtil.convertToString((EDataType)context(), contextInstance);
			}
			
			Matcher matcher = this.pattern.matcher(String.valueOf(contextInstance));
			return Boolean.valueOf(<%=isNegationRegexp ? "!" : ""%>matcher.matches());
		}
	}
}
<%importManager.emitSortedImports();%>
