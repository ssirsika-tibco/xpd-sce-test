
	/**
	 * @generated
	 */
	protected String getLabelTextHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).getText();
		} else {
			return ((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).getText();
		}
	}

	/**
	 * @generated
	 */
	protected void setLabelTextHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure, String text) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).setText(text);
		} else {
			((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).setText(text);
		}
	}

	/**
	 * @generated
	 */
	protected Image getLabelIconHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).getIcon();
		} else {
			return ((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).getIcon();
		}
	}

	/**
	 * @generated
	 */
	protected void setLabelIconHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure, Image icon) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).setIcon(icon);
		} else {
			((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).setIcon(icon);
		}
	}

<%
String labelSetterName = "setLabel"; // same assumption in NodeEditPart
String labelFigureClassName = "org.eclipse.draw2d.IFigure";
if (genLabel.getViewmap() instanceof ParentAssignedViewmap) {
	ParentAssignedViewmap viewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	if (viewmap.getSetterName() != null) {
		labelSetterName = viewmap.getSetterName();
	}
	if (viewmap.getFigureQualifiedClassName() != null) {
		labelFigureClassName = viewmap.getFigureQualifiedClassName();
	}
} // FIXME perhaps, there's no sense to have setLabel for any other viewmap than ParentAssigned?
%>
	/**
	 * @generated
	 */
	public void <%=labelSetterName%>(<%=importManager.getImportedName(labelFigureClassName)%> figure) {
		unregisterVisuals();
		setFigure(figure);
		defaultText = getLabelTextHelper(figure);
		registerVisuals();
		refreshVisuals();
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
		return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%> getChildBySemanticHint(String semanticHint) {
		return null;
	}

	/**
	 * @generated
	 */
	protected EObject getParserElement() {
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
		return element != null ? element : (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getModel();
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getLabelIcon() {
<%if (useElementIcon) {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> descriptor =
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemImageDescriptor(getParserElement());
		if (descriptor == null) {
			descriptor = <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor();
		}
		return descriptor.createImage();
<%} else {%>
		return null;
<%}%>
	}

	/**
	 * @generated
	 */
	protected String getLabelText() {
		String text = null;
		if (getParser() != null) {
			text = getParser().getPrintString(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(getParserElement()),
				getParserOptions().intValue());
		}
		if (text == null || text.length() == 0) {
			text = defaultText;
		}
		return text;
	}

	/**
	 * @generated
	 */
	public void setLabelText(String text) {
		setLabelTextHelper(getFigure(), text);
		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
		if (pdEditPolicy instanceof <%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) {
			((<%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) pdEditPolicy).refreshFeedback();
		}
	}

	/**
	 * @generated
	 */
	public String getEditText() {
		if (getParser() == null) {
			return ""; //$NON-NLS-1$
		}
		return getParser().getEditString(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(getParserElement()),
			getParserOptions().intValue());
	}

	/**
	 * @generated
	 */
	protected boolean isEditable() {
<%if (!readOnly) {%>
		return getEditText() != null;
<%} else {%>
		return false;
<%}%>
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator")%> getEditTextValidator() {
		return new <%=importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator")%>() {

			public String isValid(final Object value) {
				if (value instanceof String) {
					final <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = getParserElement();
					final <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser")%> parser = getParser();
					try {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus")%> valid =
							(<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus")%>) getEditingDomain().runExclusive(
								new <%=importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult")%>.Impl() {

							public void run() {
								setResult(parser.isValidEditString(
									new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(element), (String) value));
							}
						});
						return valid.getCode() == <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus")%>.EDITABLE ?
							null : valid.getMessage();
					} catch (InterruptedException ie) {
						ie.printStackTrace();
					}
				}

				// shouldn't get here
				return null;
			}
		};
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor")%> getCompletionProcessor() {
		if (getParser() == null) {
			return null;
		}
		return getParser().getCompletionProcessor(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(getParserElement()));
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions")%> getParserOptions() {
		return <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions")%>.NONE;
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser")%> getParser() {
		if (parser == null) {
			String parserHint =
<%if (designLabel) {%>
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint")%>.DESCRIPTION;
<%} else {%>
				((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getModel()).getType();
<%}%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter")%> hintAdapter =
				new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter")%>(getParserElement(), parserHint) {

				public Object getAdapter(Class adapter) {
					if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class.equals(adapter)) {
						return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genHost.getUniqueIdentifier()%>;
					}
					return super.getAdapter(adapter);
				}
			};
			parser = <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService")%>.getInstance().getParser(hintAdapter);
		}
		return parser;
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager")%> getManager() {
		if (manager == null) {
			setManager(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>(this,
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>.getTextCellEditorClass(this),
				<%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.getTextCellEditorLocator(this)));
		}
		return manager;
	}

	/**
	 * @generated
	 */
	protected void setManager(<%=importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager")%> manager) {
		this.manager = manager;
	}

	/**
	 * @generated
	 */
	protected void performDirectEdit() {
		getManager().show();
	}

	/**
	 * @generated
	 */
	protected void performDirectEdit(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> eventLocation) {
		if (getManager().getClass() == <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>.class) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) getManager()).show(eventLocation.getSWTPoint());
		}
	}

	/**
	 * @generated
	 */
	private void performDirectEdit(char initialCharacter) {
		if (getManager() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) getManager()).show(initialCharacter);
		} else {
			performDirectEdit();
		}
	}

	/**
	 * @generated
	 */
	protected void performDirectEditRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		final <%=importManager.getImportedName("org.eclipse.gef.Request")%> theRequest = request;
		try {
			getEditingDomain().runExclusive(new Runnable() {

				public void run() {
					if (isActive() && isEditable()) {
						if (theRequest.getExtendedData().get(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants")%>.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
							Character initialChar = (Character) theRequest.getExtendedData().get(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants")%>.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
							performDirectEdit(initialChar.charValue());
						} else if ((theRequest instanceof <%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) && (getEditText().equals(getLabelText()))) {
							<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> editRequest =
								(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) theRequest;
							performDirectEdit(editRequest.getLocation());
						} else {
							performDirectEdit();
						}
					}
				}
			});
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshLabel();
		refreshFont();
		refreshFontColor();
		refreshUnderline();
		refreshStrikeThrough();
<%if (needsRefreshBounds) {%>
		refreshBounds();
<%}%>
	}

	/**
	 * @generated
	 */
	protected void refreshLabel() {
		setLabelTextHelper(getFigure(), getLabelText());
		setLabelIconHelper(getFigure(), getLabelIcon());
		Object pdEditPolicy = getEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.PRIMARY_DRAG_ROLE);
		if (pdEditPolicy instanceof <%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) {
			((<%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) pdEditPolicy).refreshFeedback();
		}
	}

	/**
	 * @generated
	 */
	protected void refreshUnderline() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%> style =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getFontStyleOwnerView().getStyle(
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle());
		if (style != null && getFigure() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) getFigure()).setTextUnderline(style.isUnderline());
		}
	}

	/**
	 * @generated
	 */
	protected void refreshStrikeThrough() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%> style =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getFontStyleOwnerView().getStyle(
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle());
		if (style != null && getFigure() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
		}
	}

	/**
	 * @generated
	 */
	protected void refreshFont() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%> style =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getFontStyleOwnerView().getStyle(
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle());
		if (style != null) {
			<%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%> fontData = new <%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%>(
				style.getFontName(), style.getFontHeight(),
				(style.isBold() ? <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.BOLD : <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NORMAL) |
				(style.isItalic() ? <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.ITALIC : <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NORMAL));
			setFont(fontData);
		}
	}

	/**
	 * @generated
	 */
	protected void setFontColor(<%=importManager.getImportedName("org.eclipse.swt.graphics.Color")%> color) {
		getFigure().setForegroundColor(color);
	}

	/**
	 * @generated
	 */
	protected void addSemanticListeners() {
		if (getParser() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser")%>) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
			parserElements = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser")%>) getParser()).getSemanticElementsBeingParsed(element);
			for (int i = 0; i < parserElements.size(); i++) {
				addListenerFilter("SemanticModel" + i, this, (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) parserElements.get(i)); //$NON-NLS-1$
			}
		} else {
			super.addSemanticListeners();
		}
	}

	/**
	 * @generated
	 */
	protected void removeSemanticListeners() {
		if (parserElements != null) {
			for (int i = 0; i < parserElements.size(); i++) {
				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
			}
		} else {
			super.removeSemanticListeners();
		}
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.AccessibleEditPart")%> getAccessibleEditPart() {
		if (accessibleEP == null) {
			accessibleEP = new AccessibleGraphicalEditPart() {

				public void getName(<%=importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent")%> e) {
					e.result = getLabelTextHelper(getFigure());
				}
			};
		}
		return accessibleEP;
	}
	
	/**
	 * @generated
	 */
	 private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> getFontStyleOwnerView() {
<%
boolean fixedFont;
{ //namespace
Viewmap viewmap = genLabel.getViewmap();
StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
fixedFont = styleAttributes != null && styleAttributes.isFixedFont();
}
if (fixedFont) {
%>
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)getModel();
<%
} else {
%>
		return getPrimaryView();
<%
}
%>
	 }
	
