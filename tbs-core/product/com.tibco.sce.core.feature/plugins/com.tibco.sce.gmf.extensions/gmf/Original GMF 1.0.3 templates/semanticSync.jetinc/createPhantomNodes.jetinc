/**
 * @generated
 */
private <%=importManager.getImportedName("java.util.Collection")%> createPhantomNodes(<%=importManager.getImportedName("java.util.Collection")%> nodes) {
	if (nodes.isEmpty()) {
		return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
	}
	<%=importManager.getImportedName("java.util.List")%> descriptors = new <%=importManager.getImportedName("java.util.ArrayList")%>();
	for (<%=importManager.getImportedName("java.util.Iterator")%> elements = nodes.iterator(); elements.hasNext();) {
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>)elements.next();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest")%>.ViewDescriptor descriptor = getViewDescriptor(element);
		descriptors.add(descriptor);
	}
	<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = getDiagram();
	<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> diagramEditPart = getDiagramEditPart();
	
	<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest")%> request = getCreateViewRequest(descriptors);
	<%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> cmd = diagramEditPart.getCommand(request);
	if (cmd == null) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand")%> cc = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages")%>.AddCommand_Label);
		for (<%=importManager.getImportedName("java.util.Iterator")%> descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest")%>.ViewDescriptor descriptor = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest")%>.ViewDescriptor) descriptorsIterator.next();
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand")%> createCommand = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand")%>(((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%>) getHost()).getEditingDomain(), descriptor, diagram);
			cc.compose(createCommand);
		}
		cmd = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy")%>(cc);
	}	
	
	<%=importManager.getImportedName("java.util.List")%> adapters = <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
	if ( cmd != null && cmd.canExecute() ) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand")%>.makeMutable(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%>) diagramEditPart).getNotationView())).execute();
		executeCommand(cmd);
		adapters = (<%=importManager.getImportedName("java.util.List")%>) request.getNewObject();
	}
	diagramEditPart.refresh();
	return adapters;
}

/**
 * @generated
 */
private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getDiagramEditPart() {
	return (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) getHost().getViewer().getEditPartRegistry().get(getDiagram());
}