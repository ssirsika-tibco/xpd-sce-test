<%@ include file="class2PhantomsCollector.jetinc"%>
<%
List phantomLinks = new LinkedList();
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof FeatureModelFacet) {
		FeatureModelFacet nextModelFacet = (FeatureModelFacet) nextLink.getModelFacet();
		if (nextModelFacet.getMetaFeature().isContains()) {
			phantomLinks.add(nextLink);
		}
	}
}
	
if (genClass2Phantom.size() > 0 && phantomLinks.size() > 0) {
%>
	/**
	 * @generated
	 */
	protected void refreshSemantic() {
		<%=importManager.getImportedName("java.util.List")%> createdViews = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		createdViews.addAll(refreshSemanticChildren());
		createdViews.addAll(refreshPhantoms());
		makeViewsImmutable(createdViews);
	}
	
	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> refreshPhantoms() {
		<%=importManager.getImportedName("java.util.Collection")%> phantomNodes = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getHost().getModel()).getElement();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass = container.eClass();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = getDiagram();
<%	
	List genLinks = phantomLinks;
	for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
		boolean phantomsOnly = true;
%>
<%@ include file="collectFMFLinks_header.jetinc"%>
			phantomNodes.add(nextDestination);
<%@ include file="collectFMFLinks_footer.jetinc"%>
<%	}%>

<%@ include file="filterOutExistingPhantoms.jetinc"%>
		return createPhantomNodes(phantomNodes);
	}
	
<%@ include file="createPhantomNodes.jetinc" %>

<%@ include file="getDiagram.jetinc" %>
<%
}
%>