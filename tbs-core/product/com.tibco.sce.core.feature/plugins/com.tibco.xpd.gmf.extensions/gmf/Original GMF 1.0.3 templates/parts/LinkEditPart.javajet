<%@ jet package="org.eclipse.gmf.codegen.templates.parts" class="LinkEditPartGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenLink genLink = (GenLink) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLink.getDiagram();
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
if (genLink.getViewmap() instanceof InnerClassViewmap) {
importManager.registerInnerClass(((InnerClassViewmap) genLink.getViewmap()).getClassName());
}
%>
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genLink.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart")%> {
<%{
GenCommonBase genCommonBase = genLink;%>
<%@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	public <%=genLink.getEditPartClassName()%>(View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
<%if (genLink.getModelFacet() instanceof FeatureModelFacet) {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_ROLE, new <%=importManager.getImportedName(genDiagram.getReferenceConnectionEditPolicyQualifiedClassName())%>());
<%
} 
if (genLink.getModelFacet() == null) {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.COMPONENT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy")%>());
<%}%>
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName())%>()
<%if (genLink.getModelFacet() == null) {%>
		{
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getSemanticCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest")%> editRequest) {
				if (editRequest instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest")%> &&
						getHost() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart")%>) {
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy")%>(
						new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand")%>(
							editRequest.getEditingDomain(), ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart")%>) getHost()).getPrimaryView()));
				}
				return super.getSemanticCommand(editRequest);
			}

			public <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getCommand(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
				if (REQ_RECONNECT_SOURCE.equals(request.getType()) || REQ_RECONNECT_TARGET.equals(request.getType())) {
					return null;
				}
				return super.getCommand(request);
			}
		}
<%}%>
		);
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> createConnectionFigure() {<%
Viewmap viewmap = genLink.getViewmap();
if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassName = null;
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx";
	}
%>
		return new <%=importManager.getImportedName(figureQualifiedClassName)%>();
<%} // instanceof FigureViewmap
	else if (viewmap instanceof SnippetViewmap) {%>
		return <%=((SnippetViewmap) viewmap).getBody()%>;
<%} // instanceof SnippetViewmap 
	else if (viewmap instanceof InnerClassViewmap) {%>
 		return new <%=((InnerClassViewmap) viewmap).getClassName()%>();
<%}%>
	}

<%if (genLink.getViewmap() instanceof InnerClassViewmap) {%>
<%=((InnerClassViewmap) genLink.getViewmap()).getClassBody()%>
<%}%>
}
<%importManager.emitSortedImports();%>
