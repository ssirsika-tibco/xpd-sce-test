<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="null" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="null" id="null" name=""/>
      </appinfo>
      <documentation>
         This is library with common types used in deployment plugins.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
      </complexType>
   </element>

   <element name="configParameter">
      <complexType>
         <sequence>
            <element ref="parameterFacet" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="key" type="string" use="required">
            <annotation>
               <documentation>
                  identifier of the parameter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  name of the parameter.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="label" type="string">
            <annotation>
               <documentation>
                  label used for the control. It may contain. It my contain &amp; to mark hot key. It usually ends with colon.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  optional icon (not used currently)
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="parameterType" use="required">
            <annotation>
               <documentation>
                  the type of the parameter.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="string">
                  </enumeration>
                  <enumeration value="boolean">
                  </enumeration>
                  <enumeration value="integer">
                  </enumeration>
                  <enumeration value="password">
                  </enumeration>
                  <enumeration value="file">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="defaultValue" type="string">
            <annotation>
               <documentation>
                  the default value of the parameter.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="required" type="boolean" use="required">
            <annotation>
               <documentation>
                  if paramter is mandatory.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="automatic" type="boolean">
            <annotation>
               <documentation>
                  if the parameter is not automatic then it will not be rendered and user has to take care of storing and providing value for it. Default is &quot;true&quot;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultValueProvider" type="string">
            <annotation>
               <documentation>
                  Defines provider for default value of the parameter. Default value provider if set will be asked to provide default value.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":com.tibco.xpd.deploy.model.extension.DefaultValueProvider"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="parameters">
      <complexType>
         <sequence>
            <element ref="configParameter" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
      </complexType>
   </element>

   <element name="parameterFacet">
      <annotation>
         <documentation>
            Represent additional facets of the parameter (for example renderng hints).

Currently supported parameter facets for parameters of type file &quot;file&quot; are:
&lt;li&gt;
Key: FileBrowseType - determines number and type of picker buttons. Possible values are:  &quot;SYSTEM&quot;, &quot;WORKSPACE&quot;, &quot;BOTH&quot;. &quot;BOTH&quot; is default value if not specified.
&lt;/li&gt;
&lt;li&gt;
Key: FileBrowseObject - switches between file and directory picking. Possible values are: &quot;FILE&quot;, &quot;FOLDER&quot;. &quot;FILE&quot; is default value if not specified.
&lt;/li&gt;
&lt;li&gt;
Key: FileExtensions - Space separated list of file extensions used to filter files in picker. For example: &quot;xml xsl xsd&quot;. Default is &quot;&quot;.
&lt;/li&gt;
&lt;li&gt;
Key: FileWorkspaceRelativePath - determines if path picked by workspace picker will be relative (to workspace root): &quot;true&quot; value, or absolute &quot;false&quot; value. Default is &quot;true&quot;.
&lt;/li&gt;
&lt;li&gt;
Key: FileShowHidden - if set to &quot;true&quot; then workspace resources starting with &apos;.&apos; will be shown in the workspace picker. Default is &quot;false&quot; - &apos;.&apos; starting resources are hidden.
&lt;/li&gt;
&lt;li&gt;
Key: FileBrowseSystemText - option for setting text on the system picker button. If not provided then icon will be used (default).
&lt;/li&gt;
&lt;li&gt;
Key: FileBrowseSystemTooltip - option for setting tooltip on the system picker button. If not provided then externalized form of &quot;Browse System...&quot; will be used.&lt;/li&gt;
&lt;li&gt;
Key: FileBrowseWorkspaceText - option for setting text on the workspace picker button. If not provided then icon will
 be used (default).
 &lt;/li&gt;
&lt;li&gt;
Key: FileBrowseWorkspaceTooltip - option for setting tooltip on the workspace picker button. If not provided then externalized form of &quot;Browse Workspace...&quot; will be used.
&lt;/li&gt;
&lt;li&gt;
Key: FileValidateExistanceSeverity - option key for setting the severity of the problem when resource doesn&apos;t exist. Possible values are: &quot;ERROR&quot;, &quot;WARNING&quot;, &quot;IGNORE&quot;. Default value is: &quot;ERROR&quot;.
&lt;/li&gt;
&lt;li&gt;
Key: FileValidateParentExistanceSeverity - option key for setting the severity of the problem when resource doesn&apos;t exist. Possible values are: &quot;ERROR&quot;, &quot;WARNING&quot;, &quot;IGNORE&quot;. Default value is: &quot;IGNORE&quot;.
&lt;/li&gt;
&lt;/p&gt;
Currently supported parameter facets for parameters of type file &quot;string&quot; are:
&lt;li&gt;
Key: StringControlType - determines number and type of picker buttons. Possible values are:  &quot;TEXT&quot;, &quot;COMBO&quot;, &quot;TEXT&quot; is default value if not specified.
&lt;/li&gt;
&lt;li&gt;
Key: StringReadOnly - determines if text field can be edited. Possible values are:  &quot;true&quot;, &quot;false&quot;, &quot;false&quot; is default value if not specified.
&lt;/li&gt;
&lt;li&gt;
Key: StringValues - static list of values in a form of a string delimited by a delimiter string (default is &quot;\|&quot; (see &quot;StringValuesDelimiter&quot;)), empty list if not specified. (See also &quot;StringValuesProvider&quot; facet)
&lt;/li&gt;
&lt;li&gt;
Key: StringValuesDelimiter - sets the delimiter string to tokenize values of &quot;StringValues&quot; parameter (default is &quot;\|&quot; if not specified). The value of this parameter is a regular expression so it needs to be properly escaped if delimiter is (or contains) a special character(s).
&lt;/li&gt;
&lt;li&gt;
Key: StringValuesProvider - specifies dynamically list of values for the control. The value of this facet is a path in the form of pluginId/fulleyQualifiedClassName where the class extends com.tibco.xpd.deploy.ui.components.StringControlValuesProvider and can provide a list of dynamic strings. &quot;StringValues&quot; facet is ignored if this provider returns not null collection of strings.
&lt;/li&gt;
&lt;li&gt;
Key: StringAction - the action class rendered as a button on the right side of the field. The specified class must implement: com.tibco.xpd.deploy.ui.components.StringControlAction and have to be in a form of: pluginId/fullyQualifiedName.
&lt;/li&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="key" type="string" use="required">
            <annotation>
               <documentation>
                  key (identifier) of the parameter&apos;s facet.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  value of the parameter&apos;s facet.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiInfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
