/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.tibco.xpd.deploy.provider;

import com.tibco.xpd.deploy.util.DeployAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DeployItemProviderAdapterFactory extends DeployAdapterFactory
        implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static final String copyright = "Copyright (c) TIBCO Software Inc 2004, 2007. All rights reserved.";

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DeployItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerConfig} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerConfigItemProvider serverConfigItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerConfig}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerConfigAdapter() {
        if (serverConfigItemProvider == null) {
            serverConfigItemProvider = new ServerConfigItemProvider(this);
        }

        return serverConfigItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerTypeItemProvider serverTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerTypeAdapter() {
        if (serverTypeItemProvider == null) {
            serverTypeItemProvider = new ServerTypeItemProvider(this);
        }

        return serverTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerConfigInfo} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerConfigInfoItemProvider serverConfigInfoItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerConfigInfo}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerConfigInfoAdapter() {
        if (serverConfigInfoItemProvider == null) {
            serverConfigInfoItemProvider = new ServerConfigInfoItemProvider(
                    this);
        }

        return serverConfigInfoItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ConfigParameterInfo} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConfigParameterInfoItemProvider configParameterInfoItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ConfigParameterInfo}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConfigParameterInfoAdapter() {
        if (configParameterInfoItemProvider == null) {
            configParameterInfoItemProvider = new ConfigParameterInfoItemProvider(
                    this);
        }

        return configParameterInfoItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerModule} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerModuleItemProvider serverModuleItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerModule}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerModuleAdapter() {
        if (serverModuleItemProvider == null) {
            serverModuleItemProvider = new ServerModuleItemProvider(this);
        }

        return serverModuleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.Server} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerItemProvider serverItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.Server}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerAdapter() {
        if (serverItemProvider == null) {
            serverItemProvider = new ServerItemProvider(this);
        }

        return serverItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerContainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerContainerItemProvider serverContainerItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerContainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerContainerAdapter() {
        if (serverContainerItemProvider == null) {
            serverContainerItemProvider = new ServerContainerItemProvider(this);
        }

        return serverContainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ConfigParameter} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConfigParameterItemProvider configParameterItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ConfigParameter}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConfigParameterAdapter() {
        if (configParameterItemProvider == null) {
            configParameterItemProvider = new ConfigParameterItemProvider(this);
        }

        return configParameterItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.RepositoryType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RepositoryTypeItemProvider repositoryTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.RepositoryType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRepositoryTypeAdapter() {
        if (repositoryTypeItemProvider == null) {
            repositoryTypeItemProvider = new RepositoryTypeItemProvider(this);
        }

        return repositoryTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.Repository} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RepositoryItemProvider repositoryItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.Repository}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRepositoryAdapter() {
        if (repositoryItemProvider == null) {
            repositoryItemProvider = new RepositoryItemProvider(this);
        }

        return repositoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.RepositoryConfig} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RepositoryConfigItemProvider repositoryConfigItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.RepositoryConfig}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRepositoryConfigAdapter() {
        if (repositoryConfigItemProvider == null) {
            repositoryConfigItemProvider = new RepositoryConfigItemProvider(
                    this);
        }

        return repositoryConfigItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.Runtime} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RuntimeItemProvider runtimeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.Runtime}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRuntimeAdapter() {
        if (runtimeItemProvider == null) {
            runtimeItemProvider = new RuntimeItemProvider(this);
        }

        return runtimeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.RuntimeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RuntimeTypeItemProvider runtimeTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.RuntimeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRuntimeTypeAdapter() {
        if (runtimeTypeItemProvider == null) {
            runtimeTypeItemProvider = new RuntimeTypeItemProvider(this);
        }

        return runtimeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.RuntimeConfig} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RuntimeConfigItemProvider runtimeConfigItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.RuntimeConfig}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRuntimeConfigAdapter() {
        if (runtimeConfigItemProvider == null) {
            runtimeConfigItemProvider = new RuntimeConfigItemProvider(this);
        }

        return runtimeConfigItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ModuleContainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ModuleContainerItemProvider moduleContainerItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ModuleContainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createModuleContainerAdapter() {
        if (moduleContainerItemProvider == null) {
            moduleContainerItemProvider = new ModuleContainerItemProvider(this);
        }

        return moduleContainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerElementType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerElementTypeItemProvider serverElementTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerElementType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerElementTypeAdapter() {
        if (serverElementTypeItemProvider == null) {
            serverElementTypeItemProvider = new ServerElementTypeItemProvider(
                    this);
        }

        return serverElementTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerElementState} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerElementStateItemProvider serverElementStateItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerElementState}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerElementStateAdapter() {
        if (serverElementStateItemProvider == null) {
            serverElementStateItemProvider = new ServerElementStateItemProvider(
                    this);
        }

        return serverElementStateItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.WorkspaceModule} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected WorkspaceModuleItemProvider workspaceModuleItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.WorkspaceModule}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createWorkspaceModuleAdapter() {
        if (workspaceModuleItemProvider == null) {
            workspaceModuleItemProvider = new WorkspaceModuleItemProvider(this);
        }

        return workspaceModuleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerGroup} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerGroupItemProvider serverGroupItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerGroup}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerGroupAdapter() {
        if (serverGroupItemProvider == null) {
            serverGroupItemProvider = new ServerGroupItemProvider(this);
        }

        return serverGroupItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ServerGroupType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ServerGroupTypeItemProvider serverGroupTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ServerGroupType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createServerGroupTypeAdapter() {
        if (serverGroupTypeItemProvider == null) {
            serverGroupTypeItemProvider = new ServerGroupTypeItemProvider(this);
        }

        return serverGroupTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.deploy.ParameterFacet} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParameterFacetItemProvider parameterFacetItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.deploy.ParameterFacet}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createParameterFacetAdapter() {
        if (parameterFacetItemProvider == null) {
            parameterFacetItemProvider = new ParameterFacetItemProvider(this);
        }

        return parameterFacetItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory
                .getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(
            ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class)
                    || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (serverConfigItemProvider != null)
            serverConfigItemProvider.dispose();
        if (configParameterItemProvider != null)
            configParameterItemProvider.dispose();
        if (serverTypeItemProvider != null)
            serverTypeItemProvider.dispose();
        if (serverConfigInfoItemProvider != null)
            serverConfigInfoItemProvider.dispose();
        if (configParameterInfoItemProvider != null)
            configParameterInfoItemProvider.dispose();
        if (serverModuleItemProvider != null)
            serverModuleItemProvider.dispose();
        if (serverItemProvider != null)
            serverItemProvider.dispose();
        if (serverContainerItemProvider != null)
            serverContainerItemProvider.dispose();
        if (repositoryTypeItemProvider != null)
            repositoryTypeItemProvider.dispose();
        if (repositoryItemProvider != null)
            repositoryItemProvider.dispose();
        if (repositoryConfigItemProvider != null)
            repositoryConfigItemProvider.dispose();
        if (runtimeItemProvider != null)
            runtimeItemProvider.dispose();
        if (runtimeTypeItemProvider != null)
            runtimeTypeItemProvider.dispose();
        if (runtimeConfigItemProvider != null)
            runtimeConfigItemProvider.dispose();
        if (moduleContainerItemProvider != null)
            moduleContainerItemProvider.dispose();
        if (serverElementTypeItemProvider != null)
            serverElementTypeItemProvider.dispose();
        if (serverElementStateItemProvider != null)
            serverElementStateItemProvider.dispose();
        if (workspaceModuleItemProvider != null)
            workspaceModuleItemProvider.dispose();
        if (serverGroupItemProvider != null)
            serverGroupItemProvider.dispose();
        if (serverGroupTypeItemProvider != null)
            serverGroupTypeItemProvider.dispose();
        if (parameterFacetItemProvider != null)
            parameterFacetItemProvider.dispose();
    }

}
