<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ModelingAssistantProviderGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.dialogs.ElementListSelectionDialog;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getModelingAssistantProviderClassName()%> extends ModelingAssistantProvider {

	/**
	 * @generated
	 */
	public List getTypesForPopupBar(IAdaptable host) {
		IGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
<%
for (Iterator contents = genDiagram.getAllContainers().iterator(); contents.hasNext(); ) {
	GenContainerBase genContainer = (GenContainerBase) contents.next();
	if (genContainer instanceof GenCompartment && ((GenCompartment) genContainer).isListLayout()) {
		continue;
	}
	List children = new ArrayList(genContainer.getContainedNodes());
	if (genContainer instanceof GenNode) {
		for (Iterator compartments = ((GenNode) genContainer).getCompartments().iterator(); compartments.hasNext(); ) {
			GenCompartment compartment = (GenCompartment) compartments.next();
			if (compartment.isListLayout()) {
				children.addAll(compartment.getContainedNodes());
			}
		}
	}
	if (!children.isEmpty()) {
%>
		if (editPart instanceof <%=importManager.getImportedName(genContainer.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
			for (int i = 0; i < children.size(); i++) {
				String id = ((GenNode) children.get(i)).getUniqueIdentifier();
%>
			types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=id%>);
<%			}%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}
<%
Map outgoingLinks = new LinkedHashMap(); // source -> links going from the source
Map incomingLinks = new LinkedHashMap(); // target -> links coming to the target
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();
	for (Iterator sources = genLink.getSources().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
		Collection value = (Collection) outgoingLinks.get(source);
		if (value == null) {
			value = new LinkedHashSet();
			outgoingLinks.put(source, value);
		}
		value.add(genLink);
	}
	for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();
		Collection value = (Collection) incomingLinks.get(target);
		if (value == null) {
			value = new LinkedHashSet();
			incomingLinks.put(target, value);
		}
		value.add(genLink);
	}
}
%>

	/**
	 * @generated
	 */
	public List getRelTypesOnSource(IAdaptable source) {
<%if (!outgoingLinks.isEmpty()) {%>
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
%>
		if (sourceEditPart instanceof <%=importManager.getImportedName(source.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
%>
			types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
<%		}%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getRelTypesOnTarget(IAdaptable target) {
<%if (!incomingLinks.isEmpty()) {%>
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator targets = incomingLinks.keySet().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();
%>
		if (targetEditPart instanceof <%=importManager.getImportedName(target.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) incomingLinks.get(target)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
%>
			types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
<%		}%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {
<%if (!outgoingLinks.isEmpty()) {%>
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
%>
		if (sourceEditPart instanceof <%=importManager.getImportedName(source.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
				GenCommonBase target = (GenCommonBase) targets.next();
%>
			if (targetEditPart instanceof <%=importManager.getImportedName(target.getEditPartQualifiedClassName())%>) {
				types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
			}
<%
			}
		}
%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getTypesForSource(IAdaptable target, IElementType relationshipType) {
<%if (!incomingLinks.isEmpty()) {%>
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator targets = incomingLinks.keySet().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();
%>
		if (targetEditPart instanceof <%=importManager.getImportedName(target.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) incomingLinks.get(target)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator sources = genLink.getSources().iterator(); sources.hasNext(); ) {
				GenCommonBase source = (GenCommonBase) sources.next();
%>
			if (relationshipType == <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>) {
				types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=source.getUniqueIdentifier()%>);
			}
<%
			}
		}
%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getTypesForTarget(IAdaptable source, IElementType relationshipType) {
<%if (!outgoingLinks.isEmpty()) {%>
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
%>
		if (sourceEditPart instanceof <%=importManager.getImportedName(source.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
				GenCommonBase target = (GenCommonBase) targets.next();
%>
			if (relationshipType == <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>) {
				types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=target.getUniqueIdentifier()%>);
			}
<%
			}
		}
%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public EObject selectExistingElementForSource(IAdaptable target, IElementType relationshipType) {
		return selectExistingElement(target, getTypesForSource(target, relationshipType));
	}

	/**
	 * @generated
	 */
	public EObject selectExistingElementForTarget(IAdaptable source, IElementType relationshipType) {
		return selectExistingElement(source, getTypesForTarget(source, relationshipType));
	}

	/**
	 * @generated
	 */
	protected EObject selectExistingElement(IAdaptable host, Collection types) {
		if (types.isEmpty()) {
			return null;
		}
		IGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
		if (editPart == null) {
			return null;
		}
		Diagram diagram = (Diagram) editPart.getRoot().getContents().getModel();
		Collection elements = new HashSet();
		for (Iterator it = diagram.getElement().eAllContents(); it.hasNext();) {
			EObject element = (EObject) it.next();
			if (isApplicableElement(element, types)) {
				elements.add(element);
			}
		}
		if (elements.isEmpty()) {
			return null;
		}
		return selectElement((EObject[]) elements.toArray(new EObject[elements.size()]));
	}

	/**
	 * @generated
	 */
	protected boolean isApplicableElement(EObject element, Collection types) {
		IElementType type = ElementTypeRegistry.getInstance().getElementType(element);
		return types.contains(type);
	}

	/**
	 * @generated
	 */
	protected EObject selectElement(EObject[] elements) {
		Shell shell = Display.getCurrent().getActiveShell();
		ILabelProvider labelProvider = new AdapterFactoryLabelProvider(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		ElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, labelProvider);
		dialog.setMessage("Available domain model elements:");
		dialog.setTitle("Select domain model element");
		dialog.setMultipleSelection(false);
		dialog.setElements(elements);
		EObject selected = null;
		if (dialog.open() == Window.OK) {
			selected = (EObject) dialog.getFirstResult();
		}
		return selected;
	}
}
<%importManager.emitSortedImports();%>
