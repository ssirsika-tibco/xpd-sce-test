<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ValidationProviderGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.internal.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenDiagram genDiagram = (GenDiagram)((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
final GenAuditContainer audits = genDiagram.getEditorGen().getAudits();
final boolean hasNotationModelAudit = audits != null && audits.hasDiagramElementRule();
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
final java.util.List innerClasses = new java.util.ArrayList();
final String __javaOperationContainer = "JavaAudits";
if(audits != null) {
	innerClasses.add(__javaOperationContainer);
	innerClasses.addAll(audits.getAllRequiredConstraintAdaptersLocalClassNames());
	innerClasses.addAll(audits.getAllContextSelectorsLocalClassNames());
}
innerClasses.add("CtxSwitchStrategy");
innerClasses.add("ValidateAction");
for(java.util.Iterator it = innerClasses.iterator(); it.hasNext();) importManager.registerInnerClass((String)it.next()); 

importManager.markImportLocation(stringBuffer);
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.HashSet");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");
importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.Arrays");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.Set");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.resources.IMarker");
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.core.runtime.CoreException");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.common.util.Diagnostic");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.util.Diagnostician");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.emf.transaction.util.TransactionUtil");

importManager.addImport("org.eclipse.emf.validation.model.EvaluationMode");
importManager.addImport("org.eclipse.emf.validation.model.IConstraintStatus");
importManager.addImport("org.eclipse.emf.validation.service.IBatchValidator");
importManager.addImport("org.eclipse.emf.validation.service.ModelValidationService");
importManager.addImport("org.eclipse.emf.workspace.util.WorkspaceSynchronizer");
importManager.addImport("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor");
importManager.addImport("org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.jface.action.Action");
importManager.addImport("org.eclipse.jface.action.IAction");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
%>

/**
 * @generated
 */
public class <%=genDiagram.getValidationProviderClassName()%> extends AbstractContributionItemProvider {
	/**
	 * @generated
	 */
	private static boolean constraintsActive = false;	
	
	/**
	 * @generated
	 */
	public static boolean shouldConstraintsBePrivate() {
		return false;
	}
	
	/**
	 * @generated
	 */
	protected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {
		if (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {
			return new ValidateAction(partDescriptor);
		}
		return super.createAction(actionId, partDescriptor);
	}
	
	/**
	 * @generated
	 */
	public static class ValidateAction extends Action {
		/**
		 * @generated
		 */
		public static final String MARKER_TYPE = <%=pluginActivatorClass%>.ID + ".<%=genDiagram.getValidationDiagnosticMarkerType()%>"; //$NON-NLS-1$
		/**
		 * @generated
		 */		
		public static final String VALIDATE_ACTION_KEY = "validateAction"; //$NON-NLS-1$
		/**
		 * @generated
		 */
		private IWorkbenchPartDescriptor workbenchPartDescriptor;
		/**
		 * @generated
		 */
		public ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {
			setId(VALIDATE_ACTION_KEY);
			setText("Validate");
			this.workbenchPartDescriptor = workbenchPartDescriptor;
		}
		/**
		 * @generated
		 */
		public void run() {
			IWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();
			if(workbenchPart instanceof IDiagramWorkbenchPart) {
				final IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;
				try {
					new <%=importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation")%>(
						new <%=importManager.getImportedName("org.eclipse.jface.operation.IRunnableWithProgress")%>() {
							public void run(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor) throws InterruptedException, <%=importManager.getImportedName("java.lang.reflect.InvocationTargetException")%> {
								runValidation(part.getDiagram());
							}
						}
					).run(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>());			
				} catch (Exception e) {
					<%=pluginActivatorClass%>.getInstance().logError("Validation action failed", e); //$NON-NLS-1$
				}
			}
		}

		/**
		 * @generated
		 */
		public static void runValidation(View view) {
			final View target = view;
			Runnable task = new Runnable() {
				public void run() {
					try {
						constraintsActive = true;
						validate(target);
					} finally {
						constraintsActive = false;
					}
				}
			};
			TransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(target);
			if(txDomain != null) {
				try {
					txDomain.runExclusive(task);
				} catch (Exception e) {
					<%=pluginActivatorClass%>.getInstance().logError("Validation action failed", e); //$NON-NLS-1$
				}
			} else {
				task.run();
			}
		}

		/**
		 * @generated
		 */
		private static Diagnostic runEMFValidator(View target) {
			if(target.isSetElement() && target.getElement() != null) {
				return new Diagnostician() {
					public String getObjectLabel(EObject eObject) {
						return EMFCoreUtil.getQualifiedName(eObject, true);
					}
				}.validate(target.getElement());
			}
			return Diagnostic.OK_INSTANCE;
		}
	
		/**
		 * @generated
		 */
		private static void validate(View target) {
			IFile diagramFile = (target.eResource() != null) ? WorkspaceSynchronizer.getFile(target.eResource()) : null;
			try {
				if(diagramFile != null) diagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);
			} catch (CoreException e) {
				<%=pluginActivatorClass%>.getInstance().logError(null, e);
			}
			Diagnostic diagnostic = runEMFValidator(target);
			
			IBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);
			validator.setIncludeLiveConstraints(true);
			IStatus status = <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
			if(target.isSetElement() && target.getElement() != null) {
				status = validator.validate(target.getElement());
			}
			List allStatuses = new ArrayList();			
			allStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));
<%if(hasNotationModelAudit) {%>
			validator.setTraversalStrategy(getNotationTraversalStrategy(validator));
			status = validator.validate(target);
			allStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));
<%} // end of diagram element validation %>

			HashSet targets = new HashSet();
			for (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {
				targets.add(getDiagnosticTarget((Diagnostic)it.next()));
			}			
			
			for (Iterator it = allStatuses.iterator(); it.hasNext();) {			
				Object nextStatus = it.next();
				if(nextStatus instanceof IConstraintStatus) {
					targets.add(((IConstraintStatus)nextStatus).getTarget());
				}
			}
			
			Map viewMap = buildElement2ViewMap(target, targets);
			for (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {
				Diagnostic nextDiagnostic = (Diagnostic) it.next();
				List data = nextDiagnostic.getData();
				if (!data.isEmpty() && data.get(0) instanceof EObject) {
					EObject element = (EObject)data.get(0);
					View view = findTargetView(element, viewMap);
					if(diagramFile != null) addMarker(diagramFile, view != null ? view : target, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));
				}
			}

			for (Iterator it = allStatuses.iterator(); it.hasNext();) {
				Object nextStatusObj = it.next();
				if(nextStatusObj instanceof IConstraintStatus) {
					IConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;
					View view = findTargetView(nextStatus.getTarget(), viewMap);
					if(diagramFile != null) addMarker(diagramFile, view != null ? view : target, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());
				}
			}
		}
		/**
		 * @generated
		 */		
		private static View findTargetView(EObject targetElement, Map viewMap) {
			if(targetElement instanceof View) {
				return (View)targetElement;
			}		
			for(EObject container = targetElement; container != null; container = container.eContainer()) {
				if(viewMap.containsKey(container)) return (View)viewMap.get(container); 
			}
			return null;
		}		
		/**
		 * @generated
		 */
		private static Map buildElement2ViewMap(View view, Set targets) {
			HashMap map = new HashMap();
			getElement2ViewMap(view, map, targets);
			if(!targets.isEmpty()) {
				Set path = new HashSet();
				for (Iterator it = targets.iterator(); it.hasNext();) {
					EObject nextNotMapped = (EObject) it.next();
					for (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {
						if(!map.containsKey(container)) { 
							path.add(container);
						} else break;
					}
				}
				getElement2ViewMap(view, map, path);
			}
			return map;
		}
		/**
		 * @generated
		 */
		private static void getElement2ViewMap(View view, Map map, Set targets) {
			if (!map.containsKey(view.getElement()) && targets.remove(view.getElement())) {
				map.put(view.getElement(), view);
			}
			for (Iterator it = view.getChildren().iterator(); it.hasNext();) {
				getElement2ViewMap((View) it.next(), map, targets);
			}			
			if (view instanceof Diagram) {
				for (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {
					getElement2ViewMap((View) it.next(), map, targets);
				}
			}
		}
		/**
		 * @generated
		 */
		private static void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {
			try {
				IMarker marker = file.createMarker(MARKER_TYPE);
				marker.setAttribute(IMarker.MESSAGE, message);
				marker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));
				marker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));
				int markerSeverity = IMarker.SEVERITY_INFO;
				if(statusSeverity == IStatus.WARNING) {
					markerSeverity = IMarker.SEVERITY_WARNING;    						
				} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {
					markerSeverity = IMarker.SEVERITY_ERROR;
				}
				marker.setAttribute(IMarker.SEVERITY, markerSeverity);				
			} catch (CoreException e) {
				<%=pluginActivatorClass%>.getInstance().logError(null, e);
			}
		}
				
		/**
		 * @generated
		 */		
		private static EObject getDiagnosticTarget(Diagnostic diagnostic) {
			if(!diagnostic.getData().isEmpty()) {
				Object target = diagnostic.getData().get(0);
				return target instanceof EObject ? (EObject)target : null;
			}
			return null;
		}
		/**
		 * @generated
		 */
		private static int diagnosticToStatusSeverity(int diagnosticSeverity) {
			if(diagnosticSeverity == Diagnostic.OK) {
				return IStatus.OK;    						
			} else if(diagnosticSeverity == Diagnostic.INFO) {
				return IStatus.INFO;
			} else if(diagnosticSeverity == Diagnostic.WARNING) {
				return IStatus.WARNING; 
			} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {
				return IStatus.ERROR; 
			}
			return IStatus.INFO;
		}
	}	
	
	/**
	* @generated
	*/
	static boolean isInDefaultEditorContext(Object object) {
		if(shouldConstraintsBePrivate() && !constraintsActive) {
			return false;
		}
		if (object instanceof View) {
			return constraintsActive && <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID((View)object));
		}
		return true;
	}	
<%
boolean usesNotationContextSwitch = false;
java.util.Map ctx2Rules = (audits != null) ? audits.getAllRulesToTargetContextMap() : new java.util.HashMap();
java.util.List allAudits = (audits != null) ? audits.getAllAuditRules() : java.util.Collections.EMPTY_LIST;
java.util.Map view2SelectorMap = new java.util.IdentityHashMap();
for(java.util.Iterator it = allAudits.iterator(); it.hasNext();) {
	GenAuditRule audit = (GenAuditRule)it.next();
	String contextID = (audit.getTarget() != null) ? audit.getTarget().getClientContextID() : null;
	if(contextID == null || null == ctx2Rules.remove(contextID)) continue;
	String selectorClassName = audit.getContextSelectorLocalClassName();
%>
	/**
	* @generated
	*/
	public static class <%=selectorClassName%> implements <%=importManager.getImportedName("org.eclipse.emf.validation.model.IClientSelector")%> {
<%
	if(audit.getTarget() instanceof GenDiagramElementTarget) {
		usesNotationContextSwitch = true;
		GenDiagramElementTarget	diagramElement = (GenDiagramElementTarget)audit.getTarget();
		for(java.util.Iterator diagramElementIt = diagramElement.getElement().iterator(); diagramElementIt.hasNext();) {
			GenCommonBase nextElement = (GenCommonBase) diagramElementIt.next();
			view2SelectorMap.put(nextElement, selectorClassName);
		}
%>
		/**
		* @generated
		*/
		public boolean selects(Object object) {		
			if(isInDefaultEditorContext(object) && object instanceof View) {
				String id = ((View) object).getType();
				return id != null && semanticCtxIdMap.get(id) == <%=selectorClassName%>.class;
			}
			return false;
		}
	}
<%	} else {%>
		/**
		* @generated
		*/
		public boolean selects(Object object) {
			return isInDefaultEditorContext(object);	
		}	
	}		
<%
	} 
} // end of audits iteration
		
if(usesNotationContextSwitch) {
%>

	/**
	* @generated
	*/
	static final Map semanticCtxIdMap = new HashMap();
	/**
	* @generated
	*/
	static {
<%
	for(java.util.Iterator it = view2SelectorMap.keySet().iterator(); it.hasNext();) {
		GenCommonBase nextView = (GenCommonBase)it.next();
%>
		semanticCtxIdMap.put(String.valueOf(<%=importManager.getImportedName(nextView.getEditPartQualifiedClassName()) + ".VISUAL_ID"%>), <%=view2SelectorMap.get(nextView)%>.class); //$NON-NLS-1$
<%	} // end of view ID iteration %>
	}
<%
} // end of context map generation //usesNotationContextSwitch 
%>

<%if(hasNotationModelAudit) {%>
	/**
	* @generated
	*/
	static <%=importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy")%> getNotationTraversalStrategy(IBatchValidator validator) {
<%	if(usesNotationContextSwitch) {%>	
		return new CtxSwitchStrategy(validator);
<%} else {%>			
		return validator.getDefaultTraversalStrategy();
<%	} // end of usesNotationContextSwitch %>
	}
<%} // end of hasNotationModelAudit			

if(usesNotationContextSwitch) {%>
	/**
	 * @generated
	 */
	private static class CtxSwitchStrategy implements <%=importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy")%> {
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy")%> defaultStrategy;
		/**
		 * @generated
		 */
		private String currentSemanticCtxId;
		/**
		 * @generated
		 */
		private boolean ctxChanged = true;
		/**
		 * @generated
		 */
		private EObject currentTarget;	
		/**
		 * @generated
		 */
		private EObject preFetchedNextTarget;		
	
		/**
		 * @generated
		 */
		CtxSwitchStrategy(IBatchValidator validator) {
			this.defaultStrategy = validator.getDefaultTraversalStrategy();
		}
		
		/**
		 * @generated
		 */
		public void elementValidated(EObject element, IStatus status) {
			defaultStrategy.elementValidated(element, status);
		}

		/**
		 * @generated
		 */
		public boolean hasNext() {
			return defaultStrategy.hasNext();
		}

		/**
		 * @generated
		 */
		public boolean isClientContextChanged() {
			if(preFetchedNextTarget == null) {
				preFetchedNextTarget = next();
				prepareNextClientContext(preFetchedNextTarget);				
			}			  			
			return ctxChanged;
		}

		/**
		 * @generated
		 */
		public EObject next() {
			EObject nextTarget = preFetchedNextTarget;
			if(nextTarget == null) {
				nextTarget = defaultStrategy.next();
			}
			this.preFetchedNextTarget = null;
			return this.currentTarget = nextTarget;
		}

		/**
		 * @generated
		 */
		public void startTraversal(<%=importManager.getImportedName("java.util.Collection")%> traversalRoots,
				<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor) {
			defaultStrategy.startTraversal(traversalRoots, monitor);
		}
		
		/**
		 * @generated
		 */
		private void prepareNextClientContext(EObject nextTarget) { 
			if (nextTarget != null && currentTarget != null) {
				if (nextTarget instanceof View) {
					String id = ((View) nextTarget).getType();
					String nextSemanticId = id != null
							&& semanticCtxIdMap.containsKey(id) ? id : null;
					if ((currentSemanticCtxId != null && !currentSemanticCtxId
							.equals(nextSemanticId))
							|| (nextSemanticId != null && !nextSemanticId
									.equals(currentSemanticCtxId))) {
						this.ctxChanged = true;
					}
					currentSemanticCtxId = nextSemanticId;
				} else {
					// context of domain model
					this.ctxChanged = currentSemanticCtxId != null;
					currentSemanticCtxId = null;
				}
			} else {
				this.ctxChanged = false;
			}
		}		
	}// CtxSwitchStrategy
<%} // end of usesNotationContextSwitch

final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final java.util.Map __exprEnvVariables = java.util.Collections.EMPTY_MAP;
final String __outEnvVarName = ""; // no env to setup //$NON-NLS-1$ 
for(java.util.Iterator it = allAudits.iterator(); it.hasNext();) {
	GenAuditRule nextAudit = (GenAuditRule)it.next();
	if(nextAudit.requiresConstraintAdapter() && nextAudit.getRule() != null && nextAudit.getTarget() != null && nextAudit.getTarget().getContext() != null) {
		GenClassifier __genExprContext = nextAudit.getTarget().getContext();		 
		ValueExpression __genValueExpression = nextAudit.getRule();
		String importedExpressionBase = (expressionProviders != null) ? importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()) : "null"; //$NON-NLS-1$
%>
	/**
	 * @generated
	 */
	public static class <%=nextAudit.getConstraintAdapterLocalClassName()%> extends <%=importManager.getImportedName("org.eclipse.emf.validation.AbstractModelConstraint")%> {
		/**
		 * @generated
		 */
		private <%=importedExpressionBase%> expression;
		/**
		 * @generated
		 */
		public <%=nextAudit.getConstraintAdapterLocalClassName()%>() {
			expression = <%@ include file="../expressions/getExpression.jetinc"%>;		
		}		
		/**
		 * @generated
		 */
		public IStatus validate(<%=importManager.getImportedName("org.eclipse.emf.validation.IValidationContext")%> ctx) {
			Object evalCtx = ctx.getTarget();
<%		if(nextAudit.getTarget() instanceof GenDomainAttributeTarget) {
			GenDomainAttributeTarget attrTarget = (GenDomainAttributeTarget) nextAudit.getTarget();
			if(attrTarget.getAttribute() != null) {
				String fGetter = (attrTarget.getAttribute() != null) ? importManager.getImportedName(attrTarget.getAttribute().getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + attrTarget.getAttribute().getFeatureAccessorName() : ""; //$NON-NLS-1$ //$NON-NLS-2$
%>
			if(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(<%=fGetter%>());
			if(evalCtx == null) {
<%				if(attrTarget.isNullAsError()) { %>
				return ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });
<%				} else {%>
				return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
<%				} %>
			}			
<%			}
		} else if(nextAudit.getTarget() instanceof GenAuditedMetricTarget) {
			GenAuditedMetricTarget metricTarget = (GenAuditedMetricTarget)nextAudit.getTarget();
			String metricKey = (metricTarget.getMetric() != null) ? metricTarget.getMetric().getKey() : "";
			String metricProviderClassName = importManager.getImportedName(genDiagram.getMetricProviderQualifiedClassName());%>			
			evalCtx = <%=metricProviderClassName%>.calculateMetric(<%=Conversions.toStringLiteral(metricKey)%>, evalCtx);
<%
		}
%>		
			Object result = expression.evaluate(evalCtx);
			if(result instanceof Boolean && ((Boolean)result).booleanValue()) {
				return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
			}
			return ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); 
		}
	}
<%
	}
} /*end of Adapters iteration*/

final java.util.List javaExpressions = (audits != null) ? audits.getAllJavaLangAudits() : java.util.Collections.EMPTY_LIST;
if(!javaExpressions.isEmpty()) {
%>
/**
 * @generated
 */
static class <%=__javaOperationContainer%> {
<%
	for (java.util.Iterator it = javaExpressions.iterator(); it.hasNext();) {
		GenAuditRule nextJavaRule = (GenAuditRule) it.next();
		GenClassifier __genExprContext = nextJavaRule.getTarget().getContext();		
		ValueExpression __genValueExpression = nextJavaRule.getRule();
		String __genExprResultType = "java.lang.Boolean"; //$NON-NLS-1$
%>
<%@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
	}
%>
} //<%=__javaOperationContainer%>
<%
} /* end of Java expression methods */
%>
} //<%=genDiagram.getValidationProviderClassName()%>
<%importManager.emitSortedImports();%>
