/**
 *@generated
 */
private void storeLinks(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram) {
	<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass = container.eClass();
	storeFeatureModelFacetLinks(container, containerMetaclass, diagram);
	storeTypeModelFacetLinks(container, containerMetaclass);
}
	
/**
 * @generated
 */
private void storeTypeModelFacetLinks(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass) {	
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
%>		
	if (<%=importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childMetaFeature.getGenClass().getClassifierAccessorName()%>().isSuperTypeOf(containerMetaclass)) {
<%		if (childMetaFeature.isListType()) {%>		
		for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("container", childMetaFeature, true, importManager)%>.iterator(); values.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) values.next());
<%		} else {%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%=getFeatureValueGetter("container", childMetaFeature, true, importManager)%>;
<%		}%>
		int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getLinkWithClassVisualID(nextValue);
		if (<%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID == linkVID) {
			Object structuralFeatureResult = <%=getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager)%>;
			if (structuralFeatureResult instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> dst = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) structuralFeatureResult;
<%		if (typeLinkModelFacet.getSourceMetaFeature() != null) {%>
				structuralFeatureResult = <%=getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager)%>;
				if (structuralFeatureResult instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> src = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) structuralFeatureResult;
<%		} else {%>
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> src = container;
<%		}%>
				myLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));
<%		if (typeLinkModelFacet.getSourceMetaFeature() != null) {%>
				}
<%		}%>
			}
		}
<%
		if (childMetaFeature.isListType()) {
%>
		}
<%
		}
%>
	}
<%
	}
}
%>
}

/**
 *@generated
 */
private void storeFeatureModelFacetLinks(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram) {
<%
for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = true;
%>
<%@ include file="collectFMFLinks_header.jetinc"%>
		myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>, <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID));
<%	if (createPhantoms) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextDestination, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
		myEObject2NodeMap.put(nextDestination, nextNode);
		create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextDestination);
<%	}%>
<%@ include file="collectFMFLinks_footer.jetinc"%>
<%
}

for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = false;
%>
<%@ include file="collectFMFLinks_header.jetinc"%>
		myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>, <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID));
<%@ include file="collectFMFLinks_footer.jetinc"%>
<%}%>
}