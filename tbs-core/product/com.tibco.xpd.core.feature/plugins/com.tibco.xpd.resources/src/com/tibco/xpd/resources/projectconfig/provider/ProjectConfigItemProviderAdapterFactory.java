/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.tibco.xpd.resources.projectconfig.provider;

import com.tibco.xpd.resources.internal.Messages;
import com.tibco.xpd.resources.projectconfig.util.ProjectConfigAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProjectConfigItemProviderAdapterFactory extends
        ProjectConfigAdapterFactory implements ComposeableAdapterFactory,
        IChangeNotifier, IDisposable {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static final String copyright = "Copyright (c) TIBCO Software Inc 2004, 2009. All rights reserved."; //$NON-NLS-1$

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ProjectConfigItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.ProjectConfig} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ProjectConfigItemProvider projectConfigItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.ProjectConfig}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createProjectConfigAdapter() {
        if (projectConfigItemProvider == null) {
            projectConfigItemProvider = new ProjectConfigItemProvider(this);
        }

        return projectConfigItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.SpecialFolder} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SpecialFolderItemProvider specialFolderItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.SpecialFolder}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSpecialFolderAdapter() {
        if (specialFolderItemProvider == null) {
            specialFolderItemProvider = new SpecialFolderItemProvider(this);
        }

        return specialFolderItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.SpecialFolders} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SpecialFoldersItemProvider specialFoldersItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.SpecialFolders}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSpecialFoldersAdapter() {
        if (specialFoldersItemProvider == null) {
            specialFoldersItemProvider = new SpecialFoldersItemProvider(this);
        }

        return specialFoldersItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.ProjectDetails} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ProjectDetailsItemProvider projectDetailsItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.ProjectDetails}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createProjectDetailsAdapter() {
        if (projectDetailsItemProvider == null) {
            projectDetailsItemProvider = new ProjectDetailsItemProvider(this);
        }

        return projectDetailsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.Destination} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DestinationItemProvider destinationItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.Destination}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDestinationAdapter() {
        if (destinationItemProvider == null) {
            destinationItemProvider = new DestinationItemProvider(this);
        }

        return destinationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.Destinations} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DestinationsItemProvider destinationsItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.Destinations}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDestinationsAdapter() {
        if (destinationsItemProvider == null) {
            destinationsItemProvider = new DestinationsItemProvider(this);
        }

        return destinationsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.tibco.xpd.resources.projectconfig.AssetType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AssetTypeItemProvider assetTypeItemProvider;

    /**
     * This creates an adapter for a {@link com.tibco.xpd.resources.projectconfig.AssetType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAssetTypeAdapter() {
        if (assetTypeItemProvider == null) {
            assetTypeItemProvider = new AssetTypeItemProvider(this);
        }

        return assetTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory
                .getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(
            ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class)
                    || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (documentRootItemProvider != null)
            documentRootItemProvider.dispose();
        if (projectConfigItemProvider != null)
            projectConfigItemProvider.dispose();
        if (assetTypeItemProvider != null)
            assetTypeItemProvider.dispose();
        if (specialFolderItemProvider != null)
            specialFolderItemProvider.dispose();
        if (specialFoldersItemProvider != null)
            specialFoldersItemProvider.dispose();
        if (projectDetailsItemProvider != null)
            projectDetailsItemProvider.dispose();
        if (destinationItemProvider != null)
            destinationItemProvider.dispose();
        if (destinationsItemProvider != null)
            destinationsItemProvider.dispose();
    }

}
