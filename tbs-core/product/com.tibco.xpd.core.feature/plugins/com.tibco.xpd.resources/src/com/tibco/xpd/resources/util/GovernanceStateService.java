/*
 * Copyright (c) TIBCO Software Inc 2004, 2019. All rights reserved.
 */

package com.tibco.xpd.resources.util;

import java.io.IOException;
import java.util.Iterator;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.ecore.EObject;

import com.tibco.xpd.resources.XpdResourcesPlugin;
import com.tibco.xpd.resources.projectconfig.CustomProperties;
import com.tibco.xpd.resources.projectconfig.CustomProperty;
import com.tibco.xpd.resources.projectconfig.ProjectConfig;
import com.tibco.xpd.resources.projectconfig.ProjectDetails;
import com.tibco.xpd.resources.projectconfig.wc.ProjectConfigWorkingCopy;

/**
 * Used for querying and setting the governance state of a project.
 *
 * @author nwilson
 * @since 18 Jul 2019
 */
public class GovernanceStateService {


    /**
     * Sid ACE-5814 Project locked timestamp - ProjectConfig custom property name
     */
    private static final String PROJECT_LOCKED_TIMESTAMP_PROPERTY = "com.tibco.xpd.projectLockedTimestamp"; //$NON-NLS-1$

    /**
     * Checks if an EObject's parent project is Locked for Production.
     * 
     * @param eObj
     *            The EObject to check.
     * @return true if it is locked.
     * @throws CoreException
     *             if the state could not be checked.
     */
    public boolean isLockedForProduction(EObject eObj) {
        IProject project = WorkingCopyUtil.getProjectFor(eObj);
        boolean isLocked = false;
        try {
            isLocked = (new GovernanceStateService()).isLockedForProduction(project);
        } catch (CoreException e) {
            XpdResourcesPlugin.getDefault().getLogger().error(e);
        }

        return isLocked;
    }

    /**
     * Checks if a project is Locked for Production.
     * 
     * @param project
     *            The project to check.
     * @return true if it is locked.
     * @throws CoreException
     *             if the state could not be checked.
     */
    public boolean isLockedForProduction(IProject project) throws CoreException {
        if (!project.isAccessible()) {
            return false;
        }
        return project.hasNature(XpdConsts.LOCKED_FOR_PRODUCTION_NATURE);
    }

    /**
     * Sets a project as Locked for Production.
     * 
     * @param project
     *            The project to lock.
     * @throws CoreException
     *             if the project could not be locked.
     */
    public void lockForProduction(IProject project) throws CoreException {
        ProjectUtil.addNature(project, XpdConsts.LOCKED_FOR_PRODUCTION_NATURE);

        /*
         * Sid ACE-5814 Save the 'timestamp of project lock', this can then be used s the qualifier for all RASC
         * generation of locked project.
         */
        ProjectUtil.setCustomProperty(project,
                PROJECT_LOCKED_TIMESTAMP_PROPERTY,
                ProjectUtil2.getAutogeneratedQualifier());

    }

    /**
     * Creates a new draft of a project by unlocking it and incrementing the
     * minor version.
     * 
     * @param project
     *            The project to create a new draft for.
     * @throws CoreException
     *             if the project could not be unlocked.
     * @throws IOException
     */
    public void createNewDraft(IProject project) throws CoreException, IOException {
        ProjectUtil.removeNature(project, XpdConsts.LOCKED_FOR_PRODUCTION_NATURE);
        ProjectConfig projectConfig = XpdResourcesPlugin.getDefault().getProjectConfig(project);

        if (projectConfig != null) {
            ProjectDetails projectDetails = projectConfig.getProjectDetails();
            if (projectDetails != null) {
                String version = projectDetails.getVersion();
                if (version != null) {
                    // Increment minor version;
                    version = incrementVersion(version);
                    projectDetails.setVersion(version);

                    /*
                     * Sid ACE-5814 remove the project locked timestamp
                     */
                    CustomProperties customProperties = projectDetails.getCustomProperties();

                    if (customProperties != null) {
                        for (Iterator iterator = customProperties.getCustomProperty().iterator(); iterator.hasNext();) {
                            CustomProperty customProperty = (CustomProperty) iterator.next();

                            if (PROJECT_LOCKED_TIMESTAMP_PROPERTY.equals(customProperty.getName())) {
                                iterator.remove();
                                break;
                            }
                        }
                    }

                    /* Save it. */
                    ProjectConfigWorkingCopy wc =
                            (ProjectConfigWorkingCopy) WorkingCopyUtil.getWorkingCopyFor(projectConfig);
                    wc.setDetails(projectDetails);
                }
            }
        }
    }

    /**
     * Increments the minor version of a project.
     * 
     * @param version
     *            The old version.
     * @return The new version.
     * @throws IOException
     */
    private String incrementVersion(String version) throws IOException {
        String newVersion = null;
        String[] parts = version.split("\\."); //$NON-NLS-1$
        if (parts.length > 1) {
            parts[1] = String.valueOf(Integer.parseInt(parts[1]) + 1);
            newVersion = String.join(".", parts); //$NON-NLS-1$
        }
        if (newVersion == null) {
            throw new IOException("Could not increment minor version for " + version); //$NON-NLS-1$
        }
        return newVersion;
    }

    /**
     * Get the locked for production timestamp for the given project.
     * 
     * Sid ACE-5814
     * 
     * @param project
     * 
     * @return The timestamp that the project was last locked (<code>null</code> if not set - i.e. project not locked).
     */
    public String getProjectLockedTimestamp(IProject project) {
        return ProjectUtil.getCustomProperty(project, PROJECT_LOCKED_TIMESTAMP_PROPERTY);
    }
}
