package com.tibco.xpd.core.createtestwizards.generators;

import com.tibco.xpd.core.createtestwizards.generatordata.*;
import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;

public class ApiClassTestJavaClassGenerator
{
  protected static String nl;
  public static synchronized ApiClassTestJavaClassGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ApiClassTestJavaClassGenerator result = new ApiClassTestJavaClassGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/**" + NL + " * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved." + NL + " */";
  protected final String TEXT_2 = NL + "package ";
  protected final String TEXT_3 = ";" + NL + "" + NL + "import org.eclipse.core.runtime.Platform;" + NL + "import org.osgi.framework.Bundle;" + NL + "import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;" + NL + "" + NL + "/**" + NL + " * ";
  protected final String TEXT_4 = NL + " * <p>" + NL + " * ";
  protected final String TEXT_5 = " - To test ongoing backwards-compatibility of API provided by the class(es):";
  protected final String TEXT_6 = NL + " * <li>";
  protected final String TEXT_7 = "</li>";
  protected final String TEXT_8 = " " + NL + " * </p>" + NL + " *" + NL + " * <p>" + NL + " * Generated by: createBaseTest.javajet" + NL + " * </p>" + NL + " */" + NL + "public class ";
  protected final String TEXT_9 = " extends AbstractApiClassTest {" + NL;
  protected final String TEXT_10 = NL + "    public void testApiFor_";
  protected final String TEXT_11 = "() throws Exception {" + NL + "" + NL + "\t\tString clazzBundleId = \"";
  protected final String TEXT_12 = "\";" + NL + "" + NL + "\t\tBundle clazzBundle = Platform.getBundle(clazzBundleId);" + NL + "\t\tassertNotNull(\"Could not load the API-class parent plug-in bundle: \" + clazzBundleId, clazzBundle); //$NON-NLS-1$" + NL + "\t\t" + NL + "" + NL + "        String clazzName = \"";
  protected final String TEXT_13 = "\";" + NL + "" + NL + "        Class<?> clazz = clazzBundle.loadClass(clazzName);" + NL + "" + NL + "        assertNotNull(\"Failed to load API-class to test: \" + clazzName, clazz);  //$NON-NLS-1$" + NL + "" + NL + "        AbstractApiClassTest.log(clazz.toString());" + NL + "" + NL + "        String[] constructorControlSample = new String[] {";
  protected final String TEXT_14 = " " + NL + "            \"";
  protected final String TEXT_15 = "\", //$NON-NLS-1$";
  protected final String TEXT_16 = NL + "                };" + NL + "        checkApiConstructors(clazz, constructorControlSample);" + NL + "" + NL + "        String[] fieldControlSample = new String[] {";
  protected final String TEXT_17 = " " + NL + "            \"";
  protected final String TEXT_18 = "\",  //$NON-NLS-1$ ";
  protected final String TEXT_19 = NL + "                };" + NL + "        checkApiFields(clazz, fieldControlSample);" + NL + "" + NL + "        String[] methodControlSample = new String[] {";
  protected final String TEXT_20 = " " + NL + "            \"";
  protected final String TEXT_21 = "\", //$NON-NLS-1$";
  protected final String TEXT_22 = NL + "                };" + NL + "        checkApiMethods(clazz, methodControlSample);" + NL + "" + NL + "        String[] nestedClassControlSample = new String[] {";
  protected final String TEXT_23 = " " + NL + "            \"";
  protected final String TEXT_24 = "\",  //$NON-NLS-1$";
  protected final String TEXT_25 = NL + "                };" + NL + "        checkApiNestedClasses(clazz, nestedClassControlSample);" + NL + "" + NL + "        if (isStrict) {" + NL + "            checkUntestedApi(clazz);" + NL + "        }" + NL + "" + NL + "    }" + NL + "    ";
  protected final String TEXT_26 = NL + NL + "    " + NL + "}" + NL;
  protected final String TEXT_27 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(TEXT_1);
     ApiClassTestJavaClassGeneratorData data = (ApiClassTestJavaClassGeneratorData)argument; 
    stringBuffer.append(TEXT_2);
    stringBuffer.append(data.testPackageId);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(data.testClassName);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(data.testName);
    stringBuffer.append(TEXT_5);
     for (Class<?> apiClass : data.apiClasses) { 
    stringBuffer.append(TEXT_6);
    stringBuffer.append(apiClass.getName());
    stringBuffer.append(TEXT_7);
     } 
    stringBuffer.append(TEXT_8);
    stringBuffer.append(data.testClassName);
    stringBuffer.append(TEXT_9);
     for (Class<?> apiClass : data.apiClasses) { 
    stringBuffer.append(TEXT_10);
    stringBuffer.append(data.getJavaTokenName(apiClass.getName()));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(data.apiClassParentPluginId);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(apiClass.getName());
    stringBuffer.append(TEXT_13);
     for (String desc : AbstractApiClassTest.getApiConstructors(apiClass)) { 
    stringBuffer.append(TEXT_14);
    stringBuffer.append(desc);
    stringBuffer.append(TEXT_15);
     } 
    stringBuffer.append(TEXT_16);
     for (String desc : AbstractApiClassTest.getApiFields(apiClass)) { 
    stringBuffer.append(TEXT_17);
    stringBuffer.append(desc);
    stringBuffer.append(TEXT_18);
     } 
    stringBuffer.append(TEXT_19);
     for (String desc : AbstractApiClassTest.getApiMethods(apiClass)) { 
    stringBuffer.append(TEXT_20);
    stringBuffer.append(desc);
    stringBuffer.append(TEXT_21);
     } 
    stringBuffer.append(TEXT_22);
     for (String desc : AbstractApiClassTest.getApiNestedClassDescriptions(apiClass)) { 
    stringBuffer.append(TEXT_23);
    stringBuffer.append(desc);
    stringBuffer.append(TEXT_24);
     } 
    stringBuffer.append(TEXT_25);
     } 
    stringBuffer.append(TEXT_26);
    stringBuffer.append(TEXT_27);
    return stringBuffer.toString();
  }
}
