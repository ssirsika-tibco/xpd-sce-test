<%@ jet 
     package="com.tibco.xpd.core.createtestwizards.generators" 
     class="ApiClassTestJavaClassGenerator"
     imports="com.tibco.xpd.core.createtestwizards.generatordata.* com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest" 
%>
/**
 * Copyright (c) TIBCO Software Inc 2004-2009. All rights reserved.
 */
<% ApiClassTestJavaClassGeneratorData data = (ApiClassTestJavaClassGeneratorData)argument; %>
package <%=data.testPackageId%>;

import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;
import com.tibco.xpd.core.test.util.classapi.AbstractApiClassTest;

/**
 * <%=data.testClassName%>
 * <p>
 * <%=data.testName%> - To test ongoing backwards-compatibility of API provided by the class(es):
<% for (Class<?> apiClass : data.apiClasses) { %>
 * <li><%=apiClass.getName()%></li>
<% } %> 
 * </p>
 *
 * <p>
 * Generated by: createBaseTest.javajet
 * </p>
 */
public class <%=data.testClassName%> extends AbstractApiClassTest {

<% for (Class<?> apiClass : data.apiClasses) { %>
    public void testApiFor_<%=data.getJavaTokenName(apiClass.getName())%>() throws Exception {

		String clazzBundleId = "<%=data.apiClassParentPluginId%>";

		Bundle clazzBundle = Platform.getBundle(clazzBundleId);
		assertNotNull("Could not load the API-class parent plug-in bundle: " + clazzBundleId, clazzBundle); //$NON-NLS-1$
		

        String clazzName = "<%=apiClass.getName()%>";

        Class<?> clazz = clazzBundle.loadClass(clazzName);

        assertNotNull("Failed to load API-class to test: " + clazzName, clazz);  //$NON-NLS-1$

        AbstractApiClassTest.log(clazz.toString());

        String[] constructorControlSample = new String[] {
<% for (String desc : AbstractApiClassTest.getApiConstructors(apiClass)) { %> 
            "<%=desc%>", //$NON-NLS-1$
<% } %>
                };
        checkApiConstructors(clazz, constructorControlSample);

        String[] fieldControlSample = new String[] {
<% for (String desc : AbstractApiClassTest.getApiFields(apiClass)) { %> 
            "<%=desc%>",  //$NON-NLS-1$ 
<% } %>
                };
        checkApiFields(clazz, fieldControlSample);

        String[] methodControlSample = new String[] {
<% for (String desc : AbstractApiClassTest.getApiMethods(apiClass)) { %> 
            "<%=desc%>", //$NON-NLS-1$
<% } %>
                };
        checkApiMethods(clazz, methodControlSample);

        String[] nestedClassControlSample = new String[] {
<% for (String desc : AbstractApiClassTest.getApiNestedClassDescriptions(apiClass)) { %> 
            "<%=desc%>",  //$NON-NLS-1$
<% } %>
                };
        checkApiNestedClasses(clazz, nestedClassControlSample);

        if (isStrict) {
            checkUntestedApi(clazz);
        }

    }
    
<% } %>

    
}

